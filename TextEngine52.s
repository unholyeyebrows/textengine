	OPT	c+, o-, l-	;Case sensitive, non-optimised, executable.
*****************************************************************************
* TextEngine V5.2                                                           *
* GUI Generated by GadToolsBox by Jan van den Baard.                        *
* Code by Nicholas Harvey, © Copyright 2010.                                *
* Last changes made 02/09/2010.                                             *
*****************************************************************************

*****************************************************************************
* Changes made to TextEngineGUI.s:                                          *
*                                                                           *
* 1. Added DC.L $80000093,1 to MainEditWindowWindowTags.                    *
* 2. Added DC.L $80080043,1 to MTags1.                                      *
* 3. Added DC.L $80080006,0 to top of SpellCheckerGTags.                    *
*****************************************************************************

*****************************************************************************
* Exec library function offsets.                                            *
*****************************************************************************
_SysBase		EQU	4
OpenLib			EQU	-408
CloseLib		EQU	-414
AddTail			EQU	-246
RemTail			EQU	-264
WaitPort		EQU	-384
Wait			EQU	-318
FindTask		EQU	-294
CreateMsgPort		EQU	-666
DeleteMsgPort		EQU	-672
OpenDevice		EQU	-444
CloseDevice		EQU	-450
DoIO			EQU	-456
SendIO			EQU	-462
CheckIO			EQU	-468
AbortIO			EQU	-480
WaitIO			EQU	-474
AvailMem		EQU	-216
AllocMem		EQU	-198
FreeMem			EQU	-210
GetMsg			EQU	-372
ReplyMsg		EQU	-378
CurrentDir		EQU	-126
CreateIORequest		EQU	-654
DeleteIORequest		EQU	-660
MEMF_CLEAR		EQU	$00010000
MEMF_CHIP		EQU	$00000002
MEMF_FAST		EQU	$00000004
mp_SigBit		EQU	15
mp_SigTask		EQU	16
ln_Name			EQU	10
ln_Type			EQU	8
lib_Version		EQU	20

*****************************************************************************
* DOS library function offsets.                                             *
*****************************************************************************
MODE_OLDFILE		EQU	$000003ed
MODE_NEWFILE		EQU	$000003ee
Open			EQU	-30
Close			EQU	-36
Read			EQU	-42
Write			EQU	-48
NameFromLock		EQU	-402
Seek			EQU	-66
Delay			EQU	-198
Lock			EQU	-84
UnLock			EQU	-90
Examine			EQU	-102
SystemTagList		EQU	-606
CMD_READ		EQU	2
CMD_WRITE		EQU	3
CMD_UPDATE		EQU	4
CMD_CLEAR		EQU	5
wa_Lock			EQU	0
wa_Name			EQU	4
am_ArgList		EQU	34
pr_CLI			EQU	172
pr_MsgPort		EQU	92
sm_ArgList		EQU	36
sm_NumArgs		EQU	28
fib_Size		EQU	124
io_Offset		EQU	44
io_Error		EQU	31
io_ClipID		EQU	48
io_Data			EQU	40
io_Length		EQU	36
io_Command		EQU	28
io_Device		EQU	20
io_Unit			EQU	24
io_Actual		EQU	32
*****************************************************************************
* ASL library function offsets.                                             *
*****************************************************************************
AllocAslRequest		EQU	-48
FreeAslRequest		EQU	-54
AslRequest		EQU	-60
ASL_Hail		EQU	$80080001
ASL_OKText		EQU	$80080012
ASL_Pattern		EQU	$8008000a
ASL_FuncFlags		EQU	$80080014
ASL_Window		EQU	$80080002
FILF_PATGAD		EQU	$00000001
FILF_SAVE		EQU	$00000020
rf_File			EQU	4
rf_Dir			EQU	8

*****************************************************************************
* Graphics library function offsets.                                        *
*****************************************************************************
RPort			EQU	50
LinePtrn		EQU	34
SetAPen			EQU	-342
SetBPen			EQU	-348
SetDrMd			EQU	-354
Move			EQU	-240
Draw			EQU	-246

*****************************************************************************
* GadTools library function offsets.                                        *
*****************************************************************************
SpecialInfo		EQU	34
LongInt			EQU	28
Flags			EQU	12
ItemFile		EQU	18
GT_GetIMsg		EQU	-72
GT_ReplyIMsg		EQU	-78
GT_SetGadgetAttrsA	EQU	-42
Class			EQU	$14
Code			EQU	$18
GFLG_SELECTED		EQU	$00000080

*****************************************************************************
* Intuition library function offsets.                                       *
*****************************************************************************
ActivateGadget		EQU	-462
ActivateWindow		EQU	-450
ItemAddress		EQU	-144
AddGList		EQU	-438
RemoveGList		EQU	-444
RefreshGList		EQU	-432
GetScreenDrawInfo	EQU	-690
FreeScreenDrawInfo	EQU	-696
SetGadgetAttrsA		EQU	-660
GetAttr			EQU	-654
SetAttrsA		EQU	-648
InitRequester		EQU	-138
Request			EQU	-240
EndRequest		EQU	-120
SetWindowTitles		EQU	-276
DisplayBeep		EQU	-96
EasyRequestArgs		EQU	-588
SetPointer		EQU	-270
ClearPointer		EQU	-60
SetWindowPointerA	EQU	-816
DrawImage		EQU	-114
UserPort		EQU	86
RastPort		EQU	50
IAddress		EQU	28
GadgetID		EQU	38
NextSelect		EQU	32
Width			EQU	8
Height			EQU	10
BorderLeft		EQU	54
BorderRight		EQU	56
BorderTop		EQU	55
BorderBottom		EQU	57
MouseY			EQU	12
MouseX			EQU	14
ItemFill		EQU	18
ITextFont		EQU	8
IDCMP_NEWSIZE		EQU	$00000002
IDCMP_GADGETDOWN	EQU	$00000020
IDCMP_GADGETUP		EQU	$00000040
IDCMP_MENUPICK		EQU	$00000100
IDCMP_CLOSEWINDOW	EQU	$00000200
IDCMP_INTUITICS		EQU	$00400000
IDCMP_MOUSEBUTTONS	EQU	$00000008
IDCMP_MOUSEMOVE		EQU	$00000010
SELECTDOWN		EQU	$00000068
FirstItem		EQU	18
CHECKED			EQU	$0100
WA_Left			EQU	$80000064
WA_Top			EQU	$80000065
WA_Width		EQU	$80000066
WA_Height		EQU	$80000067
WA_ScreenTitle		EQU	$8000006f
WA_Flags		EQU	$8000006b
WA_BusyPointer		EQU	$80000098

*****************************************************************************
* Workbench library function offsets.                                       *
*****************************************************************************
AddAppWindow		EQU	-48
RemoveAppWindow		EQU	-54

*****************************************************************************
* Console device function offsets.                                          *
*****************************************************************************
cu_TxHeight		EQU	282
cu_TxWidth		EQU	284

*****************************************************************************
* Offsets for text buffer structure.                                        *
*****************************************************************************
tb_Next			EQU	0
tb_Prev			EQU	4
tb_LineLength		EQU	8
tb_Text			EQU	12
LineBlockLength		EQU	253

*****************************************************************************
* Open the required Amiga libraries.                                        *
*****************************************************************************
Begin:	move.l	a0,CommAdd
	move.l	d0,CommLen

	move.l	_SysBase,a6
	move.l	#0,a1
	jsr	FindTask(a6)		;Find the task.
	move.l	d0,Task

	move.l	Task,a4
	tst.l	pr_CLI(a4)
	bne	RunFromCLI		;Launched from the CLI.

	lea	pr_MsgPort(a4),a0
	jsr	WaitForPort		;Wait for WBMessage.

	move.l	_SysBase,a6
	jsr	GetMsg(a6)
	move.l	d0,WBMessage

RunFromCLI:
	move.l	#GadToolsName,a1
	jsr	OpenLibrary
	move.l	d0,_GadToolsBase
	beq	GadToolsFail	;Library not available.

	move.l	#IntuitionName,a1
	jsr	OpenLibrary
	move.l	d0,_IntuitionBase
	beq	IntuitionFail	;Library not available.

	move.l	#GfxName,a1
	jsr	OpenLibrary
	move.l	d0,_GfxBase
	beq	GfxFail		;Library not available.

	move.l	#UtilityName,a1
	jsr	OpenLibrary
	move.l	d0,_UtilityBase
	beq	UtilityFail	;Library not available.

	move.l	#ASLName,a1
	jsr	OpenLibrary
	move.l	d0,_ASLBase
	beq	ASLFail		;Library not available.

	move.l	#DOSName,a1
	jsr	OpenLibrary
	move.l	d0,_DOSBase
	beq	DOSFail		;Library not available.

	move.l	#WorkbenchName,a1
	jsr	OpenLibrary
	move.l	d0,_WorkbenchBase
	beq	WorkbenchFail		;Library not available.

	move.l	Task,a4
	tst.l	pr_CLI(a4)
	bne	RunFromCLI2		;Launched from the CLI.

	move.l	WBMessage,a0
	move.l	sm_ArgList(a0),a0
	move.l	wa_Lock(a0),d1
	move.l	_DOSBase,a6
	jsr	CurrentDir(a6)		;Get workbench dir.
	move.l	d0,OldLock

RunFromCLI2:
	jsr	InitialiseTextBuffer	;Grab some memory.
	cmp.l	#0,FirstLinePtr
	beq	InitialiseTextBufferFail;Memory not avaiable.

	jsr	LoadPreferences		;Load user preferences file.
*****************************************************************************
* Open the display.                                                         *
*****************************************************************************
	jsr	SetupScreen
	bne	SetupScreenFail		;Screen not available.

	jsr	GetDrawInfo

	jsr	SizeMainEditWindow
	jsr	OpenMainEditWindowWindow
	bne	OpenMainEditWindowWindowFail	;Window not available.

	jsr	InitialiseLoadRequester
	beq	InitialiseLoadRequesterFail
	jsr	InitialiseInsertRequester
	beq	InitialiseInsertRequesterFail
	jsr	InitialiseSaveRequester
	beq	InitialiseSaveRequesterFail

	jsr	AdjustMenuItems
	jsr	OpenConsole
	jsr	MakeAppWindow
	jsr	GetWindowDimensions
	jsr	DrawBOOPSIGadgets
	jsr	DrawPrinterBorders
	jsr	DeterminePortIDs
	;jsr	WelcomeToTextEngine		;Display welcome picture.

*****************************************************************************
* Handle CLI and Workbench input arguments.                                 *
*****************************************************************************
	move.l	Task,a4
	tst.l	pr_CLI(a4)
	bne	HandleCLIArgs		;Launched from the CLI.

	move.l	WBMessage,a0		;Process event
	cmp.l	#1,sm_NumArgs(a0)
	beq	MainControlLoop		;No icons selected.

	move.l	sm_ArgList(a0),a0
	add.l	#8,a0			;Get next argument.
	move.l	wa_Lock(a0),d1		;Get file lock in d0.

	cmp.l	#0,d1
	beq	MainControlLoop		;Icon doesn't have a lock.

	jsr	BlockInput

	move.l	#0,imsg
	move.l	WBMessage,a5		;Process event
	move.l	sm_ArgList(a5),a5
	add.l	#8,a5			;Get next argument.
	jmp	AppWindowLoadFile

HandleCLIArgs:
	move.l	CommLen,d5
	sub.l	#1,d5
	cmp.l	#0,d5
	ble	MainControlLoop
	sub.l	#1,d5

	cmp.l	#300,d5
	blo	CLIArgShortEnough
	move.l	#299,d5
CLIArgShortEnough:
	move.l	CommAdd,a5
	move.l	#FileName,a6
CLIArgLoop:
	cmp.b	#$22,(a5)
	beq	CLIArgLoopAvoidSpeechMarks
	move.b	(a5),(a6)
	add.l	#1,a6
CLIArgLoopAvoidSpeechMarks:
	add.l	#1,a5
	dbra	d5,CLIArgLoop

	jsr	BlockInput
	jmp	OpenAppWindowFile

*****************************************************************************
* Load a file via the appwindow.                                            *
*****************************************************************************
ProcessAppWindow:
	move.l	AppWindowPort,a0
	move.l	_SysBase,a6
	jsr	GetMsg(a6)

	move.l	d0,imsg
	tst.l	d0
	beq	MainControlLoop

	move.l	MainEditWindowWnd,a0
	move.l	_IntuitionBase,a6
	jsr	ActivateWindow(a6)

	jsr	BlockInput		;Block input to main edit window.

	move.l	imsg,a5			;Process event
	move.l	am_ArgList(a5),a5
AppWindowLoadFile:
	move.l	wa_Lock(a5),d1		;Get file lock in d1.

	move.l	#FileName,d2
	move.l	#300,d3
	move.l	_DOSBase,a6
	jsr	NameFromLock(a6)

	move.l	#300,d0
	move.l	#FileName,a0
AppWindowMakeFileName:
	cmp.b	#0,(a0)
	beq	AppWindowGotFilePath
	sub.l	#1,d0
	add.l	#1,a0
	jmp	AppWindowMakeFileName

AppWindowGotFilePath:
	move.l	wa_Name(a5),a1		;Get file name in a1.

	sub.l	#1,d0

	sub.l	#1,a0
	cmp.b	#":",(a0)
	bne	AddAppWindowFileSlash

	add.l	#1,a0
AppWindowFinishFileName:
	move.b	(a1),(a0)
	cmp.b	#0,(a1)
	beq	AppWindowFinishedFileName

	add.l	#1,a0
	add.l	#1,a1
	dbra	d0,AppWindowFinishFileName

AppWindowFinishedFileName:
	cmp.l	#0,imsg
	beq	OpenAppWindowFile	;For WB startup use.

	jsr	ReplyExecMessage
	jmp	OpenAppWindowFile

AddAppWindowFileSlash:
	add.l	#1,a0
	move.b	#"/",(a0)+
	jmp	AppWindowFinishFileName

*****************************************************************************
* Close the display.                                                        *
*****************************************************************************
Quit:	jsr	RemoveBOOPSIObjects	;Remove BOOPSI objects.
	jsr	DestroyAppWindow
	jsr	CloseConsole		;Close console device.

	jsr	FreeSaveRequester	;Free save requester.
InitialiseSaveRequesterFail:
	jsr	FreeInsertRequester	;Free insert requester.
InitialiseInsertRequesterFail:
	jsr	FreeLoadRequester	;Free load requester
InitialiseLoadRequesterFail:

OpenMainEditWindowWindowFail:
	jsr	CloseMainEditWindowWindow	;Close window.
SetupScreenFail:
	jsr	CloseDownScreen		;Remove lock on screen.

*****************************************************************************
* Close the Amiga libraries.                                                *
*****************************************************************************
	move.l	LastLinePtr,a1
	jsr	ReleaseTextBuffer	;Release text buffer memory.

InitialiseTextBufferFail:
	move.l	_WorkbenchBase,a1
	jsr	CloseLibrary

WorkbenchFail:
	move.l	_DOSBase,a1
	jsr	CloseLibrary

DOSFail:move.l	_ASLBase,a1		;Close ASL library.
	jsr	CloseLibrary

ASLFail:move.l	_UtilityBase,a1
	jsr	CloseLibrary		;Close utility library.

UtilityFail:
	move.l	_GfxBase,a1
	jsr	CloseLibrary		;Close graphics library.

GfxFail:move.l	_IntuitionBase,a1
	jsr	CloseLibrary		;Close intuition library.

IntuitionFail:
	move.l	_GadToolsBase,a1
	jsr	CloseLibrary		;Close gadtools library

GadToolsFail:
	jsr	FreeDictionary		;Release dictionay memory.
	tst.l	WBMessage
	beq	CLIQuit

	move.l	OldLock,d1
	move.l	_DOSBase,a6
	jsr	CurrentDir(a6)

	move.l	_SysBase,a6
	jsr	Forbid(a6)

	move.l	_SysBase,a6
	move.l	WBMessage,a1
	jsr	ReplyMsg(a6)

CLIQuit:move.l	#0,d0
	move.l	#0,a0
	rts	;**** End of program.	;End program execution.

*****************************************************************************
* Subroutines begin here.                                                   *
*****************************************************************************

*****************************************************************************
* Display welcome picture.                                                  *
*****************************************************************************
WelcomeToTextEngine:
	jsr	BlockInput

	clr.l	d0
	clr.l	d1

	move.l	Scr,a5
	move.w	12(a5),d0	;Width.
	move.w	14(a5),d1	;Height.

	sub.l	#316,d0
	divu	#2,d0

	clr.l	d5
	move.w	d0,d5
	move.l	d5,WelcomeLeft+4

	sub.l	#142,d1
	divu	#2,d1

	clr.l	d5
	move.w	d1,d5
	move.l	d5,WelcomeTop+4

	move.l	_IntuitionBase,a6
	move.l	#0,a0
	move.l	#WelcomeWindowTagList,a1
	jsr	OpenWindowTagList(a6)
	move.l	d0,WelcomeWindowWnd
	beq	WelcomeFail		;Window not open.

	move.l	#WelcomeImage4,a1
	move.l	WBDrawInfo1,a5
	clr.l	d5
	move.w	12(a5),d5		;Get screen depth.
	cmp.w	#2,d5
	ble	Draw4ColourPicture	;Screen depth <=2 planes.

	move.l	#WelcomeImage8,a1	;Screen depth >=3 planes.
Draw4ColourPicture:
	clr.l	d0
	clr.l	d1
	move.l	_IntuitionBase,a6
	move.l	WelcomeWindowWnd,a0
	move.l	RastPort(a0),a0
	jsr	DrawImage(a6)

	move.l	_DOSBase,a6
	move.l	#100,d1			;Wait for 2 seconds.
	jsr	Delay(a6)

	move.l	_IntuitionBase,a6
	move.l	WelcomeWindowWnd,a0
	jsr	CloseWindow(a6)		;Close the window.

WelcomeFail:
	jsr	UnBlockInput
	rts

*****************************************************************************
* Size the main edit window to the screen resolution.                       *
*****************************************************************************
SizeMainEditWindow:
	move.l	Scr,a5
	move.l	#MainEditWindowWindowTags,a6

	move.w	12(a5),92(a6)
	move.w	14(a5),100(a6)

	move.w	OffY,d5
	move.w	OffX,d6

	move.w	#0,MainEditWindowLeft
	move.w	d5,MainEditWindowTop

	move.w	12(a5),MainEditWindowWidth
	;sub.w	d6,MainEditWindowWidth
	;sub.w	d6,MainEditWindowWidth

	move.w	14(a5),MainEditWindowHeight
	sub.w	#2,MainEditWindowHeight 
	sub.w	d5,MainEditWindowHeight
	sub.w	d5,MainEditWindowHeight
	rts

*****************************************************************************
* Subroutines to block and unblock input to main edit window.               *
*****************************************************************************
BlockInput:
	jsr	SleepPointer

	move.l	_IntuitionBase,a6
	move.l	#BlockingRequester,a0
	jsr	InitRequester(a6)	;Initialise requester.

	move.l	_IntuitionBase,a6
	move.l	#BlockingRequester,a0
	move.l	MainEditWindowWnd,a1
	jsr	Request(a6)		;Open the requester.
	rts

UnBlockInput:
	move.l	_IntuitionBase,a6
	move.l	#BlockingRequester,a0
	move.l	MainEditWindowWnd,a1
	jsr	EndRequest(a6)		;Close the requester.

	jsr	WakePointer
	rts

*****************************************************************************
* Subroutines to block and unblock input to spell checker window.           *
*****************************************************************************
BlockSpellInput:
	move.l	_IntuitionBase,a6
	move.l	#SpellBlockingRequester,a0
	jsr	InitRequester(a6)	;Initialise requester.

	move.l	_IntuitionBase,a6
	move.l	#SpellBlockingRequester,a0
	move.l	SpellCheckerWnd,a1
	jsr	Request(a6)		;Open the requester.

	move.l	_IntuitionBase,a0
	move.w	lib_Version(a0),d0	;Get intuition version.
	cmp.w	#39,d0
	blo	OldBlockSpellInput	;Have to use lores pointer.

	move.l	#PointerSwitch,a0	;Use prefs sleepy pointer.
	move.l	#-1,(a0)

	move.l	SpellCheckerWnd,a0
	move.l	#PointerTags,a1
	move.l	_IntuitionBase,a6
	jsr	SetWindowPointerA(a6)
	rts

OldBlockSpellInput:
	move.l	SpellCheckerWnd,a0
	move.l	#SleepPointerImage,a1
	move.l	#16,d0
	move.l	#16,d1
	move.l	#-6,d2
	move.l	#0,d3
	move.l	_IntuitionBase,a6
	jsr	SetPointer(a6)
	rts

UnBlockSpellInput:
	move.l	_IntuitionBase,a6
	move.l	#SpellBlockingRequester,a0
	move.l	SpellCheckerWnd,a1
	jsr	EndRequest(a6)		;Close the requester.

	move.l	_IntuitionBase,a0
	move.w	lib_Version(a0),d0	;Get intuition version.
	cmp.w	#39,d0
	blo	OldUnBlockSpellInput	;Have to use lores pointer.

	move.l	#PointerSwitch,a0	;Use prefs sleepy pointer.
	move.l	#0,(a0)

	move.l	SpellCheckerWnd,a0
	move.l	#PointerTags,a1
	move.l	_IntuitionBase,a6
	jsr	SetWindowPointerA(a6)
	rts

OldUnBlockSpellInput:
	move.l	SpellCheckerWnd,a0
	move.l	_IntuitionBase,a6
	jsr	ClearPointer(a6)
	rts

*****************************************************************************
* Subroutine to refresh text and bevel boxes in window.                     *
*****************************************************************************
RefreshWindowContents:
	move.w	#0,TextBlockMarked

	jsr	CloseConsole		;Re-size the
	jsr	OpenConsole		; console window.
	jsr	GetWindowDimensions	;Get new window size.
	jsr	UpdateBOOPSIGadgets	;Adjust slider gadgets.

	jsr	HideCursor
	jsr	DisplayVisibleText

	jsr	ResetCursor		;Place cursor in
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr

	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	RefreshWindowContentsCont

	move.l	d6,CurrentLineOffset
RefreshWindowContentsCont:
	jsr	ShowCursor
	jmp	ProcessMainWindowEvent

*****************************************************************************
* Load preferences file from disk.                                          *
*****************************************************************************
LoadPreferences:
	move.l	#MODE_OLDFILE,d2
	move.l	#PreferencesFileName,d1
	jsr	OpenFile
	move.l	d0,TextFileHd
	beq	SetDefaultPrefs

	move.l	#Preferences,d2		;Buffer for file contents
	move.l	#2875,d3		;Length of read
	move.l	TextFileHd,d1
	jsr	ReadFile

	move.l	TextFileHd,d1
	jsr	CloseFile

SetDefaultPrefs:
	;Spell checker string pointers:
	move.l	#SpellCheckerGTags,a0
	move.l	#SpellReplaceString,32(a0)
	move.l	#SpellUnknownString,52(a0)

	;Find & replace string pointers.
	move.l	#FindTextGTags,a0
	move.l	#ReplaceTextString,12(a0)
	move.l	#FindTextString,FindTextStringPtr
	move.l	FindTextStringPtr,32(a0)

	;Printer prefs defaults.

	move.l	#PrinterPrefsGTags,a0
	move.l	PrinterTopMargin,48(a0)		;Top margin = 0.
	move.l	PrinterBottomMargin,68(a0)	;Bottom margin = 0.
	move.l	PrinterPageHeight,88(a0)	;Page length = 70.
	move.l	PrinterLeftMargin,108(a0)	;Left margin = 5.
	move.l	PrinterRightMargin,128(a0)	;Right margin = 5.
	move.l	PrinterPageWidth,148(a0)	;Page width = 80.
	move.l	#PrintToString,168(a0)		;'Print to' string pointer.
	move.l	DraftPrintMode,12(a0)		;Draft print on.
	move.l	PropPrintMode,24(a0)		;Proportional off.
	move.l	DSPrintMode,36(a0)		;Double space off.
	move.l	NumOfCopies,188(a0)		;Num of copies.

	;Function keys defaults.

	move.l	#FunctionKeysGTags,a0
	move.l	#F1String,12(a0)
	move.l	#F2String,32(a0)
	move.l	#F3String,52(a0)
	move.l	#F4String,72(a0)
	move.l	#F5String,92(a0)
	move.l	#F6String,112(a0)
	move.l	#F7String,132(a0)
	move.l	#F8String,152(a0)
	move.l	#F9String,172(a0)
	move.l	#F10String,192(a0)

	;Colour prefs defaults.

	move.l	#InitConsoleText,a5	;Change console colours.
	add.l	#4,a5			;Text colour

	move.w	TextColour,d5
	add.b	#$30,d5
	move.b	d5,(a5)			;Insert text colour.

	add.l	#3,a5

	move.w	FieldColour,d5
	add.b	#$30,d5
	move.b	d5,(a5)			;Insert field colour.

	add.l	#3,a5

	move.w	FieldColour,d5
	add.b	#$30,d5
	move.b	d5,(a5)			;Insert field colour.

	rts

*****************************************************************************
* Make menus reflect preferences.                                           *
*****************************************************************************
AdjustMenuItems:
	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	jsr	ClearMenuStrip(a6)	;Clear menus.

	move.l	MainEditWindowMenus,a0	;Address of first menu.
	move.l	(a0),a0			;Address of second menu.
	move.l	(a0),a0			;Address of third menu.
	move.l	(a0),a0			;Address of fourth menu.
	move.l	(a0),a0			;Address of fifth menu.
	move.l	(a0),a0			;Address of sixth menu.
	move.l	(a0),a0			;Address of seventh menu.

	move.l	FirstItem(a0),a0	;Address of Word Wrap item.
	move.w	WordWrapMode,d0
	move.w	#%1111111011111111,d1
	and.w	d1,Flags(a0)
	or.w	d0,Flags(a0)

	move.l	(a0),a0			;Get second menu item.
	move.w	ShowBordersMode,d0
	move.w	#%1111111011111111,d1
	and.w	d1,Flags(a0)
	or.w	d0,Flags(a0)

	move.l	Scr,a0
	move.l	40(a0),a0	;Get pointer to font (TextAttr structure).
	move.l	(a0),BoldFont	;Store font name.
	move.l	(a0),ItalicFont	;Store font name.
	move.l	(a0),UnderlineFont	;Store font size.
	move.w	4(a0),BoldFont+4	;Store font size.
	move.w	4(a0),ItalicFont+4	;Store font size.
	move.w	4(a0),UnderlineFont+4	;Store font size..

	move.l	MainEditWindowMenus,a0	;Address of first menu.
	move.l	(a0),a0			;Address of second menu.
	move.l	(a0),a0			;Address of third menu.
	move.l	FirstItem(a0),a0	;Address of Bold item.
	move.l	(a0),a1			;Address of Italic item.
	move.l	(a1),a2			;Address of Underline item.
	move.l	ItemFill(a0),a0		;Address of text.
	move.l	ItemFill(a1),a1		;Address of text.
	move.l	ItemFill(a2),a2		;Address of text.
	move.l	#BoldFont,ITextFont(a0)
	move.l	#ItalicFont,ITextFont(a1)
	move.l	#UnderlineFont,ITextFont(a2)

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	MainEditWindowMenus,a1
	jsr	SetMenuStrip(a6)	;Display new menus.
	rts

*****************************************************************************
* Place cursor at mouse position.                                           *
*****************************************************************************
MousePositionCursor:
	cmp.w	#SELECTDOWN,imsgCode
	bne	ProcessMainWindowEvent	;Check for LMB down.

	cmp.w	#1,TextBlockMarked
	bne	PositionCursorNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

PositionCursorNoCurrentBlock:
	jsr	PositionTheCursor
	tst.l	d0
	beq	ProcessMainWindowEvent	;Mouse outside text area.

MousePositionCursorEventLoop:
	move.l	MainEditWindowWnd,a0
	move.l	UserPort(a0),a0
	jsr	WaitForPort		;Wait for a message.

	move.l	MainEditWindowWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	MousePositionCursorEventLoop	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage	;Reply to message.

	move.l	imsgClass,d0
	cmp.l	#IDCMP_MOUSEBUTTONS,d0
	beq	ProcessMainWindowEvent	;Mouse button pressed.
	cmp.l	#IDCMP_MOUSEMOVE,d0
	beq	MarkTextBlock

	jmp	MousePositionCursorEventLoop

MarkTextBlock:
	move.w	#0,MouseXCoord		;Reset cursor to left of page.

	move.l	a5,CurrentLinePtr
	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	MarkTextBlockCont

	move.l	d6,CurrentLineOffset
MarkTextBlockCont:
	cmp.w	#1,TextBlockMarked
	beq	MarkTextBlockCont2	;Don't highlight current line.

	move.l	CurrentLinePtr,TextBlockTopPtr
	move.l	#0,TextBlockLength

	move.w	#1,TextBlockMarked
	jsr	HighlightCurrentLine

MarkTextBlockCont2:
	clr.l	d0
	move.l	MainEditWindowWnd,a0	;Get mouse position
	move.w	MouseY(a0),d0
	sub.w	OffY,d0

	bmi	MarkTextMoveUp

	divu	CursorHeight,d0		;Convert from pixels to chars.

	cmp.w	MouseYCoord,d0
	beq	MousePositionCursorEventLoop

	cmp.w	MouseYCoord,d0
	bhi	MarkTextMoveDown

	cmp.w	MouseYCoord,d0
	blo	MarkTextMoveUp

	jmp	MousePositionCursorEventLoop

MarkTextMoveUp:
	clr.l	d7
	move.w	MouseYCoord,d7
	sub.w	d0,d7

	sub.l	#1,d7
MarkTextMoveUpLoop:
	cmp.l	#0,TextBlockLength
	beq	MousePositionCursorEventLoop	;Don't go higher than
	sub.l	#1,TextBlockLength		; top of block.
	jsr	ClearCurrentLine
	jsr	MoveCursorUp
	jsr	HighlightCurrentLine
	dbra	d7,MarkTextMoveUpLoop

	jmp	MousePositionCursorEventLoop

MarkTextMoveDown:
	clr.l	d7
	move.w	d0,d7
	sub.w	MouseYCoord,d7

	sub.l	#1,d7
MarkTextMoveDownLoop:
	move.l	CurrentLinePtr,a0
	cmp.l	#0,tb_Next(a0)
	beq	MousePositionCursorEventLoop	;End of document reached.

	add.l	#1,TextBlockLength
	jsr	MoveCursorDown
	jsr	HighlightCurrentLine
	dbra	d7,MarkTextMoveDownLoop

	jmp	MousePositionCursorEventLoop

HighlightCurrentLine:
	jsr	HideCursor

	move.l	#WriteIOReq,a1			;Invert the text.
	move.l	#InverseText,io_Data(a1)
	move.l	#3,io_Length(a1)
	jsr	SendChars

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	move.l	CurrentLinePtr,a5
	move.l	CurrentLinePtr,a4
	jsr	DisplayVisibleLine
	jsr	ClearLine

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	jsr	DrawPrinterBorders
	jsr	ShowCursor
	rts

ClearCurrentLine:
	jsr	HideCursor

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	move.w	#0,TextBlockMarked

	move.l	CurrentLinePtr,a5
	move.l	CurrentLinePtr,a4
	jsr	DisplayVisibleLine
	jsr	ClearLine

	move.w	#1,TextBlockMarked

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	jsr	DrawPrinterBorders
	jsr	ShowCursor
	rts

PositionTheCursor:
	move.w	MouseXCoord,OldMouseXCoord
	move.w	MouseYCoord,OldMouseYCoord

	move.l	MainEditWindowWnd,a0	;Get mouse position
	move.w	MouseY(a0),d0
	move.w	MouseX(a0),d1
	sub.w	OffY,d0
	sub.w	OffX,d1
	divu	CursorHeight,d0		;Convert from pixels
	divu	CursorWidth,d1		; to chars.

	move.w	d0,MouseYCoord
	move.w	d1,MouseXCoord

	move.l	FirstLinePtr,a5		;Get address of top of visible text.
	move.l	CurrentVertTop,d5
	cmp.l	#0,d5
	beq	MousePositionCursorLoopDone

	sub.l	#1,d5
MousePositionCursorLoop:
	move.l	tb_Next(a5),a5		;Go to next line.
	dbra	d5,MousePositionCursorLoop

MousePositionCursorLoopDone:
	clr.l	d5

	move.w	MouseXCoord,d5
	move.w	MainWindowWidthChars,d6
	add.w	#1,d6
	cmp.w	d6,d5
	bge	MousePositionCursorFail

	move.w	MouseYCoord,d5
	cmp.w	MainWindowHeightChars,d5
	bge	MousePositionCursorFail

	jsr	HideCursor
	move.l	#WriteIOReq,a1		;Place cursor at top left.
	move.l	#ResetCur,io_Data(a1)
	move.l	#5,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,d5
	beq	PositionedCursorY

	sub.l	#1,d5

	move.w	#0,MouseYCoord
MousePositionCursorYLoop:
	cmp.l	#0,tb_Next(a5)
	beq	PositionedCursorY
	move.l	tb_Next(a5),a5
	
	move.l	#WriteIOReq,a1			;Move down a line.
	move.l	#CarriageReturnText,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	add.w	#1,MouseYCoord
	dbra	d5,MousePositionCursorYLoop

PositionedCursorY
	move.l	a5,CurrentLinePtr

	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	PositionedCursorYGotOffset

	move.l	d6,CurrentLineOffset

PositionedCursorYGotOffset:
	clr.l	d5
	move.w	MouseXCoord,d5

	move.w	#0,MouseXCoord

	move.l	tb_LineLength(a5),d6
	sub.l	CurrentHorizTop,d6
	cmp.l	#0,d6
	ble	PositionedCursorX

	cmp.w	d5,d6
	bge	LineIsLongEnough

	move.l	d6,d5

LineIsLongEnough:
	cmp.l	#0,d5
	beq	PositionedCursorX

	sub.l	#1,d5

MousePositionCursorXLoop:
	move.l	#WriteIOReq,a1
	move.l	#RightCur,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars

	add.w	#1,MouseXCoord

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d6

	cmp.l	CurrentLineOffset,d6
	beq	PositionedCursorX

	add.l	#1,CurrentLineOffset

	dbra	d5,MousePositionCursorXLoop

PositionedCursorX:
	move.w	MouseXCoord,d5

	cmp.w	MainWindowWidthChars,d5
	bne	MousePositionCursorCont

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	cmp.l	CurrentLineOffset,d5
	beq	MousePositionCursorCont

	sub.w	#1,MouseXCoord
	sub.l	#1,CurrentLineOffset

	move.l	#WriteIOReq,a1			;Move left 1 char.
	move.l	#LeftCur,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars

MousePositionCursorCont:
	jsr	ShowCursor

MousePositionCursorOut:
	move.l	#-1,d0
	rts

MousePositionCursorFail:
	move.w	OldMouseXCoord,MouseXCoord
	move.w	OldMouseYCoord,MouseYCoord

	move.l	#0,d0
	rts

*****************************************************************************
* Subroutine to process menu selections.                                    *
*****************************************************************************
ProcessMenuSelection:
	move.l	_IntuitionBase,a6
	move.l	MainEditWindowMenus,a0
	move.w	imsgCode,d0
	jsr	ItemAddress(a6)
	move.l	d0,item
	beq	ProcessMenuToggles	;No more menu items.

	move.w	imsgCode,d0

	cmp.w	#$f800,d0
	beq	NewDocument
	cmp.w	#$f840,d0
	beq	OpenTextFile
	cmp.w	#$f860,d0
	beq	InsertTextFile
	cmp.w	#$f8a0,d0
	beq	SaveDocument
	cmp.w	#$f8c0,d0
	beq	SaveDocumentAs

	cmp.w	#$f900,d0
	beq	SaveDocumentASCII
	cmp.w	#$f920,d0
	beq	SaveDocumentASCIIAs

	cmp.w	#$0160,d0
	beq	PrintPreview
	cmp.w	#$0960,d0
	beq	PrintDocument

	cmp.w	#$f9a0,d0
	beq	AboutTextEngine

	cmp.w	#$f9e0,d0
	beq	QuitTextEngine

	cmp.w	#$f801,d0
	beq	FindText
	cmp.w	#$f821,d0
	beq	FindAgain
	cmp.w	#$f841,d0
	beq	ReplaceText

	cmp.w	#$f881,d0
	beq	CutTextBlock
	cmp.w	#$f8a1,d0
	beq	CopyTextBlock
	cmp.w	#$f8c1,d0
	beq	PasteTextBlock
	cmp.w	#$f8e1,d0
	beq	MenuDeleteTextBlock

	cmp.w	#$f921,d0
	beq	SelectAllText

	cmp.w	#$f802,d0
	beq	InsertBoldCharacter
	cmp.w	#$f822,d0
	beq	InsertItalicCharacter
	cmp.w	#$f842,d0
	beq	InsertUnderlineCharacter
	cmp.w	#$f882,d0
	beq	InsertCondensedCharacter
	cmp.w	#$f8a2,d0
	beq	InsertDStrikeCharacter
	cmp.w	#$f8c2,d0
	beq	InsertEliteCharacter
	cmp.w	#$f8e2,d0
	beq	InsertEnlargedCharacter
	cmp.w	#$f902,d0
	beq	InsertPicaCharacter
	cmp.w	#$f922,d0
	beq	InsertSubSCharacter
	cmp.w	#$f942,d0
	beq	InsertSuperSCharacter
	cmp.w	#$f982,d0
	beq	InsertPlainCharacter

	cmp.w	#$f803,d0
	beq	LeftJustifyLine
	cmp.w	#$f823,d0
	beq	RightJustifyLine
	cmp.w	#$f843,d0
	beq	CentreLine
	cmp.w	#$f883,d0
	beq	FlushJustifyLine

	cmp.w	#$f804,d0
	beq	WordCount

	cmp.w	#$f844,d0
	beq	TopOfFile
	cmp.w	#$f864,d0
	beq	EndOfFile

	cmp.w	#$f8a4,d0
	beq	InsertBookmark
	cmp.w	#$f8c4,d0
	beq	GotoNextBookmark

	cmp.w	#$f805,d0
	beq	OpenDictionary
	cmp.w	#$f825,d0
	beq	CloseDictionary
	cmp.w	#$f845,d0
	beq	UpdateDictionary
	cmp.w	#$f885,d0
	beq	CheckSpelling

	cmp.w	#$f866,d0
	beq	PrinterPrefs
	cmp.w	#$f886,d0
	beq	FunctionKeysPrefs
	cmp.w	#$f8a6,d0
	beq	ColourPrefs

	cmp.w	#$f8e6,d0
	beq	SavePreferences

	cmp.w	#$f807,d0
	beq	LaunchNewShell
	cmp.w	#$f827,d0
	beq	LaunchCalculator
	cmp.w	#$f847,d0
	beq	LaunchMultiview
	cmp.w	#$f867,d0
	beq	LaunchPrinterPrefs
	cmp.w	#$f8a7,d0
	beq	LaunchTextEngine

ProcessMenuSelectionReturn:
	move.l	item,a0
	move.w	NextSelect(a0),imsgCode	;Get next menu item.
	jmp	ProcessMenuSelection

*****************************************************************************
* Determine status of toggle menu items.                                    *
*****************************************************************************
ProcessMenuToggles:
	move.l	MainEditWindowMenus,a0	;Address of first menu.
	move.l	(a0),a0			;Address of second menu.
	move.l	(a0),a0			;Address of third menu.
	move.l	(a0),a0			;Address of fourth menu.
	move.l	(a0),a0			;Address of fifth menu.
	move.l	(a0),a0			;Address of sixth menu.
	move.l	(a0),a0			;Address of seventh menu.

	move.l	FirstItem(a0),a0	;Address of Word Wrap item.
	move.w	Flags(a0),d0		;Get item flags
	and.w	#CHECKED,d0		;Isolate checked flag.
	move.w	d0,WordWrapMode

	move.l	(a0),a0			;Get second menu item.
	move.w	Flags(a0),d0		;Get item flags
	and.w	#CHECKED,d0		;Isolate checked flag.

	cmp.w	ShowBordersMode,d0
	beq	ProcessMainWindowEvent	;Status hasn't changed.

	move.w	d0,ShowBordersMode
	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

	jmp	ProcessMainWindowEvent

*****************************************************************************
* Routines to launch various CLI tools.                                     *
*****************************************************************************
LaunchNewShell:
	jsr	BlockInput
	move.l	#NewShellCommand,d1
	jsr	LaunchProgram
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

LaunchCalculator:
	jsr	BlockInput
	move.l	#CalculatorCommand,d1
	jsr	LaunchProgram
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

LaunchMultiview:
	jsr	BlockInput
	move.l	#MultiviewCommand,d1
	jsr	LaunchProgram
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

LaunchPrinterPrefs:
	jsr	BlockInput
	move.l	#PrinterPrefsCommand,d1
	jsr	LaunchProgram
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

LaunchTextEngine:
	jsr	BlockInput
	move.l	#TextEngineCommand,d1
	jsr	LaunchProgram
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

LaunchProgram:
	move.l	_DOSBase,a6
	clr.l	d2
	jsr	SystemTagList(a6)
	rts

*****************************************************************************
* Check the spelling of the document.                                       *
*****************************************************************************
CheckSpelling:
	jsr	BlockInput
	move.l	#0,SpellCheckerQuitFlag

	move.l	#SpellUnknownString,a5
	move.l	#SpellReplaceString,a6
	move.l	#256,d5
InitialClearUnknownString:
	move.b	#0,(a5)+
	move.b	#0,(a6)+
	dbra	d5,InitialClearUnknownString

	jsr	OpenSpellCheckerWindow
	bne	CheckSpellingFail		;Not enough memory.
	jsr	SpellCheckerRender

	move.w	#0,TextBlockMarked

	move.l	CurrentHorizTop,d0
	add.w	d0,MouseXCoord

	move.l	CurrentLinePtr,a5
	add.l	CurrentLineOffset,a5
	add.l	#tb_Text,a5
SpellGetFirstWord:
	cmp.b	#" ",(a5)
	beq	SpellNextWord
	cmp.l	#0,CurrentLineOffset
	beq	SpellNextWord

	sub.l	#1,a5
	sub.l	#1,CurrentLineOffset

	sub.w	#1,MouseXCoord
	jmp	SpellGetFirstWord

SpellNextWord:
	jsr	BlockSpellInput

	move.l	#SpellUnknownString,a5
	move.l	#SpellReplaceString,a6
	move.l	#256,d5
ClearUnknownString:
	move.b	#0,(a5)+
	move.b	#0,(a6)+
	dbra	d5,ClearUnknownString

	move.l	SpellCheckerGadgets+8,a0
	move.l	SpellCheckerWnd,a1
	move.l	#0,a2
	move.l	#SpellCheckerGTags+48,a3
	move.l	_GadToolsBase,a6
	jsr	GT_SetGadgetAttrsA(a6)

	move.l	SpellCheckerGadgets+4,a0
	move.l	SpellCheckerWnd,a1
	move.l	#0,a2
	move.l	#SpellCheckerGTags+20,a3
	move.l	_GadToolsBase,a6
	jsr	GT_SetGadgetAttrsA(a6)

	move.l	BOOPSIVertPropVal,d6
	add.w	MouseYCoord,d6

SpellGetWord:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d0
	cmp.l	CurrentLineOffset,d0
	beq	SpellNewLine

	add.l	#tb_Text,a5
	add.l	CurrentLineOffset,a5

	cmp.b	#$41,(a5)
	blo	SpellGetWordCont
	cmp.b	#$5b,(a5)
	blo	SpellGotWord

	cmp.b	#$61,(a5)
	blo	SpellGetWordCont
	cmp.b	#$7b,(a5)
	blo	SpellGotWord

SpellGetWordCont:
	add.w	#1,MouseXCoord
	add.l	#1,CurrentLineOffset
	jmp	SpellGetWord

SpellNewLine:
	move.l	#-1,SpellCheckerQuitFlag
	move.l	CurrentLinePtr,a5
	cmp.l	#0,tb_Next(a5)
	beq	UnknownWord

	move.l	#0,SpellCheckerQuitFlag

	move.l	tb_Next(a5),CurrentLinePtr
	move.l	#0,CurrentLineOffset
	move.w	#0,MouseXCoord
	add.l	#1,d6
	jmp	SpellGetWord

SpellGotWord:
	move.l	#0,SpellLength

	move.l	#SpellUnknownString,a6
SpellGotWordLoop:
	move.l	CurrentLinePtr,a5
	add.l	#tb_Text,a5
	add.l	CurrentLineOffset,a5

	cmp.b	#$41,(a5)
	blo	SpellGotWordOut
	cmp.b	#$5b,(a5)
	blo	SpellGotWordCont

	cmp.b	#$61,(a5)
	blo	SpellGotWordOut
	cmp.b	#$7b,(a5)
	blo	SpellGotWordCont

	jmp	SpellGotWordOut

SpellGotWordCont:
	move.b	(a5),(a6)
	add.w	#1,MouseXCoord
	add.l	#1,CurrentLineOffset
	add.l	#1,a6
	add.l	#1,SpellLength

	cmp.l	#256,SpellLength
	beq	SpellGotWordOut

	jmp	SpellGotWordLoop

SpellGotWordOut:
	move.b	#0,(a6)
	move.l	#SpellUnknownString,a5
	move.b	(a5),d3

 	cmp.b	#$5b,d3
	blo	SpellGotWordMakeCaps
	sub.b	#$20,d3

SpellGotWordMakeCaps:
	clr.l	d4
	move.b	d3,d4
	sub.l	#$41,d4
	mulu	#4,d4
	add.l	#SpellPointers,d4
	move.l	d4,a4
	move.l	(a4),a4

	move.l	a4,SpellDictionaryPtr
	move.l	SpellLength,d5
	sub.l	#1,d5
CompWordLoop:
	move.b	(a4),d4
	move.b	(a5),d3

	cmp.b	#$5b,d3
	blo	CompWordMakeCaps
	sub.b	#$20,d3

CompWordMakeCaps:
	cmp.b	d3,d4
	bhi	UnknownWord
	cmp.b	d3,d4
	bne	NextDictWord
	add.l	#1,a5
	add.l	#1,a4
	add.l	#1,SpellDictionaryPtr
	dbra	d5,CompWordLoop

	cmp.b	#$0a,(a4)
	bne	UnknownWord

	jmp	SpellGetWord

NextDictWord:
	cmp.b	#0,(a4)
	beq	UnknownWord
	cmp.b	#$0a,(a4)
	beq	FoundNextDictWord
	add.l	#1,a4
	add.l	#1,SpellDictionaryPtr
	jmp	NextDictWord

FoundNextDictWord:
	add.l	#1,a4
	add.l	#1,SpellDictionaryPtr
	move.l	SpellLength,d5
	sub.l	#1,d5

	move.l	#SpellUnknownString,a5
	jmp	CompWordLoop

UnknownWord:
	move.l	BOOPSIVertView,d0

	cmp.l	BOOPSIMaxHeight,d0
	blo	UnknownWordCont

	move.w	d6,MouseYCoord
	jmp	UnknownWordCont2

UnknownWordCont:
	move.l	d6,BOOPSIVertPropVal
	move.w	#0,MouseYCoord

	move.l	BOOPSIMaxHeight,d5
	sub.l	BOOPSIVertView,d5
	cmp.l	d6,d5
	bge	UnknownWordCont2

	sub.l	d5,d6
	move.w	d6,MouseYCoord

	move.l	BOOPSIMaxHeight,BOOPSIVertPropVal
	move.l	BOOPSIVertView,d5
	sub.l	d5,BOOPSIVertPropVal

UnknownWordCont2:
	jsr	UpdateBOOPSIVertProp	;Update vert prop position.
	jsr	GetBOOPSIVertSliderPosition

	move.l	#0,BOOPSIHorizPropVal
	jsr	UpdateBOOPSIHorizProp	;Update vert prop position.
	jsr	GetBOOPSIHorizSliderPosition

	clr.l	d0
	move.w	MouseXCoord,d0
	cmp.l	BOOPSIHorizView,d0
	blo	UnknownWordXCoordOK

	move.l	CurrentLineOffset,d5
	add.l	#1,d5
	sub.l	BOOPSIHorizView,d5
	move.l	d5,BOOPSIHorizPropVal

	move.l	BOOPSIHorizView,d0
	sub.l	#1,d0
	move.w	d0,MouseXCoord

	jsr	UpdateBOOPSIHorizProp	;Update vert prop position.
	jsr	GetBOOPSIHorizSliderPosition

UnknownWordXCoordOK:
	jsr	RefreshVisibleText

	move.l	SpellCheckerGadgets+8,a0
	move.l	SpellCheckerWnd,a1
	move.l	#0,a2
	move.l	#SpellCheckerGTags+48,a3
	move.l	_GadToolsBase,a6
	jsr	GT_SetGadgetAttrsA(a6)

	jsr	UnBlockSpellInput

	cmp.l	#0,SpellCheckerQuitFlag
	bne	SpellCheckerEndOfFile

	jsr	BlockSpellInput
	jsr	SpellSuggestions	;Determine suggestions.
	jsr	UnBlockSpellInput

	move.l	#SpellCheckerGadgets,a0
	move.l	4(a0),a0
	move.l	SpellCheckerWnd,a1
	move.l	#0,a2
	move.l	_IntuitionBase,a6
	jsr	ActivateGadget(a6)		;Activate replace gadget.

SpellCheckerEventLoop:
	move.l	SpellCheckerWnd,a0
	move.l	UserPort(a0),a0
	jsr	WaitForPort		;Wait for a message.

	move.l	SpellCheckerWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	SpellCheckerEventLoop	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage	;Reply to message.

	move.l	imsgClass,d0
	cmp.l	#IDCMP_GADGETUP,d0
	beq	ProcessSpellCheckerGadgets	;Gadget clicked on.
	cmp.l	#IDCMP_CLOSEWINDOW,d0
	beq	SpellCheckerCancel		;Window closed.

	jmp	SpellCheckerEventLoop

ProcessSpellCheckerGadgets:
	move.l	imsg,a0
	move.l	IAddress(a0),a0
	move.w	GadgetID(a0),d0

	cmp.b	#GD_SpellSuggestionsGad,d0
	beq	CopySpellSuggestion
	cmp.b	#GD_SpellCheckReplaceGad,d0
	beq	SpellReplaceWord
	cmp.b	#GD_SpellCheckIgnoreGad,d0
	beq	SpellNext
	cmp.b	#GD_SpellCheckCancelGad,d0
	beq	SpellCheckerCancel
	cmp.b	#GD_SpellCheckLearnGad,d0
	beq	SpellLearnWord

	jmp	SpellCheckerEventLoop

SpellCheckerEndOfFile:
	jsr	BlockSpellInput
	move.l	#SpellingEndRequester,a1
	jsr	DisplayEasyRequester
	jsr	UnBlockSpellInput
	jsr	CloseSpellCheckerWindow
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

SpellCheckerCancel:
	jsr	FreeSpellList
	jsr	CloseSpellCheckerWindow
CheckSpellingFail:
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

SpellLearnWord:
	move.l	DictionaryLength,d5
	add.l	SpellLength,d5
	add.l	#1,d5
	move.l	MaxDictionaryLength,d6
	cmp.l	d6,d5
	bhi	SpellNext

	jsr	BlockSpellInput

	move.l	SpellLearnPtr,a5
	cmp.b	#0,(a5)
	beq	SpellLearnLastWord
SpellLearnWordLoop:
	cmp.b	#$0a,(a5)
	beq	SpellLearnWordLoopCont
	cmp.l	DictionaryPtr,a5
	beq	SpellLearnWordLoopCont2
	sub.l	#1,a5
	jmp	SpellLearnWordLoop

SpellLearnWordLoopCont:
	add.l	#1,a5
SpellLearnWordLoopCont2:
	move.l	a5,a4
	move.l	DictionaryPtr,a6
	move.l	DictionaryLength,d5
	add.l	d5,a6
	move.l	a6,a5
	move.l	SpellLength,d5
	add.l	d5,a6
	add.l	#1,a6	

SpellLearnWordLoop2:
	move.b	(a5),(a6)
	cmp.l	a4,a5
	beq	SpellLearnWordLoop2Out
	sub.l	#1,a5
	sub.l	#1,a6
	jmp	SpellLearnWordLoop2

SpellLearnWordLoop2Out:
	move.l	SpellLength,d5
	sub.l	#1,d5
	move.l	#SpellUnknownString,a5
SpellLearnWordLoop3:
	move.b	(a5),(a4)

	cmp.b	#$61,(a4)
	blo	SpellLearnWordLoop3Cont
	sub.b	#$20,(a4)

SpellLearnWordLoop3Cont:
	add.l	#1,a5
	add.l	#1,a4
	dbra	d5,SpellLearnWordLoop3

	move.b	#$0a,(a4)
	move.l	DictionaryLength,d5
	add.l	SpellLength,d5
	add.l	#1,d5
	move.l	d5,DictionaryLength
	bsr	SortOutSpellPointers

	jsr	UnBlockSpellInput
	jmp	SpellNext

SpellLearnLastWord:
	move.l	a5,a4
	move.l	SpellLength,d5
	sub.l	#1,d5
	move.l	#SpellUnknownString,a5
SpellLearnLastWordLoop:
	move.b	(a5),(a4)

	cmp.b	#$61,(a4)
	blo	SpellLearnLastWordLoopCont
	sub.b	#$20,(a4)

SpellLearnLastWordLoopCont:
	add.l	#1,a5
	add.l	#1,a4
	dbra	d5,SpellLearnLastWordLoop

	move.b	#$0a,(a4)
	move.l	DictionaryLength,d5
	add.l	SpellLength,d5
	add.l	#1,d5
	move.l	d5,DictionaryLength
	bsr	SortOutSpellPointers

	jsr	UnBlockSpellInput
	jmp	SpellNext

SpellReplaceWord:
	move.l	#SpellCheckerGadgets,a5
	move.l	4(a5),a5
	move.l	SpecialInfo(a5),a5
	move.l	(a5),a5

	cmp.b	#0,(a5)
	beq	SpellNext

	jsr	BlockSpellInput
	move.l	#SpellUnknownString,ReplaceTextPtr
SpellReplaceTextLoop:
	move.l	ReplaceTextPtr,a5
	cmp.b	#0,(a5)
	beq	SpellReplaceTextLoopCont

	jsr	MoveCursorLeft
	jsr	DeleteCurrentCharacter

	add.l	#1,ReplaceTextPtr
	jmp	SpellReplaceTextLoop

SpellReplaceTextLoopCont:
	move.l	#SpellCheckerGadgets,a5
	move.l	4(a5),a5
	move.l	SpecialInfo(a5),a5
	move.l	(a5),a5

	move.l	a5,ReplaceTextPtr

SpellReplaceTextLoop2:
	move.l	ReplaceTextPtr,a5
	cmp.b	#0,(a5)
	beq	SpellReplaceTextLoop2Cont

	move.b	(a5),Buffer
	jsr	InsertKeyboardText

	add.l	#1,ReplaceTextPtr
	jmp	SpellReplaceTextLoop2

SpellReplaceTextLoop2Cont:
	jsr	UnBlockSpellInput
	jmp	SpellNext

CopySpellSuggestion:
	clr.l	d0
	move.w	imsgCode,d0
	mulu	#256,d0
	add.l	#SpellSuggestionBuffer,d0
	move.l	d0,a6

	move.l	#SpellReplaceString,a5
	move.l	#255,d5
CopySpellSuggestionLoop:
	move.b	(a6)+,(a5)+
	dbra	d5,CopySpellSuggestionLoop

	move.l	SpellCheckerGadgets+4,a0
	move.l	SpellCheckerWnd,a1
	move.l	#0,a2
	move.l	#SpellCheckerGTags+20,a3
	move.l	_GadToolsBase,a6
	jsr	GT_SetGadgetAttrsA(a6)

	move.l	#SpellCheckerGadgets,a0
	move.l	4(a0),a0
	move.l	SpellCheckerWnd,a1
	move.l	#0,a2
	move.l	_IntuitionBase,a6
	jsr	ActivateGadget(a6)		;Activate replace gadget.

	jmp	SpellCheckerEventLoop

SpellNext:
	jsr	FreeSpellList
	jmp	SpellNextWord

FreeSpellList:
	move.l	#0,SpellCheckerGTags+4	;Remove list from list view.
	move.l	SpellCheckerGadgets,a0
	move.l	SpellCheckerWnd,a1
	move.l	#0,a2
	move.l	#SpellCheckerGTags,a3
	move.l	_GadToolsBase,a6
	jsr	GT_SetGadgetAttrsA(a6)

	cmp.l	#SpellSuggestionBuffer,SpellSuggestionBufferPtr
	beq	FreeSpellListOut

	move.l	SpellSuggestionBufferPtr,a5
FreeSpellListLoop:
	sub.l	#256,a5

	move.l	#SpellSuggestionsList,a0
	move.l	_SysBase,a6
	jsr	RemTail(a6)

	cmp.l	#SpellSuggestionBuffer,a5
	bne	FreeSpellListLoop

FreeSpellListOut:
	rts

SpellSuggestions:
	move.l	SpellDictionaryPtr,SpellLearnPtr

	move.l	#SpellSuggestionBuffer,SpellSuggestionBufferPtr
	move.l	#SpellSuggestionsListNodes,SpellSuggestionsListNodesPtr

	move.l	#SpellSuggestionsList,a0	;Initialise the list.
	move.l	a0,(a0)
	addq.l	#4,(a0)
	clr.l	4(a0)
	move.l	a0,8(a0)
	move.b	#0,12(a0)

	jsr	MakeSuggestions			;Fill list with suggestions.

	cmp.l	#SpellSuggestionBuffer,SpellSuggestionBufferPtr
	beq	SpellSuggestionsOut

	move.l	#SpellSuggestionsList,SpellCheckerGTags+4
	move.l	SpellCheckerGadgets,a0
	move.l	SpellCheckerWnd,a1
	move.l	#0,a2
	move.l	#SpellCheckerGTags,a3
	move.l	_GadToolsBase,a6
	jsr	GT_SetGadgetAttrsA(a6)		;Display the list.

SpellSuggestionsOut:
	rts

MakeSuggestions:
	move.l	#SpellUnknownString,a4
	clr.l	d4
	move.b	(a4),d4

	cmp.l	#$61,d4
	blo	MakeSuggestionsCont
	sub.l	#$20,d4

MakeSuggestionsCont:
	move.b	d4,SpellSuggestionBarrier

	sub.l	#$41,d4
	mulu	#4,d4
	add.l	#SpellPointers,d4
	move.l	d4,a4
	move.l	(a4),SpellDictionaryPtr

MakeSuggestionsMainLoop:
	move.l	SpellDictionaryPtr,a5
	move.l	SpellSuggestionBufferPtr,a6
	move.l	#254,d5
SpellSuggestionLoop2:
	cmp.b	#$0a,(a5)
	beq	SpellSuggestionLoop2Cont
	cmp.b	#$0,(a5)
	beq	SpellSuggestionLoop2Cont
	move.b	(a5)+,(a6)+
	dbra	d5,SpellSuggestionLoop2

SpellSuggestionLoop2Cont:
	move.b	#0,(a6)

	move.l	#SpellUnknownString,a6
	move.l	#0,d5

SpellSuggestionLoop3:
	move.l	SpellDictionaryPtr,a5

	sub.l	#1,a5
SpellSuggestionLoop4:
	add.l	#1,a5

	cmp.b	#$0a,(a5)
	beq	SpellSuggestionLoop4Out
	cmp.b	#$0,(a5)
	beq	SpellSuggestionLoop4Out

	move.b	(a6),d0
	cmp.b	#$5b,d0
	blo	SpellSuggestionLoop4MakeCaps
	sub.b	#$20,d0

SpellSuggestionLoop4MakeCaps:
	cmp.b	(a5),d0
	bne	SpellSuggestionLoop4

	add.l	#1,d5
	add.b	#$40,(a5)

SpellSuggestionLoop4Out:
	add.l	#1,a6
	cmp.b	#0,(a6)
	bne	SpellSuggestionLoop3

	move.l	SpellDictionaryPtr,a5
	sub.l	#1,a5
	sub.l	#1,SpellDictionaryPtr
	move.l	#-1,d6
SpellSuggestionLoop5:
	add.l	#1,SpellDictionaryPtr
	add.l	#1,a5
	add.l	#1,d6

	cmp.b	#$0,(a5)
	beq	SpellSuggestionLoop5Out
	cmp.b	#$0a,(a5)
	beq	SpellSuggestionLoop5Out

	cmp.b	#$7b,(a5)
	blo	SpellSuggestionLoop5

	sub.b	#$40,(a5)
	jmp	SpellSuggestionLoop5

SpellSuggestionLoop5Out:
	move.l	SpellLength,d0
	sub.l	d6,d0
	bpl	MaybeASuggestion

	move.l	d6,d0
	sub.l	SpellLength,d0

MaybeASuggestion:
	move.l	SpellLength,d1
	divu	#3,d1

	cmp.w	d1,d0
	bhi	AddSpellSuggestionBack

	move.l	SpellLength,d4
	sub.l	d5,d4

	cmp.l	#1,d4
	ble	AddSpellSuggestion
	
AddSpellSuggestionBack:
	move.l	SpellDictionaryPtr,a5
	cmp.b	#$0,(a5)
	beq	MakeSuggestionsOut

	add.l	#1,a5
	add.l	#1,SpellDictionaryPtr
	move.b	SpellSuggestionBarrier,d0
	cmp.b	(a5),d0
	bne	MakeSuggestionsOut

	jmp	MakeSuggestionsMainLoop

AddSpellSuggestion:
	jsr	AdjustSpellSuggestionCase

	move.l	#SpellSuggestionsList,a0
	move.l	SpellSuggestionsListNodesPtr,a1
	move.l	SpellSuggestionBufferPtr,ln_Name(a1)
	move.l	_SysBase,a6
	jsr	AddTail(a6)

	add.l	#256,SpellSuggestionBufferPtr	;Advance 1 word.
	add.l	#14,SpellSuggestionsListNodesPtr

	cmp.l	#SpellSuggestionBuffer+(256*50),SpellSuggestionBufferPtr
	bne	AddSpellSuggestionBack

MakeSuggestionsOut:
	rts

AdjustSpellSuggestionCase:
	move.l	#SpellUnknownString,a5
	cmp.b	#$61,1(a5)
	blo	AdjustSpellCaseOut	;Word is all capitals.

	move.l	SpellSuggestionBufferPtr,a6
AdjustSpellSuggestionCaseLoop:
	cmp.b	#0,(a6)
	beq	AdjustSpellSuggestionCaseLoopOut

	cmp.b	#$5a,(a6)
	bhi	AdjustSpellSuggestionCaseCont
	add.b	#$20,(a6)

AdjustSpellSuggestionCaseCont:
	add.l	#1,a6
	jmp	AdjustSpellSuggestionCaseLoop

AdjustSpellSuggestionCaseLoopOut:
	cmp.b	#$61,(a5)
	bge	AdjustSpellCaseOut	;Word is lower case.

	move.l	SpellSuggestionBufferPtr,a6
	sub.b	#$20,(a6)		;Capitalise the suggestion.

AdjustSpellCaseOut:
	rts

*****************************************************************************
* Open the spell checker dictionary.                                        *
*****************************************************************************
OpenDictionary:
	cmp.l	#0,DictionaryPtr
	bne	ProcessMenuSelectionReturn	;Dictionary already open.

	jsr	BlockInput

	move.l	_DOSBase,a6
	move.l	#DictionaryFileName,d1
	move.l	#-2,d2
	jsr	Lock(a6)
	tst.l	d0
	beq	OpenDictionaryError
	move.l	d0,DictionaryLock

	move.l	_DOSBase,a6
	move.l	DictionaryLock,d1
	move.l	#DictionaryInfo,d2
	jsr	Examine(a6)

	move.l	DictionaryLock,d1
	move.l	_DOSBase,a6
	jsr	UnLock(a6)

	move.l	#DictionaryInfo,a5
	move.l	fib_Size(a5),DictionaryLength

	move.l	DictionaryLength,MaxDictionaryLength
	add.l	#5000,MaxDictionaryLength

	move.l	_SysBase,a6
	move.l	MaxDictionaryLength,d0
	move.l	#MEMF_CLEAR,d1
	jsr	AllocMem(a6)
	move.l	d0,DictionaryPtr
	beq	OpenDictionaryError

	move.l	#MODE_OLDFILE,d2
	move.l	_DOSBase,a6
	move.l	#DictionaryFileName,d1
	jsr	Open(a6)
	move.l	d0,TextFileHd

	move.l	DictionaryPtr,d2
	move.l	_DOSBase,a6
	move.l	TextFileHd,d1
	move.l	DictionaryLength,d3
	jsr	Read(a6)

	move.l	_DOSBase,a6
	move.l	TextFileHd,d1
	jsr	Close(a6)

	jsr	SortOutSpellPointers

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	jsr	ClearMenuStrip(a6)	;Clear menus.

	move.l	MainEditWindowMenus,a0	;Address of first menu.
	move.l	(a0),a0			;Address of second menu.
	move.l	(a0),a0			;Address of third menu.
	move.l	(a0),a0			;Address of fourth menu.
	move.l	(a0),a0			;Address of fifth menu.
	move.l	(a0),a0			;Address of sixth menu.

	move.l	FirstItem(a0),a0	;Address of first item.
	move.l	(a0),a0			;Get second menu item.
	or.w	#$10,Flags(a0)		;Enable the item.
	move.l	(a0),a0			;Get third menu item.
	or.w	#$10,Flags(a0)		;Enable the item.
	move.l	(a0),a0
	move.l	(a0),a0			;Get fifth menu item.
	or.w	#$10,Flags(a0)		;Enable the item.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	MainEditWindowMenus,a1
	jsr	SetMenuStrip(a6)	;Display new menus.

	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

SortOutSpellPointers:
	move.l	#SpellPointers,a4
	move.l	DictionaryPtr,a5
	move.b	#"A",d4
	move.l	#25,d5
SetSpellPointersLoop:
	cmp.b	(a5),d4
	bne	FindNextSpellPointerWord
	move.l	a5,(a4)
	add.l	#4,a4
	add.l	#1,d4
	dbra	d5,SetSpellPointersLoop
	rts

FindNextSpellPointerWord:
	cmp.b	#$0a,(a5)
	bne	FindNextSpellPointerWordCont
	add.l	#1,a5
	jmp	SetSpellPointersLoop
FindNextSpellPointerWordCont:
	add.l	#1,a5
	jmp	FindNextSpellPointerWord

*****************************************************************************
* Close the dictionary.                                                     *
*****************************************************************************
FreeDictionary:
	cmp.l	#0,DictionaryPtr
	beq	FreeDictionaryOut	;Dictionay not open.

	move.l	MaxDictionaryLength,d0
	move.l	DictionaryPtr,a1
	move.l	_SysBase,a6
	jsr	FreeMem(a6)

FreeDictionaryOut:
	rts

CloseDictionary:
	jsr	BlockInput

	move.l	MaxDictionaryLength,d0
	move.l	DictionaryPtr,a1
	move.l	_SysBase,a6
	jsr	FreeMem(a6)

	move.l	#0,DictionaryPtr

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	jsr	ClearMenuStrip(a6)	;Clear menus.

	move.l	MainEditWindowMenus,a0	;Address of first menu.
	move.l	(a0),a0			;Address of second menu.
	move.l	(a0),a0			;Address of third menu.
	move.l	(a0),a0			;Address of fourth menu.
	move.l	(a0),a0			;Address of fifth menu.
	move.l	(a0),a0			;Address of sixth menu.

	move.l	FirstItem(a0),a0	;Address of first item.
	move.l	(a0),a0			;Get second menu item.
	and.w	#%1111111111101111,Flags(a0)	;Disable the item.
	move.l	(a0),a0			;Get third menu item.
	and.w	#%1111111111101111,Flags(a0)	;Disable the item.
	move.l	(a0),a0
	move.l	(a0),a0			;Get fifth menu item.
	and.w	#%1111111111101111,Flags(a0)	;Disable the item.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	MainEditWindowMenus,a1
	jsr	SetMenuStrip(a6)	;Display new menus.

	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

OpenDictionaryError:
	jsr	ErrorBeep

	move.l	#OpenDictionaryErrorRequester,a1
	jsr	DisplayEasyRequester

	jsr	UnBlockInput		;Restore input to main edit window.
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Save updated dictionary to disk.                                          *
*****************************************************************************
UpdateDictionary:
	jsr	BlockInput

	move.l	#MODE_NEWFILE,d2
	move.l	_DOSBase,a6
	move.l	#DictionaryFileName,d1
	jsr	Open(a6)
	move.l	d0,TextFileHd
	beq	OpenDictionaryError

	move.l	DictionaryPtr,d2
	move.l	DictionaryLength,d3
	move.l	_DOSBase,a6
	move.l	TextFileHd,d1
	jsr	Write(a6)

	move.l	_DOSBase,a6
	move.l	TextFileHd,d1
	jsr	Close(a6)

	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Cut a block of text.                                                      *
*****************************************************************************
CutTextBlock:
	cmp.w	#1,TextBlockMarked
	bne	ProcessMenuSelectionReturn

	jsr	BlockInput

	jsr	CopyToCutBuffer
	tst.l	d0
	bne	ProcessMenuSelectionReturn	;Clipboard error occured.

	jsr	DeleteTextBlock
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Copy a text block.                                                        *
*****************************************************************************
CopyTextBlock:
	cmp.w	#1,TextBlockMarked
	bne	ProcessMenuSelectionReturn
	jsr	BlockInput

	jsr	CopyToCutBuffer

CopyTextBlockFail:
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Paste a text block.                                                       *
*****************************************************************************
PasteTextBlock:
	jsr	BlockInput

	jsr	CBOpen			;Open clipboard file.
	tst.l	d0
	bne	PasteCBError		;Clipboard not available.

	jsr	CBInitialise		;Initialise write.

	jsr	CBCheckClip		;Check there is an FTXT clip.
	tst.l	d0
	bne	PasteTextBlockOut

	move.l	CurrentLinePtr,PasteTextTopPtr	;Store text pointer.

	jsr	CreateNewLineAfter
	beq	PasteTextBlockOut	;New line not created.

PasteTextBlockLoop:
	jsr	CBReadCHRSHeader	;Get length of next block.
	tst.l	d0
	bne	PasteTextBlockDone	;End of file reached.

	cmp.l	#0,ClipStringLen
	beq	PasteNextTextBlock

	move.l	_SysBase,a6
	move.l	ClipStringLen,d0
	move.l	#MEMF_CLEAR,d1
	jsr	AllocMem(a6)		;Allocate temporary space.
	move.l	d0,PasteTextBuffer
	beq	PasteTextBlockOut	;Space not available.

	jsr	CBPasteCurrentClip

	move.l	ClipStringLen,d0
	move.l	PasteTextBuffer,a1
	move.l	_SysBase,a6
	jsr	FreeMem(a6)		;Free temporary space.

PasteNextTextBlock:
	move.l	ClipStringLen,d0
	sub.l	d0,ClipTotalLen
	cmp.l	#0,ClipTotalLen
	bne	PasteTextBlockLoop

	jsr	CBReadDone		;Clean up after read.

PasteTextBlockDone:
	move.l	PasteTextTopPtr,CurrentLinePtr	;Restore text pointer.

	jsr	RefreshVisibleText
	jsr	UpdateBOOPSIGadgets

PasteTextBlockOut:
	jsr	CBClose
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

PasteCBError:
	jsr	ClipboardError
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Delete a block of text.                                                   *
*****************************************************************************
MenuDeleteTextBlock:
	cmp.w	#1,TextBlockMarked
	bne	ProcessMenuSelectionReturn

	jsr	BlockInput

	jsr	DeleteTextBlock
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Select the entire document                                                *
*****************************************************************************
SelectAllText:
	jsr	BlockInput

	move.w	#1,TextBlockMarked	;Indicate block is marked.

	move.l	BOOPSIMaxHeight,d5
	sub.l	#1,d5
	move.l	d5,TextBlockLength

	move.l	FirstLinePtr,TextBlockTopPtr

	move.l	BOOPSIMaxHeight,d5
	cmp.l	BOOPSIVertView,d5
	ble	SelectAllShortFile

	sub.l	BOOPSIVertView,d5

	move.l	d5,BOOPSIVertPropVal
	jsr	UpdateBOOPSIVertProp	;Update vert prop position.
	jsr	GetBOOPSIVertSliderPosition

	move.l	#0,BOOPSIHorizPropVal
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	move.l	LastLinePtr,CurrentLinePtr

	jsr	ResetCursor
	move.w	#0,MouseXCoord
	move.w	MainWindowHeightChars,MouseYCoord
	sub.w	#1,MouseYCoord

	move.l	#0,CurrentLineOffset
	jsr	HideCursor

	move.l	#WriteIOReq,a1			;Invert the text.
	move.l	#InverseText,io_Data(a1)
	move.l	#3,io_Length(a1)
	jsr	SendChars

	jsr	DisplayVisibleText

	move.l	#WriteIOReq,a1			;Uninvert the text.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	jsr	ShowCursor
	jsr	DrawPrinterBorders
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

SelectAllShortFile:
	move.l	#0,BOOPSIVertPropVal
	jsr	UpdateBOOPSIVertProp	;Update vert prop position.
	jsr	GetBOOPSIVertSliderPosition

	move.l	#0,BOOPSIHorizPropVal
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	move.l	LastLinePtr,CurrentLinePtr

	jsr	ResetCursor
	move.w	#0,MouseXCoord

	move.l	BOOPSIMaxHeight,d5
	move.w	d5,MouseYCoord
	sub.w	#1,MouseYCoord

	move.l	#0,CurrentLineOffset
	jsr	HideCursor

	move.l	#WriteIOReq,a1			;Invert the text.
	move.l	#InverseText,io_Data(a1)
	move.l	#3,io_Length(a1)
	jsr	SendChars

	jsr	DisplayVisibleText

	move.l	#WriteIOReq,a1			;Uninvert the text.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	jsr	ShowCursor
	jsr	DrawPrinterBorders
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Cut, Copy, and Paste subroutines.                                         *
*****************************************************************************
DeleteTextBlock:
	move.w	#0,TextBlockMarked

	move.l	TextBlockLength,d5

	move.l	BOOPSIMaxHeight,d6
	sub.l	#1,d6
	cmp.l	d6,d5
	beq	DeleteEntireDocument

DeleteTextBlockLoop:
	jsr	DeleteCurrentLine
	dbra	d5,DeleteTextBlockLoop

	jsr	DetermineLongestLine
	move.l	#0,BOOPSIHorizPropVal
	jsr	UpdateBOOPSIGadgets

	jsr	HideCursor
	jsr	DisplayVisibleText

	jsr	ResetCursor		;Place cursor in
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr	; top left corner.
	move.l	#0,CurrentLineOffset
	jsr	ShowCursor

	jsr	UnBlockInput
	rts

DeleteEntireDocument:
	move.l	LastLinePtr,a1
	jsr	ReleaseTextBuffer	;Release old buffer memory.
	jsr	InitialiseTextBuffer	;Allocate new text buffer.

	jsr	ClearConsole
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	#1,BOOPSIMaxHeight
	move.l	#0,BOOPSIMaxWidth
	move.l	#0,BOOPSIHorizPropVal
	move.l	#0,BOOPSIVertPropVal
	move.l	#0,CurrentHorizTop
	move.l	#0,CurrentHorizPosition
	move.l	#0,CurrentVertTop
	move.l	#0,CurrentVertPosition

	jsr	UpdateBOOPSIGadgets
	jsr	DrawPrinterBorders
	jsr	UnBlockInput

	rts

CopyToCutBuffer:
	move.l	#0,ClipStringLen
	move.l	#0,ClipTotalLen

	jsr	CBOpen			;Open clipboard file.
	tst.l	d0
	bne	ClipboardError		;Clipboard not available.
	jsr	CBInitialise		;Initialise write.
	jsr	CBWriteHeader		;Write IFF header.

	move.l	TextBlockTopPtr,a5
	move.l	TextBlockLength,d5

CopyToBufferLoop:
	move.l	tb_LineLength(a5),d0

	cmp.l	#0,d0
	beq	ClipboardBlankLine

	add.l	d0,ClipStringLen	;Increase block size.
	jsr	CBWriteBuffer

ClipboardBlankLine:
	cmp.l	#0,d5
	beq	ClipboardFinalLine	;Don't write final $0a.

	jsr	CBWriteNewLine
	add.l	#1,ClipStringLen

	move.l	tb_Next(a5),a5
	dbra	d5,CopyToBufferLoop

ClipboardFinalLine:
	move.l	ClipStringLen,d0
	move.l	d0,d1
	divu	#2,d0
	mulu	#2,d0
	cmp.w	d0,d1
	beq	NoClipboardPadding	;Clip length is even.

	jsr	CBPadding
	move.l	#1,ClipTotalLen

NoClipboardPadding:
	move.l	ClipStringLen,d0
	add.l	#12,d0
	add.l	d0,ClipTotalLen
	jsr	CBWriteHeader		;Write IFF header.
	jsr	CBFinish		;Finish output.

	jsr	CBClose			;Close the clipboard file.
	clr.l	d0			;Indicate no error.
	rts

ClipboardError:
	jsr	CBErrorClose		;Cleanup.
	jsr	ErrorBeep
	move.l	#ClipboardErrorRequester,a1
	jsr	DisplayEasyRequester
	move.l	#-1,d0			;Indicate error.
	rts

*****************************************************************************
* Open the clipboard.device.                                                *
*****************************************************************************
CBOpen:	move.l	_SysBase,a6	;Open a message port.
	jsr	CreateMsgPort(a6)
	move.l	d0,CBMsgPort

	move.l	_SysBase,a6
	move.l	CBMsgPort,a0
	move.l	#52,d0
	jsr	CreateIORequest(a6)	;Create request structure.
	move.l	d0,CBIOReq

	move.l	_SysBase,a6	;Open device.
	move.l	#ClipboardName,a0
	move.l	CBIOReq,a1
	move.l	#0,d0		;Unit 0.
	move.l	#0,d1		;No flags.
	jsr	OpenDevice(a6)
	rts

*****************************************************************************
* Close the clipboard.device.                                               *
*****************************************************************************
CBClose:move.l	_SysBase,a6	;Close device.
	move.l	CBIOReq,a1
	jsr	CloseDevice(a6)

CBErrorClose:
	move.l	_SysBase,a6
	move.l	CBIOReq,a0
	jsr	DeleteIORequest(a6)	;Create request structure.

	move.l	_SysBase,a6	;Close message port.
	move.l	CBMsgPort,a0
	jsr	DeleteMsgPort(a6)
	rts

*****************************************************************************
* Write text to the clipboard.device.                                       *
*****************************************************************************
CBInitialise:
	move.l	CBIOReq,a0
	move.l	#0,io_Offset(a0)	;Initial setups.
	move.b	#0,io_Error(a0)
	move.l	#0,io_ClipID(a0)
	rts

CBWriteHeader:
	move.l	CBIOReq,a1
	move.l	#0,io_Offset(a1)	;Initial setups.

	move.l	#ClipboardHeader,io_Data(a1)	;Write the header.
	move.l	#20,io_Length(a1)
	move.w	#CMD_WRITE,io_Command(a1)
	move.l	_SysBase,a6
	jsr	DoIO(a6)
	rts

CBWriteBuffer:
	move.l	CBIOReq,a1
	move.l	a5,io_Data(a1)
	add.l	#tb_Text,io_Data(a1)		;Address of text.
	move.l	tb_LineLength(a5),d0
	move.l	d0,io_Length(a1)
	move.w	#CMD_WRITE,io_Command(a1)
	move.l	_SysBase,a6
	jsr	DoIO(a6)
	rts

CBWriteNewLine:
	move.l	CBIOReq,a1
	move.l	#ClipboardCR,io_Data(a1)	;Write $0a.
	move.l	#1,io_Length(a1)
	move.w	#CMD_WRITE,io_Command(a1)
	move.l	_SysBase,a6
	jsr	DoIO(a6)
	rts

CBPadding:
	move.l	CBIOReq,a1
	move.l	#ClipboardPad,io_Data(a1)	;Write 0.
	move.l	#1,io_Length(a1)
	move.w	#CMD_WRITE,io_Command(a1)
	move.l	_SysBase,a6
	jsr	DoIO(a6)
	rts

CBFinish:
	move.l	CBIOReq,a1
	move.w	#CMD_UPDATE,io_Command(a1)
	move.l	_SysBase,a6
	jsr	DoIO(a6)
	rts

*****************************************************************************
* Read text from the clipboard.device (initialisation routines).            *
*****************************************************************************
CBCheckClip:
	move.l	CBIOReq,a1
	move.l	#DiskFileBuffer,io_Data(a1)
	move.l	#12,io_Length(a1)
	move.w	#CMD_READ,io_Command(a1)
	move.l	_SysBase,a6
	jsr	DoIO(a6)

	move.l	CBIOReq,a0
	move.l	io_Actual(a0),d0
	cmp.l	#12,d0
	bne	CBClipNoGood

	move.l	#DiskFileBuffer,a0
	cmp.l	#"FORM",(a0)
	bne	CBClipNoGood

	add.l	#4,a0
	move.l	(a0),ClipTotalLen	;Store length of clip.
	sub.l	#4,ClipTotalLen		;Update counter.

	add.l	#4,a0
	cmp.l	#"FTXT",(a0)
	bne	CBClipNoGood

	move.l	#0,d0			;Clip is suitable.
	rts

CBClipNoGood:
	move.l	#-1,d0		;Indicate error.
	rts

CBReadCHRSHeader:
	move.l	CBIOReq,a1
	move.l	#DiskFileBuffer,io_Data(a1)
	move.l	#8,io_Length(a1)
	move.w	#CMD_READ,io_Command(a1)
	move.l	_SysBase,a6
	jsr	DoIO(a6)

	move.l	#DiskFileBuffer,a0
	cmp.l	#"CHRS",(a0)
	bne	CBReadCHRSHeaderError	;'CHRS' string not found.

	add.l	#4,a0
	move.l	(a0),ClipStringLen	;Get length of next block.
	sub.l	#8,ClipTotalLen		;Update counter.

	move.l	ClipStringLen,d0
	move.l	d0,d1
	divu	#2,d0
	mulu	#2,d0
	cmp.w	d0,d1
	beq	CBCHRSIsEven		;Clip length is even.

	add.l	#1,ClipStringLen	;Make it even.

CBCHRSIsEven:
	move.l	#0,d0
	rts

CBReadCHRSHeaderError:
	move.l	#-1,d0			;Signal error.
	rts

*****************************************************************************
* Paste text from the clipboard.device.                                     *
*****************************************************************************
CBPasteCurrentClip:
	move.l	CBIOReq,a1
	move.l	PasteTextBuffer,io_Data(a1)
	move.l	ClipStringLen,io_Length(a1)
	move.w	#CMD_READ,io_Command(a1)
	move.l	_SysBase,a6
	jsr	DoIO(a6)		;Read the clip.

	move.l	CurrentLinePtr,a5
	move.l	a5,a4
	add.l	#tb_Text,a4

	move.l	ClipStringLen,d5
	sub.l	#1,d5
	move.l	PasteTextBuffer,a3

CBPasteCurrentClipLoop:
	cmp.b	#0,(a3)
	beq	CBPasteUnwantedChars
	cmp.b	#$0a,(a3)		;CR in file.
	beq	CBPasteNewLine
	cmp.b	#$09,(a3)		;Sort out tabs.
	beq	CBPasteTabs

	cmp.b	#$0f,(a3)
	beq	CBPasteCharOK
	cmp.b	#$10,(a3)
	beq	CBPasteCharOK
	cmp.b	#$11,(a3)
	beq	CBPasteCharOK
	cmp.b	#$12,(a3)
	beq	CBPasteCharOK
	cmp.b	#$13,(a3)
	beq	CBPasteCharOK
	cmp.b	#$14,(a3)
	beq	CBPasteCharOK
	cmp.b	#$15,(a3)
	beq	CBPasteCharOK
	cmp.b	#$16,(a3)
	beq	CBPasteCharOK
	cmp.b	#$17,(a3)
	beq	CBPasteCharOK
	cmp.b	#$18,(a3)
	beq	CBPasteCharOK
	cmp.b	#$19,(a3)
	beq	CBPasteCharOK
	cmp.b	#$1a,(a3)
	beq	CBPasteCharOK

	cmp.b	#32,(a3)		;Remove control characters.
	blo	CBPasteUnwantedChars
	cmp.b	#128,(a3)
	blo	CBPasteCharOK
	cmp.b	#160,(a3)
	blo	CBPasteUnwantedChars

CBPasteCharOK:
	cmp.l	#240,tb_LineLength(a5)	;Line length limit reached.
	beq	CBPasteNewLine

	move.b	(a3),(a4)		;Copy byte from load buffer.
	add.l	#1,tb_LineLength(a5)
	add.l	#1,a4

CBPasteUnwantedChars:
	add.l	#1,a3
	dbra	d5,CBPasteCurrentClipLoop

CBPasteCurrentClipDone:
	move.l	tb_LineLength(a5),d0
	add.l	#1,d0
	cmp.l	BOOPSIMaxWidth,d0
	ble	CBPasteCurrentClipOut
	move.l	d0,BOOPSIMaxWidth	;Calculate max width for BOOPSI.

CBPasteCurrentClipOut:
	rts

CBPasteNewLine:
	move.l	tb_LineLength(a5),d0
	add.l	#1,d0
	cmp.l	BOOPSIMaxWidth,d0
	ble	CBPasteNotLongestLine
	move.l	d0,BOOPSIMaxWidth	;Calculate max width for BOOPSI.

CBPasteNotLongestLine:
	jsr	CreateNewLineAfter
	beq	LoadFileMemoryError	;New line not created.

	move.l	CurrentLinePtr,a5
	move.l	a5,a4
	add.l	#tb_Text,a4

	cmp.b	#$0a,(a3)
	bne	CBPasteNewLineOut	;Line length exceeded.
	add.l	#1,a3			;Go on past $0a character.

CBPasteNewLineOut:
	dbra	d5,CBPasteCurrentClipLoop
	jmp	CBPasteCurrentClipDone

CBReadDone:
	move.l	CBIOReq,a1
	move.l	#DiskFileBuffer,io_Data(a1)
	move.l	#1024,io_Length(a1)
	move.w	#CMD_READ,io_Command(a1)
	move.l	_SysBase,a6
	jsr	DoIO(a6)

	move.l	CBIOReq,a0
	move.l	io_Actual(a0),d0
	cmp.l	#0,d0
	bne	CBReadDone
	rts

*****************************************************************************
* Translate tabs into spaces.                                               *
*****************************************************************************
CBPasteTabs:
	cmp.l	#240,tb_LineLength(a5)	;Line length limit reached.
	beq	CBPasteNewLine

	move.b	#" ",(a4)		;Fill up with spaces.
	add.l	#1,a4
	add.l	#1,tb_LineLength(a5)

	move.l	tb_LineLength(a5),d0
	divu	#8,d0
	mulu	#8,d0
	cmp.l	tb_LineLength(a5),d0
	bne	CBPasteTabs		;Tab point not reached.

	jmp	CBPasteUnwantedChars

*****************************************************************************
* Replace found text with other text.                                       *
*****************************************************************************
ReplaceText:
	move.l	#FindTextString,FindTextStringPtr
	move.l	FindTextStringPtr,a5
	cmp.b	#0,(a5)
	beq	ProcessMenuSelectionReturn

	move.l	#ReplaceTextString,a5
	cmp.b	#0,(a5)
	beq	ProcessMenuSelectionReturn

	jsr	BlockInput
	move.w	#0,TextBlockMarked

	move.l	FindTextStringPtr,ReplaceTextPtr

ReplaceTextLoop:
	move.l	ReplaceTextPtr,a5
	cmp.b	#0,(a5)
	beq	ReplaceTextLoopCont

	jsr	MoveCursorLeft
	jsr	DeleteCurrentCharacter

	add.l	#1,ReplaceTextPtr
	jmp	ReplaceTextLoop

ReplaceTextLoopCont:
	move.l	#ReplaceTextString,ReplaceTextPtr

ReplaceTextLoop2:
	move.l	ReplaceTextPtr,a5
	cmp.b	#0,(a5)
	beq	ReplaceTextLoop2Cont

	move.b	(a5),Buffer
	jsr	InsertKeyboardText

	add.l	#1,ReplaceTextPtr
	jmp	ReplaceTextLoop2

ReplaceTextLoop2Cont:
	jsr	UnBlockInput
	jmp	FindAgain

*****************************************************************************
* Find some text in the file.                                               *
*****************************************************************************
FindText:
	jsr	BlockInput
	move.l	#FindTextString,FindTextStringPtr

	jsr	OpenFindTextWindow
	bne	FindTextFail			;Not enough memory.
	jsr	FindTextRender

	move.l	#FindTextGadgets,a0
	move.l	12(a0),a0
	move.l	FindTextWnd,a1
	move.l	#0,a2
	move.l	_IntuitionBase,a6
	jsr	ActivateGadget(a6)		;Activate F1 gadget.

FindTextEventLoop:
	move.l	FindTextWnd,a0
	move.l	UserPort(a0),a0
	jsr	WaitForPort		;Wait for a message.

	move.l	FindTextWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	FindTextEventLoop	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage	;Reply to message.

	move.l	imsgClass,d0
	cmp.l	#IDCMP_GADGETUP,d0
	beq	ProcessFindTextGadgets	;Gadget clicked on.
	cmp.l	#IDCMP_CLOSEWINDOW,d0
	beq	FindTextCancel		;Window closed.

	jmp	FindTextEventLoop

ProcessFindTextGadgets:
	move.l	imsg,a0
	move.l	IAddress(a0),a0
	move.w	GadgetID(a0),d0

	cmp.b	#GD_FindOKGad,d0
	beq	FindTextOK
	cmp.b	#GD_FindCancelGad,d0
	beq	FindTextCancel

	jmp	FindTextEventLoop

FindTextOK:
	move.w	#0,TextBlockMarked

	move.l	#FindTextGadgets,a5
	add.l	#12,a5		;Address of find string gadget.
	move.l	(a5),a5
	move.l	SpecialInfo(a5),a5
	move.l	FindTextStringPtr,a6
	move.l	(a5),a5		;Address of find text string.

	move.l	#255,d5
UpdateFindLoop:
	move.b	(a5)+,(a6)+
	dbra	d5,UpdateFindLoop

	move.l	#FindTextGadgets,a5
	add.l	#8,a5		;Address of replace string gadget.
	move.l	(a5),a5
	move.l	SpecialInfo(a5),a5
	move.l	#ReplaceTextString,a6
	move.l	(a5),a5		;Address of replace text string.

	move.l	#255,d5
UpdateReplaceLoop:
	move.b	(a5)+,(a6)+
	dbra	d5,UpdateReplaceLoop

	jsr	CloseFindTextWindow
	jsr	UnBlockInput

FindAgain:
	jsr	BlockInput
	move.l	#FindTextString,FindTextStringPtr

	move.l	FindTextStringPtr,a6
	cmp.b	#0,(a6)
	beq	FindTextFail

	sub.l	#1,a6
MakeFindStringCaps:			;Convert string into caps.
	add.l	#1,a6
	cmp.b	#0,(a6)
	beq	FindStringIsCaps	;Case conversion done

	cmp.b	#$61,(a6)
	blo	MakeFindStringCaps
	cmp.b	#$7a,(a6)
	bhi	MakeFindStringCaps

	sub.b	#$20,(a6)
	jmp	MakeFindStringCaps

FindStringIsCaps:
	move.l	FindTextStringPtr,a5

	move.l	BOOPSIVertPropVal,d4
	add.w	MouseYCoord,d4

FindTextLoop:
	cmp.b	#0,(a5)
	beq	TextFound

	move.l	CurrentLinePtr,a6
	add.l	#tb_Text,a6
	add.l	CurrentLineOffset,a6

	move.l	CurrentLinePtr,a4
	move.l	tb_LineLength(a4),d0
	cmp.l	CurrentLineOffset,d0
	beq	FindNewLine

	move.b	(a6),d6
	jsr	FindMakeLetterCaps
	move.b	(a5),d5
	cmp.b	d5,d6
	bne	NotFoundThisTime

	add.l	#1,a5
	add.l	#1,CurrentLineOffset
	add.w	#1,MouseXCoord
	jmp	FindTextLoop

FindMakeLetterCaps:
	cmp.b	#$61,d6
	blo	FindMakeLetterCapsOut
	cmp.b	#$7a,d6
	bhi	FindMakeLetterCapsOut

	sub.b	#$20,d6
FindMakeLetterCapsOut:
	rts

NotFoundThisTime:
	cmp.l	FindTextStringPtr,a5
	beq	NotFoundThisTime2
	move.l	FindTextStringPtr,a5
	jmp	FindTextLoop

NotFoundThisTime2:
	add.l	#1,CurrentLineOffset
	add.w	#1,MouseXCoord
	jmp	FindTextLoop

FindNewLine:
	move.l	CurrentLinePtr,a4
	move.l	tb_Next(a4),a4

	cmp.l	#0,a4
	beq	NoMoreTextFound

	add.l	#1,d4
	move.l	a4,CurrentLinePtr
	move.l	#0,CurrentLineOffset
	move.w	#0,MouseXCoord

	jmp	FindTextLoop

NoMoreTextFound:
	jsr	ErrorBeep	;Indicate no more matches.

TextFound:
	move.l	BOOPSIVertView,d0

	cmp.l	BOOPSIMaxHeight,d0
	blo	TextFoundCont

	move.w	d4,MouseYCoord
	jmp	TextFoundCont2

TextFoundCont:
	move.l	d4,BOOPSIVertPropVal
	move.w	#0,MouseYCoord

	move.l	BOOPSIMaxHeight,d5
	sub.l	BOOPSIVertView,d5
	cmp.l	d4,d5
	bge	TextFoundCont2

	sub.l	d5,d4
	move.w	d4,MouseYCoord

	move.l	BOOPSIMaxHeight,BOOPSIVertPropVal
	move.l	BOOPSIVertView,d5
	sub.l	d5,BOOPSIVertPropVal

TextFoundCont2:
	jsr	UpdateBOOPSIVertProp	;Update vert prop position.
	jsr	GetBOOPSIVertSliderPosition

	move.l	#0,BOOPSIHorizPropVal
	jsr	UpdateBOOPSIHorizProp	;Update vert prop position.
	jsr	GetBOOPSIHorizSliderPosition

	clr.l	d0
	move.w	MouseXCoord,d0
	cmp.l	BOOPSIHorizView,d0
	blo	TextFoundXCoordOK

	move.l	CurrentLineOffset,d5
	add.l	#1,d5
	sub.l	BOOPSIHorizView,d5
	move.l	d5,BOOPSIHorizPropVal

	move.l	BOOPSIHorizView,d0
	sub.l	#1,d0
	move.w	d0,MouseXCoord

	jsr	UpdateBOOPSIHorizProp	;Update vert prop position.
	jsr	GetBOOPSIHorizSliderPosition

TextFoundXCoordOK:
	jsr	RefreshVisibleText
	jsr	UnBlockInput

	jmp	ProcessMenuSelectionReturn

FindTextCancel:
	jsr	CloseFindTextWindow

FindTextFail:
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Insert a bookmark into text.                                              *
*****************************************************************************
InsertBookmark:
	cmp.w	#1,TextBlockMarked
	bne	InsertBookmarkNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

InsertBookmarkNoCurrentBlock:
	move.b	#$0f,Buffer

	move.w	WordWrapMode,TempWordWrapMode	;Store word wrap mode.
	move.w	#0,WordWrapMode			;Switch off word wrap.
	jsr	InsertKeyboardTextValidChar	;Put character in text buffer.
	move.w	TempWordWrapMode,WordWrapMode	;Restore word wrap mode.

	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Find the next bookmark.                                                   *
*****************************************************************************
GotoNextBookmark:
	move.l	#BookmarkFindString,FindTextStringPtr
	move.w	#0,TextBlockMarked
	jmp	FindStringIsCaps

*****************************************************************************
* Save the preferences to a disk file.                                      *
*****************************************************************************
SavePreferences:
	jsr	BlockInput

	move.l	#MODE_NEWFILE,d2
	move.l	#PreferencesFileName,d1
	jsr	OpenFile		;Open the file.
	move.l	d0,TextFileHd
	beq	SavePrefsError

	move.l	#Preferences,d2
	move.l	#2875,d3
	move.l	_DOSBase,a6
	move.l	TextFileHd,d1
	jsr	Write(a6)

	cmp.l	#-1,d0
	beq	SavePrefsErrorCloseFile

	move.l	TextFileHd,d1
	jsr	CloseFile

	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

SavePrefsErrorCloseFile:
	move.l	TextFileHd,d1
	jsr	CloseFile

SavePrefsError:
	jsr	ErrorBeep

	move.l	#SavePrefsErrorRequester,a1
	jsr	DisplayEasyRequester

	jsr	UnBlockInput		;Restore input to main edit window.
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Save document without file requester.                                     *
*****************************************************************************
SaveDocument:
	jsr	BlockInput
	jmp	SaveTextEngineDocument

*****************************************************************************
* Save document as a TextEngine format file.                                *
*****************************************************************************
SaveDocumentAs:
	jsr	BlockInput		;Block input to main edit window.

	move.l	ASLSaveRequestPtr,a0
	move.l	#ASLSaveRequester,a1
	move.l	_ASLBase,a6
	jsr	AslRequest(a6)		;Do save file request.
	tst.l	d0
	beq	SaveDocumentAsDone	;Cancel selected.

	move.l	ASLSaveRequestPtr,a5	;Extract file name
	move.l	#FileName,a6
	jsr	GetFileName		; and path.

	move.l	#MODE_OLDFILE,d2
	move.l	#FileName,d1
	jsr	OpenFile		;Open the file.
	move.l	d0,TextFileHd
	beq	SaveFileNewFile		;File doesn't exist.

	move.l	#OverwriteFileRequester,a1
	jsr	DisplayEasyRequester
	tst.l	d0
	bne	SaveFileNewFile		;User selected 'OK'.

	jsr	UnBlockInput		;User cancelled requester.
	jmp	ProcessMenuSelectionReturn

SaveFileNewFile:
	move.l	TextFileHd,d1
	jsr	CloseFile

SaveTextEngineDocument:
	move.w	#0,SaveASCIIMode
	move.l	#MODE_NEWFILE,d2
	move.l	#FileName,d1
	jsr	OpenFile		;Open the file.
	move.l	d0,TextFileHd
	beq	SaveFileError

	jsr	FileNameInWindowTitle	;Put filename in window title bar.

	move.l	#TextEngineDocument,d2
	move.l	#2879,d3
	move.l	_DOSBase,a6
	move.l	TextFileHd,d1
	jsr	Write(a6)

	jmp	SaveASCIIFile

SaveDocumentAsDone:
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Save document without file requester.                                     *
*****************************************************************************
SaveDocumentASCII:
	jsr	BlockInput
	jmp	SaveASCIIDocument

*****************************************************************************
* Save the current document as ASCII text.                                  *
*****************************************************************************
SaveDocumentASCIIAs:
	jsr	BlockInput		;Block input to main edit window.

	move.l	ASLSaveRequestPtr,a0
	move.l	#ASLSaveRequester,a1
	move.l	_ASLBase,a6
	jsr	AslRequest(a6)		;Do load file request.
	tst.l	d0
	beq	SaveASCIITextFileDone	;Cancel selected.

	move.l	ASLSaveRequestPtr,a5	;Extract file name
	move.l	#FileName,a6
	jsr	GetFileName		; and path.

	move.l	#MODE_OLDFILE,d2
	move.l	#FileName,d1
	jsr	OpenFile		;Open the file.
	move.l	d0,TextFileHd
	beq	SaveASCIINewFile		;File doesn't exist.

	move.l	#OverwriteFileRequester,a1
	jsr	DisplayEasyRequester
	tst.l	d0
	bne	SaveASCIINewFile		;User selected 'OK'.

	jsr	UnBlockInput		;User cancelled requester.
	jmp	ProcessMenuSelectionReturn

SaveASCIINewFile:
	move.l	TextFileHd,d1
	jsr	CloseFile

SaveASCIIDocument:
	move.w	#1,SaveASCIIMode
	move.l	#MODE_NEWFILE,d2
	move.l	#FileName,d1
	jsr	OpenFile		;Open the file.
	move.l	d0,TextFileHd
	beq	SaveFileError

	jsr	FileNameInWindowTitle	;Put filename in window title bar.

SaveASCIIFile:
	move.l	FirstLinePtr,a5
	move.l	FirstLinePtr,a4

	add.l	#tb_Text,a5
	move.l	tb_LineLength(a4),d6

	move.l	#0,d5
	move.l	#DiskFileBuffer,a3

	cmp.l	#0,d6
	beq	SaveASCIINewLine	;Line is empty.

	sub.l	#1,d6
SaveASCIILoop:
	move.b	(a5)+,(a3)+

	add.l	#1,d5
	cmp.l	#1024,d5
	beq	WriteASCIIBuffer
	dbra	d6,SaveASCIILoop

	jmp	SaveASCIINewLine

	add.l	#1,a5

	cmp.l	#0,d6
	beq	SaveASCIINewLine

	sub.l	#1,d6
	jmp	SaveASCIILoop

WriteASCIIBuffer:
	move.l	#DiskFileBuffer,d2
	move.l	d5,d3
	move.l	_DOSBase,a6
	move.l	TextFileHd,d1
	jsr	Write(a6)

	cmp.l	#-1,d0
	beq	SaveErrorCloseFile

	move.l	#0,d5
	move.l	#DiskFileBuffer,a3

	cmp.l	#0,d6
	beq	SaveASCIINewLine

	sub.l	#1,d6
	jmp	SaveASCIILoop

SaveASCIINewLine:
	move.l	tb_Next(a4),a4
	cmp.l	#0,a4
	beq	SaveASCIIOut

	move.l	a4,a5
	add.l	#tb_Text,a5
	move.l	tb_LineLength(a4),d6

	move.b	#$0a,(a3)+		;End of line within paragraph.
	add.l	#1,d5
	cmp.l	#1024,d5
	beq	WriteASCIIBuffer

	cmp.l	#0,d6
	beq	SaveASCIINewLine	;Line is empty.

	sub.l	#1,d6
	jmp	SaveASCIILoop

SaveASCIIOut:
	move.l	#DiskFileBuffer,d2
	move.l	d5,d3
	move.l	_DOSBase,a6
	move.l	TextFileHd,d1
	jsr	Write(a6)

	cmp.l	#-1,d0
	beq	SaveErrorCloseFile

	move.l	TextFileHd,d1
	jsr	CloseFile

SaveASCIITextFileDone:
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Insert a text file at cursor position.                                    *
*****************************************************************************
InsertTextFile:
	jsr	BlockInput		;Block input to main edit window.

	move.l	ASLInsertRequestPtr,a0
	move.l	#ASLInsertRequester,a1
	move.l	_ASLBase,a6
	jsr	AslRequest(a6)		;Do insert file request.
	tst.l	d0
	beq	InsertTextFileDone	;Cancel selected.

	move.l	ASLInsertRequestPtr,a5	;Extract file name
	move.l	#InsertFileName,a6
	jsr	GetFileName	; and path.

	move.l	#MODE_OLDFILE,d2
	move.l	#InsertFileName,d1
	jsr	OpenFile
	move.l	d0,TextFileHd
	beq	LoadFileError

	move.l	#TestFileFormatBuffer,d2	;Buffer for file contents
	move.l	#4,d3		;Length of read
	move.l	TextFileHd,d1
	jsr	ReadFile

	cmp.l	#"Tf50",TestFileFormatBuffer
	bne	InsertASCIITextFile

	move.l	_DOSBase,a6
	move.l	TextFileHd,d1
	move.l	#2879,d2
	move.l	#-1,d3
	jsr	Seek(a6)	;Skip prefs data.

	jmp	InsertTextEngineFile

InsertASCIITextFile:
	move.l	_DOSBase,a6
	move.l	TextFileHd,d1
	move.l	#0,d2
	move.l	#-1,d3
	jsr	Seek(a6)

InsertTextEngineFile:
	move.w	#0,TextBlockMarked

	jsr	CreateNewLineAfter
	beq	LoadFileMemoryError	;New line not created.

	move.l	#0,BOOPSIHorizPropVal
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition
	jsr	ExtractAsciiFileContents;Copy buffer into memory.

InsertTextEngineFileDone:
	move.l	TextFileHd,d1
	jsr	CloseFile

	jsr	HideCursor
	jsr	DisplayVisibleText

	jsr	ResetCursor		;Place cursor in
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr	; top left corner.
	move.l	#0,CurrentLineOffset
	jsr	ShowCursor

	jsr	UpdateBOOPSIGadgets

InsertTextFileDone:
	jsr	UnBlockInput		;Restore input to main edit window.
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Open a text file.                                                         *
*****************************************************************************
OpenTextFile:
	jsr	BlockInput		;Block input to main edit window.

	move.l	ASLLoadRequestPtr,a0
	move.l	#ASLLoadRequester,a1
	move.l	_ASLBase,a6
	jsr	AslRequest(a6)		;Do load file request.
	tst.l	d0
	beq	OpenTextFileDone	;Cancel selected.

	move.l	ASLLoadRequestPtr,a5	;Extract file name
	move.l	#FileName,a6
	jsr	GetFileName		; and path.

OpenAppWindowFile:
	move.l	#MODE_OLDFILE,d2
	move.l	#FileName,d1
	jsr	OpenFile
	move.l	d0,TextFileHd
	beq	LoadFileError

	jsr	FileNameInWindowTitle	;Put filename in window title bar.

	move.l	#TestFileFormatBuffer,d2	;Buffer for file contents
	move.l	#4,d3		;Length of read
	move.l	TextFileHd,d1
	jsr	ReadFile

	cmp.l	#"Tf50",TestFileFormatBuffer
	bne	LoadASCIITextFile

	move.l	#Preferences,d2	;Buffer for file contents
	move.l	#2875,d3		;Length of read
	move.l	TextFileHd,d1
	jsr	ReadFile

	cmp.l	#0,d0
	beq	LoadTextEngineFileDone

	jmp	LoadASCIIFile

LoadASCIITextFile:
	move.l	_DOSBase,a6
	move.l	TextFileHd,d1
	move.l	#0,d2
	move.l	#-1,d3
	jsr	Seek(a6)

LoadASCIIFile:
	move.w	#0,TextBlockMarked

	;Printer prefs defaults.

	move.l	#PrinterPrefsGTags,a0
	move.l	PrinterTopMargin,48(a0)		;Top margin = 0.
	move.l	PrinterBottomMargin,68(a0)	;Bottom margin = 0.
	move.l	PrinterPageHeight,88(a0)	;Page length = 70.
	move.l	PrinterLeftMargin,108(a0)	;Left margin = 5.
	move.l	PrinterRightMargin,128(a0)	;Right margin = 5.
	move.l	PrinterPageWidth,148(a0)	;Page width = 80.
	move.l	#PrintToString,168(a0)		;'Print to' string pointer.
	move.l	DraftPrintMode,12(a0)		;Draft print on.
	move.l	PropPrintMode,24(a0)		;Proportional off.
	move.l	DSPrintMode,36(a0)		;Double space off.
	move.l	NumOfCopies,188(a0)		;Num of copies.

	;Function keys defaults.

	move.l	#FunctionKeysGTags,a0
	move.l	#F1String,12(a0)
	move.l	#F2String,32(a0)
	move.l	#F3String,52(a0)
	move.l	#F4String,72(a0)
	move.l	#F5String,92(a0)
	move.l	#F6String,112(a0)
	move.l	#F7String,132(a0)
	move.l	#F8String,152(a0)
	move.l	#F9String,172(a0)
	move.l	#F10String,192(a0)

	;Colour prefs defaults.

	move.l	#InitConsoleText,a5	;Change console colours.
	add.l	#4,a5			;Text colour

	move.w	TextColour,d5
	add.b	#$30,d5
	move.b	d5,(a5)			;Insert text colour.

	add.l	#3,a5

	move.w	FieldColour,d5
	add.b	#$30,d5
	move.b	d5,(a5)			;Insert field colour.

	add.l	#3,a5

	move.w	FieldColour,d5
	add.b	#$30,d5
	move.b	d5,(a5)			;Insert field colour.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	jsr	ClearMenuStrip(a6)	;Clear menus.

	move.l	MainEditWindowMenus,a0	;Address of first menu.
	move.l	(a0),a0			;Address of second menu.
	move.l	(a0),a0			;Address of third menu.
	move.l	(a0),a0			;Address of fourth menu.
	move.l	(a0),a0			;Address of fifth menu.
	move.l	(a0),a0			;Address of sixth menu.
	move.l	(a0),a0			;Address of seventh menu.

	move.l	FirstItem(a0),a0	;Address of Word Wrap item.
	move.w	WordWrapMode,d0
	move.w	#%1111111011111111,d1
	and.w	d1,Flags(a0)
	or.w	d0,Flags(a0)

	move.l	(a0),a0			;Get second menu item.
	move.w	ShowBordersMode,d0
	move.w	#%1111111011111111,d1
	and.w	d1,Flags(a0)
	or.w	d0,Flags(a0)

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	MainEditWindowMenus,a1
	jsr	SetMenuStrip(a6)	;Display new menus.

	move.l	#1,BOOPSIMaxHeight
	move.l	#0,BOOPSIMaxWidth
	move.l	#0,BOOPSIHorizPropVal
	move.l	#0,BOOPSIVertPropVal
	move.l	#0,CurrentHorizTop
	move.l	#0,CurrentHorizPosition
	move.l	#0,CurrentVertTop
	move.l	#0,CurrentVertPosition

	move.l	LastLinePtr,a1
	jsr	ReleaseTextBuffer	;Release old buffer memory.
	jsr	InitialiseTextBuffer	;Allocate new text buffer.

	jsr	ExtractAsciiFileContents;Copy buffer into memory.

LoadTextEngineFileDone:
	move.l	TextFileHd,d1
	jsr	CloseFile

	jsr	HideCursor
	jsr	ClearConsole
	jsr	DisplayVisibleText

	jsr	ResetCursor		;Place cursor in
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr	; top left corner.
	move.l	#0,CurrentLineOffset
	jsr	ShowCursor

	jsr	UpdateBOOPSIGadgets

OpenTextFileDone:
	jsr	UnBlockInput		;Restore input to main edit window.
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Subroutine to transfer data from disk into memory.                        *
*****************************************************************************
ExtractAsciiFileContents:
	move.l	CurrentLinePtr,a5
	move.l	a5,a4
	add.l	#tb_Text,a4

ExtractAsciiFileContentsLoop:
	move.l	#DiskFileBuffer,d2	;Buffer for file contents
	move.l	#1024,d3		;Length of read
	move.l	TextFileHd,d1
	jsr	ReadFile

	cmp.l	#0,d0
	beq	ExtractAsciiFileContentsDone	;End of file reached.

	move.l	d0,d5
	sub.l	#1,d5
	move.l	#DiskFileBuffer,a3

ExtractAsciiFileContentsLoop2:
	cmp.b	#$0a,(a3)		;CR in file.
	beq	LoadAsciiNewLine
	cmp.b	#$09,(a3)		;Sort out tabs.
	beq	LoadAsciiTabs

	cmp.l	#"Tf50",TestFileFormatBuffer
	beq	AsciiCharOK		;Don't filter a TextEngine file.

	cmp.b	#32,(a3)		;Remove control characters.
	blo	LoadAsciiUnwantedChars
	cmp.b	#128,(a3)
	blo	AsciiCharOK
	cmp.b	#160,(a3)
	blo	LoadAsciiUnwantedChars

AsciiCharOK:
	cmp.l	#240,tb_LineLength(a5)	;Line length limit reached.
	beq	LoadAsciiNewLine

	move.b	(a3),(a4)		;Copy byte from load buffer.
	add.l	#1,tb_LineLength(a5)
	add.l	#1,a4

LoadAsciiUnwantedChars:
	add.l	#1,a3
	dbra	d5,ExtractAsciiFileContentsLoop2

	jmp	ExtractAsciiFileContentsLoop

ExtractAsciiFileContentsDone:
	move.l	tb_LineLength(a5),d0
	add.l	#1,d0
	cmp.l	BOOPSIMaxWidth,d0
	ble	ExtractAsciiFileContentsOut
	move.l	d0,BOOPSIMaxWidth	;Calculate max width for BOOPSI.

ExtractAsciiFileContentsOut:
	rts

LoadAsciiNewLine:
	move.l	tb_LineLength(a5),d0
	add.l	#1,d0
	cmp.l	BOOPSIMaxWidth,d0
	ble	AsciiLoadNotLongestLine
	move.l	d0,BOOPSIMaxWidth	;Calculate max width for BOOPSI.

AsciiLoadNotLongestLine:
	jsr	CreateNewLineAfter
	beq	LoadFileMemoryError	;New line not created.

	move.l	CurrentLinePtr,a5
	move.l	a5,a4
	add.l	#tb_Text,a4

	cmp.b	#$0a,(a3)
	bne	LoadAsciiNewLineOut	;Line length exceeded.
	add.l	#1,a3			;Go on past $0a character.

LoadAsciiNewLineOut:
	dbra	d5,ExtractAsciiFileContentsLoop2
	jmp	ExtractAsciiFileContentsLoop

*****************************************************************************
* Translate tabs into spaces.                                               *
*****************************************************************************
LoadAsciiTabs:
	cmp.l	#240,tb_LineLength(a5)	;Line length limit reached.
	beq	LoadAsciiNewLine

	move.b	#" ",(a4)		;Fill up with spaces.
	add.l	#1,a4
	add.l	#1,tb_LineLength(a5)

	move.l	tb_LineLength(a5),d0
	divu	#8,d0
	mulu	#8,d0
	cmp.l	tb_LineLength(a5),d0
	bne	LoadAsciiTabs		;Tab point not reached.

	jmp	LoadAsciiUnwantedChars

*****************************************************************************
* Preview the current document in a CON: window.                            *
*****************************************************************************
PrintPreview:
	move.l	#1,PrinterCopiesCounter
	move.l	#PrintPreviewFile,PrintToStringPtr

	jsr	BlockInput
	jmp	PrintCopiesLoop

*****************************************************************************
* Print the current document.                                               *
*****************************************************************************
PrintDocument:
	jsr	GiveUserPrinterPrefs
	tst.l	d0
	beq	ProcessMenuSelectionReturn	;Cancel selected.

	move.l	NumOfCopies,PrinterCopiesCounter
	move.l	#PrintToString,PrintToStringPtr

	jsr	BlockInput

PrintCopiesLoop:
	move.b	#0,PrintBoldMode
	move.b	#0,PrintCondensedMode
	move.b	#0,PrintDSMode
	move.b	#0,PrintEnlargedMode
	move.b	#0,PrintItalicsMode
	move.b	#0,PrintSubMode
	move.b	#0,PrintSuperMode
	move.b	#0,PrintUnderlineMode

	move.l	#MODE_NEWFILE,d2
	move.l	PrintToStringPtr,d1
	jsr	OpenFile		;Open the printer file.
	move.l	d0,PrintHd
	beq	PrintDocumentError

	jsr	OpenPrintDocumentWindow
	bne	PrintDocumentWindowFail	;Not enough memory for window.

	move.l	#0,PrintDocumentLinesPrinted
	jsr	UpdatePrintPercentageGadget
	jsr	PrintDocumentRender

	move.l	PrintHd,d1
	move.l	#ResetPrinterText,d2
	move.l	#2,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	cmp.l	#-1,d0
	beq	PrintDocumentOut

	jsr	PrintInitialSetup
	jsr	PrintLeftMargin

	move.l	PrinterTopMargin,PrinterPageTop
	move.l	PrinterPageHeight,d5
	sub.l	PrinterTopMargin,d5
	sub.l	PrinterBottomMargin,d5
	move.l	d5,PrinterPageBottom

	cmp.l	#0,PrinterPageTop
	bne	PrintTopMargin

PrintTopMarginBack:
	move.l	FirstLinePtr,a5
	add.l	#tb_Text,a5
	move.l	FirstLinePtr,a4

	move.l	#0,d6

	cmp.l	#0,tb_LineLength(a4)
	beq	PrintNewLine

PrintDocumentEventLoop:
	move.l	PrintDocumentWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	PrintDocumentEventSkip	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage	;Reply to message.

	move.l	imsgClass,d0
	cmp.l	#IDCMP_GADGETUP,d0
	beq	PrintDocumentOutFF	;Gadget clicked on.
	cmp.l	#IDCMP_CLOSEWINDOW,d0
	beq	PrintDocumentOutFF	;Window closed.

	jmp	PrintDocumentEventLoop

PrintDocumentEventSkip:
	cmp.l	tb_LineLength(a4),d6
	beq	PrintNewLine

	move.l	#0,d0
	cmp.b	#$0f,(a5)
	beq	PrintCommandBack	;Skip bookmarks.

	cmp.b	#$10,(a5)
	beq	PrintBold
	cmp.b	#$11,(a5)
	beq	PrintItalic
	cmp.b	#$12,(a5)
	beq	PrintUnderline
	cmp.b	#$13,(a5)
	beq	PrintCondensed
	cmp.b	#$14,(a5)
	beq	PrintDS
	cmp.b	#$15,(a5)
	beq	PrintElite
	cmp.b	#$16,(a5)
	beq	PrintEnlarged
	cmp.b	#$17,(a5)
	beq	PrintPica
	cmp.b	#$18,(a5)
	beq	PrintSubS
	cmp.b	#$19,(a5)
	beq	PrintSuperS
	cmp.b	#$1a,(a5)
	beq	PrintPlain

	move.l	PrintHd,d1
	move.l	a5,d2
	move.l	#1,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

PrintCommandBack:
	cmp.l	#-1,d0
	beq	PrintDocumentOut

	add.l	#1,a5
	add.l	#1,d6

	jmp	PrintDocumentEventLoop

PrintDocumentOutFF:
	move.l	PrintHd,d1
	move.l	#FormFeedText,d2
	move.l	#1,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

PrintDocumentOut:
	jsr	ClosePrintDocumentWindow
PrintDocumentWindowFail:
	move.l	PrintHd,d1
	jsr	CloseFile

	sub.l	#1,PrinterCopiesCounter
	cmp.l	#0,PrinterCopiesCounter
	bne	PrintCopiesLoop

	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

PrintInitialSetup:
	move.l	PrintHd,d1
	move.l	#PlainText,d2
	move.l	#49,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	cmp.l	#0,DraftPrintMode
	bne	PrintDocumentDraft

	move.l	PrintHd,d1
	move.l	#NLQOnText,d2
	move.l	#5,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

PrintDocumentDraft:
	cmp.l	#0,PropPrintMode
	beq	PrintDocumentNotProp

	move.l	PrintHd,d1
	move.l	#PropOnText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

PrintDocumentNotProp:
	rts

PrintBold:
	cmp.b	#1,PrintBoldMode
	beq	PrintBoldOff

	move.b	#1,PrintBoldMode

	move.l	PrintHd,d1
	move.l	#BoldOnText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintBoldOff:
	move.b	#0,PrintBoldMode

	move.l	PrintHd,d1
	move.l	#BoldOffText,d2
	move.l	#5,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintItalic:
	cmp.b	#1,PrintItalicsMode
	beq	PrintItalicOff

	move.b	#1,PrintItalicsMode

	move.l	PrintHd,d1
	move.l	#ItalicsOnText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintItalicOff:
	move.b	#0,PrintItalicsMode

	move.l	PrintHd,d1
	move.l	#ItalicsOffText,d2
	move.l	#5,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintUnderline:
	cmp.b	#1,PrintUnderlineMode
	beq	PrintUnderlineOff

	move.b	#1,PrintUnderlineMode

	move.l	PrintHd,d1
	move.l	#UnderlineOnText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintUnderlineOff:
	move.b	#0,PrintUnderlineMode

	move.l	PrintHd,d1
	move.l	#UnderlineOffText,d2
	move.l	#5,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintCondensed:
	cmp.b	#1,PrintCondensedMode
	beq	PrintCondensedOff

	move.b	#1,PrintCondensedMode

	move.l	PrintHd,d1
	move.l	#CondensedOnText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintCondensedOff:
	move.b	#0,PrintCondensedMode

	move.l	PrintHd,d1
	move.l	#CondensedOffText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintDS:cmp.b	#1,PrintDSMode
	beq	PrintDSOff

	move.b	#1,PrintDSMode

	move.l	PrintHd,d1
	move.l	#DSOnText,d2
	move.l	#5,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintDSOff:
	move.b	#0,PrintDSMode

	move.l	PrintHd,d1
	move.l	#DSOffText,d2
	move.l	#5,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintElite:
	move.l	PrintHd,d1
	move.l	#EliteText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintEnlarged:
	cmp.b	#1,PrintEnlargedMode
	beq	PrintEnlargedOff

	move.b	#1,PrintEnlargedMode

	move.l	PrintHd,d1
	move.l	#EnlargedOnText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintEnlargedOff:
	move.b	#0,PrintEnlargedMode

	move.l	PrintHd,d1
	move.l	#EnlargedOffText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintPica:
	move.l	PrintHd,d1
	move.l	#PicaText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintSubS:
	cmp.b	#1,PrintSubMode
	beq	PrintSubSOff

	move.b	#1,PrintSubMode

	move.l	PrintHd,d1
	move.l	#SubOnText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintSubSOff:
	move.b	#0,PrintSubMode

	move.l	PrintHd,d1
	move.l	#SubOffText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintSuperS:
	cmp.b	#1,PrintSuperMode
	beq	PrintSuperSOff

	move.b	#1,PrintSuperMode

	move.l	PrintHd,d1
	move.l	#SuperOnText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintSuperSOff:
	move.b	#0,PrintSuperMode

	move.l	PrintHd,d1
	move.l	#SuperOffText,d2
	move.l	#4,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintPlain:
	move.b	#0,PrintBoldMode
	move.b	#0,PrintCondensedMode
	move.b	#0,PrintDSMode
	move.b	#0,PrintEnlargedMode
	move.b	#0,PrintItalicsMode
	move.b	#0,PrintSubMode
	move.b	#0,PrintSuperMode
	move.b	#0,PrintUnderlineMode

	move.l	PrintHd,d1
	move.l	#PlainText,d2
	move.l	#40,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	jmp	PrintCommandBack

PrintNewLine:
	move.l	tb_Next(a4),a4
	cmp.l	#0,a4
	beq	PrintDocumentOutFF	;End of document reached.

	jsr	UpdatePrintPercentageGadget

	move.l	a4,a5
	add.l	#tb_Text,a5

	move.l	#0,d6
	move.l	#0,d5

	cmp.l	#0,DSPrintMode
	beq	PrintLineSpacingLoop

	move.l	#1,d5
PrintLineSpacingLoop:
	move.l	PrintHd,d1
	move.l	#CarriageReturnText,d2
	move.l	#1,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	cmp.l	#-1,d0
	beq	PrintDocumentOut

	sub.l	#1,PrinterPageBottom
	cmp.l	#0,PrinterPageBottom
	beq	PrintNewPageMargins

	dbra	d5,PrintLineSpacingLoop

	jsr	PrintLeftMargin
	jmp	PrintDocumentEventLoop

PrintTopMargin:
	move.l	PrinterPageTop,d5
	sub.l	#1,d5
PrintTopMarginLoop:
	move.l	PrintHd,d1
	move.l	#CarriageReturnText,d2
	move.l	#1,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	cmp.l	#-1,d0
	beq	PrintDocumentOut

	dbra	d5,PrintTopMarginLoop

	jsr	PrintLeftMargin
	jmp	PrintTopMarginBack

UpdatePrintPercentageGadget:
	add.l	#1,PrintDocumentLinesPrinted
	move.l	PrintDocumentLinesPrinted,d0
	move.l	BOOPSIMaxHeight,d1
	cmp.l	#0,d1
	beq	UpdatePrintPercentageGadgetCont

	mulu	#100,d0
	divu	d1,d0
	move.w	d0,PrintDocumentGTags+10

UpdatePrintPercentageGadgetCont:
	move.l	PrintDocumentGadgets+4,a0
	move.l	PrintDocumentWnd,a1
	move.l	#0,a2
	move.l	#PrintDocumentGTags+4,a3
	move.l	_GadToolsBase,a6
	jsr	GT_SetGadgetAttrsA(a6)

	rts

PrintNewPageMargins:
	jsr	PrintLeftMargin

	move.l	PrinterTopMargin,PrinterPageTop
	move.l	PrinterPageHeight,d5
	sub.l	PrinterTopMargin,d5
	sub.l	PrinterBottomMargin,d5
	move.l	d5,PrinterPageBottom

	move.l	PrinterBottomMargin,d5
	add.l	PrinterTopMargin,d5

	cmp.l	#0,d5
	beq	PrintDocumentEventLoop	;No top or bottom margins.

	sub.l	#1,d5
PrintNewPageMarginsLoop:
	move.l	PrintHd,d1
	move.l	#CarriageReturnText,d2
	move.l	#1,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	cmp.l	#-1,d0
	beq	PrintDocumentOut

	dbra	d5,PrintNewPageMarginsLoop
	jsr	PrintLeftMargin

	jmp	PrintDocumentEventLoop

PrintLeftMargin:
	move.l	PrinterLeftMargin,d5
	cmp.l	#0,d5
	beq	PrintLeftMarginOut

	sub.l	#1,d5
PrintLeftMarginLoop:
	move.l	PrintHd,d1
	move.l	#LeftMarginText,d2
	move.l	#1,d3
	move.l	_DOSBase,a6
	jsr	Write(a6)

	cmp.l	#-1,d0
	beq	PrintLeftMarginOut

	dbra	d5,PrintLeftMarginLoop

PrintLeftMarginOut:
	rts

PrintDocumentError:
	jsr	ErrorBeep

	move.l	#PrintDocumentErrorRequester,a1
	move.l	#PrintDocumentErrorArgs,a3
	jsr	DisplayEasyRequester

	jsr	UnBlockInput		;Restore input to main edit window.
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Quit the program.                                                         *
*****************************************************************************
QuitTextEngine:
	jsr	BlockInput
	move.l	#QuitTextEngineRequester,a1
	jsr	DisplayEasyRequester
	tst.l	d0
	bne	Quit		;User selected 'OK'.

	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Centralise the current line.                                              *
*****************************************************************************
CentreLine:
	cmp.w	#0,TextBlockMarked
	beq	ProcessMenuSelectionReturn

	jsr	BlockInput

	move.l	TextBlockTopPtr,CurrentLinePtr
CentreLineMainLoop:
	jsr	CentreTextBlock

	cmp.l	#0,TextBlockLength
	beq	CentreLineMainLoopOut

	move.l	CurrentLinePtr,a5
	move.l	tb_Next(a5),CurrentLinePtr	;Move through the block.

	subq.l	#1,TextBlockLength
	jmp	CentreLineMainLoop

CentreLineMainLoopOut:
	jsr	DetermineLongestLine

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText	;Clear marked text block.

	move.l	CurrentLinePtr,a5
	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	CentreLineOutGotXOffset

	move.l	d6,CurrentLineOffset

CentreLineOutGotXOffset:
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

CentreTextBlock:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5

	cmp.l	#0,d5
	beq	CentreLineOut	;Line is empty.

	add.l	#tb_Text,a5
	move.l	#SpareLineBuffer,a6
	subq.l	#1,d5

CentreLineLoop:
	move.b	(a5)+,(a6)+	;Copy current line into temp buffer.
	dbra	d5,CentreLineLoop

	move.l	#SpareLineBuffer,a6
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	subq.l	#1,d5
CentreLineLoop2:
	cmp.b	#" ",(a6)	;Remove spaces at start of line.
	bne	CentreLineLoop2Out
	addq.l	#1,a6
	dbra	d5,CentreLineLoop2

	jmp	CentreLineOut	;Line only contains spaces.

CentreLineLoop2Out:
	move.l	#SpareLineBuffer,a5
	move.l	CurrentLinePtr,a4
	add.l	tb_LineLength(a4),a5

CentreLineLoop3:
	cmp.b	#" ",-(a5)	;Remove spaces at end of line.
	bne	CentreLineLoop3Out
	dbra	d5,CentreLineLoop3

CentreLineLoop3Out:
	move.l	CurrentLinePtr,a5
	add.l	#tb_Text,a5

	move.l	#119,d6
CentreLineLoop4:
	move.w	#0,(a5)+	;Clear current line.
	dbra	d6,CentreLineLoop4

	move.l	CurrentLinePtr,a5
	move.l	#0,tb_LineLength(a5)
	add.l	#tb_Text,a5

CentreLineLoop5:
	move.b	(a6)+,(a5)+	;Replace line back in buffer.

	move.l	CurrentLinePtr,a4
	addq.l	#1,tb_LineLength(a4)
	dbra	d5,CentreLineLoop5

	move.l	PrinterPageWidth,d5		;Page width.
	sub.l	PrinterLeftMargin,d5		;Left margin.
	sub.l	PrinterRightMargin,d5		;Right margin.

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d6

	cmp.l	d5,d6
	bge	CentreLineOut		;Line is too long.

	sub.l	d6,d5

	subq.l	#1,d5
	divu	#2,d5			;Number of spaces to insert.
	clr.l	d6
	move.w	d5,d6			;Remove carry from devide.

	move.l	#0,CurrentLineOffset
	move.b	#" ",Buffer
CentreLineLoop6:
	jsr	InsertCharacter
	dbra	d6,CentreLineLoop6

CentreLineOut:
	rts

*****************************************************************************
* Right justify the current line.                                           *
*****************************************************************************
RightJustifyLine:
	cmp.w	#0,TextBlockMarked
	beq	ProcessMenuSelectionReturn

	jsr	BlockInput

	move.l	TextBlockTopPtr,CurrentLinePtr
RightJustifyLineMainLoop:
	jsr	RightJustifyTextBlock

	cmp.l	#0,TextBlockLength
	beq	RightJustifyLineMainLoopOut

	move.l	CurrentLinePtr,a5
	move.l	tb_Next(a5),CurrentLinePtr	;Move through the block.

	subq.l	#1,TextBlockLength
	jmp	RightJustifyLineMainLoop

RightJustifyLineMainLoopOut:
	jsr	DetermineLongestLine

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText	;Clear marked text block.

	move.l	CurrentLinePtr,a5
	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	RightJustifyLineOutGotXOffset

	move.l	d6,CurrentLineOffset

RightJustifyLineOutGotXOffset:
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

RightJustifyTextBlock:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5

	cmp.l	#0,d5
	beq	RightJustifyLineOut	;Line is empty.

	add.l	#tb_Text,a5
	move.l	#SpareLineBuffer,a6
	subq.l	#1,d5

RightJustifyLineLoop:
	move.b	(a5)+,(a6)+	;Copy current line into temp buffer.
	dbra	d5,RightJustifyLineLoop

	move.l	#SpareLineBuffer,a6
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	subq.l	#1,d5
RightJustifyLineLoop2:
	cmp.b	#" ",(a6)	;Remove spaces at start of line.
	bne	RightJustifyLineLoop2Out
	addq.l	#1,a6
	dbra	d5,RightJustifyLineLoop2

	jmp	RightJustifyLineOut	;Line only contains spaces.

RightJustifyLineLoop2Out:
	move.l	#SpareLineBuffer,a5
	move.l	CurrentLinePtr,a4
	add.l	tb_LineLength(a4),a5

RightJustifyLineLoop3:
	cmp.b	#" ",-(a5)	;Remove spaces at end of line.
	bne	RightJustifyLineLoop3Out
	dbra	d5,RightJustifyLineLoop3

RightJustifyLineLoop3Out:
	move.l	CurrentLinePtr,a5
	add.l	#tb_Text,a5

	move.l	#119,d6
RightJustifyLineLoop4:
	move.w	#0,(a5)+	;Clear current line.
	dbra	d6,RightJustifyLineLoop4

	move.l	CurrentLinePtr,a5
	move.l	#0,tb_LineLength(a5)
	add.l	#tb_Text,a5

RightJustifyLineLoop5:
	move.b	(a6)+,(a5)+	;Replace line back in buffer.

	move.l	CurrentLinePtr,a4
	addq.l	#1,tb_LineLength(a4)
	dbra	d5,RightJustifyLineLoop5

	move.l	PrinterPageWidth,d5		;Page width.
	sub.l	PrinterLeftMargin,d5		;Left margin.
	sub.l	PrinterRightMargin,d5		;Right margin.

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d6

	cmp.l	d5,d6
	bge	RightJustifyLineOut		;Line is too long.

	sub.l	d6,d5

	subq.l	#1,d5
	move.l	d5,d6

	move.l	#0,CurrentLineOffset
	move.b	#" ",Buffer
RightJustifyLineLoop6:
	jsr	InsertCharacter
	dbra	d6,RightJustifyLineLoop6

RightJustifyLineOut:
	rts

*****************************************************************************
* Left justify the current line.                                            *
*****************************************************************************
LeftJustifyLine:
	cmp.w	#0,TextBlockMarked
	beq	ProcessMenuSelectionReturn

	jsr	BlockInput

	move.l	TextBlockTopPtr,CurrentLinePtr
LeftJustifyLineMainLoop:
	jsr	LeftJustifyTextBlock

	cmp.l	#0,TextBlockLength
	beq	LeftJustifyLineMainLoopOut

	move.l	CurrentLinePtr,a5
	move.l	tb_Next(a5),CurrentLinePtr	;Move through the block.

	subq.l	#1,TextBlockLength
	jmp	LeftJustifyLineMainLoop

LeftJustifyLineMainLoopOut:
	jsr	DetermineLongestLine

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText	;Clear marked text block.

	move.l	CurrentLinePtr,a5
	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	LeftJustifyLineOutGotXOffset

	move.l	d6,CurrentLineOffset

LeftJustifyLineOutGotXOffset:
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

LeftJustifyTextBlock:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5

	cmp.l	#0,d5
	beq	LeftJustifyLineOut	;Line is empty.

	add.l	#tb_Text,a5
	move.l	#SpareLineBuffer,a6
	subq.l	#1,d5

LeftJustifyLineLoop:
	move.b	(a5)+,(a6)+	;Copy current line into temp buffer.
	dbra	d5,LeftJustifyLineLoop

	move.l	#SpareLineBuffer,a6
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	subq.l	#1,d5
LeftJustifyLineLoop2:
	cmp.b	#" ",(a6)	;Remove spaces at start of line.
	bne	LeftJustifyLineLoop2Out
	addq.l	#1,a6
	dbra	d5,LeftJustifyLineLoop2

	jmp	LeftJustifyLineOut	;Line only contains spaces.

LeftJustifyLineLoop2Out:
	move.l	#SpareLineBuffer,a5
	move.l	CurrentLinePtr,a4
	add.l	tb_LineLength(a4),a5

LeftJustifyLineLoop3:
	cmp.b	#" ",-(a5)	;Remove spaces at end of line.
	bne	LeftJustifyLineLoop3Out
	dbra	d5,LeftJustifyLineLoop3

LeftJustifyLineLoop3Out:
	move.l	CurrentLinePtr,a5
	add.l	#tb_Text,a5

	move.l	#119,d6
LeftJustifyLineLoop4:
	move.w	#0,(a5)+	;Clear current line.
	dbra	d6,LeftJustifyLineLoop4

	move.l	CurrentLinePtr,a5
	move.l	#0,tb_LineLength(a5)
	add.l	#tb_Text,a5

LeftJustifyLineLoop5:
	move.b	(a6)+,(a5)+	;Replace line back in buffer.

	move.l	CurrentLinePtr,a4
	addq.l	#1,tb_LineLength(a4)
	dbra	d5,LeftJustifyLineLoop5

LeftJustifyLineOut:
	rts

*****************************************************************************
* Flush justify the current line.                                           *
*****************************************************************************
FlushJustifyLine:
	cmp.w	#0,TextBlockMarked
	beq	ProcessMenuSelectionReturn

	jsr	BlockInput

	move.l	TextBlockTopPtr,CurrentLinePtr
FlushJustifyLineMainLoop:
	jsr	FlushJustifyTextBlock
	neg.w	FlushJustifyDirection	;Switch directions.

	cmp.l	#0,TextBlockLength
	beq	FlushJustifyLineMainLoopOut

	move.l	CurrentLinePtr,a5
	move.l	tb_Next(a5),CurrentLinePtr	;Move through the block.

	subq.l	#1,TextBlockLength
	jmp	FlushJustifyLineMainLoop

FlushJustifyLineMainLoopOut:
	jsr	DetermineLongestLine

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText	;Clear marked text block.

	move.l	CurrentLinePtr,a5
	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	FlushJustifyLineOutGotXOffset

	move.l	d6,CurrentLineOffset

FlushJustifyLineOutGotXOffset:
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

FlushJustifyTextBlock:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5

	cmp.l	#0,d5
	beq	FlushJustifyOut		;Line is empty.

	add.l	#tb_Text,a5
	move.l	#SpareLineBuffer,a6
	subq.l	#1,d5

FlushJustifyLineLoop:
	move.b	(a5)+,(a6)+	;Copy current line into temp buffer.
	dbra	d5,FlushJustifyLineLoop

	move.l	#SpareLineBuffer,a6
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	subq.l	#1,d5
FlushJustifyLineLoop2:
	cmp.b	#" ",(a6)	;Remove spaces at start of line.
	bne	FlushJustifyLineLoop2Out
	addq.l	#1,a6
	dbra	d5,FlushJustifyLineLoop2

	jmp	FlushJustifyOut		;Line only contains spaces.

FlushJustifyLineLoop2Out:
	move.l	#SpareLineBuffer,a5
	move.l	CurrentLinePtr,a4
	add.l	tb_LineLength(a4),a5

FlushJustifyLineLoop3:
	cmp.b	#" ",-(a5)	;Remove spaces at end of line.
	bne	FlushJustifyLineLoop3Out
	dbra	d5,FlushJustifyLineLoop3

FlushJustifyLineLoop3Out:
	move.l	CurrentLinePtr,a5
	add.l	#tb_Text,a5

	move.l	#119,d6
FlushJustifyLineLoop4:
	move.w	#0,(a5)+	;Clear current line.
	dbra	d6,FlushJustifyLineLoop4

	move.l	CurrentLinePtr,a5
	move.l	#0,tb_LineLength(a5)
	add.l	#tb_Text,a5

FlushJustifyLineLoop5:
	move.b	(a6)+,(a5)+	;Replace line back in buffer.

	move.l	CurrentLinePtr,a4
	addq.l	#1,tb_LineLength(a4)
	dbra	d5,FlushJustifyLineLoop5

	cmp.w	#1,FlushJustifyDirection
	beq	FlushJustifyRight

FlushJustifyLeft:
	move.l	PrinterPageWidth,d6		;Page width.
	sub.l	PrinterLeftMargin,d6		;Left margin.
	sub.l	PrinterRightMargin,d6		;Right margin.

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5

	cmp.l	d6,d5
	bge	FlushJustifyOut			;Line is too long.

	sub.l	d5,d6				;No. of spaces to insert.

	move.l	#0,CurrentLineOffset
	move.b	#" ",Buffer
	moveq.l	#0,d7				;'No spaces' indicator.
FlushJustifyLeftLoop6:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	cmp.l	CurrentLineOffset,d5
	beq	FlushJustifyLeftOut		;EOL reached.

	add.l	#tb_Text,a5
	add.l	CurrentLineOffset,a5

	addq.l	#1,CurrentLineOffset

	cmp.b	#" ",(a5)
	beq	FlushJustifyLeftLoop6Out	;Found next space.

	jmp	FlushJustifyLeftLoop6

FlushJustifyLeftLoop6Out:
	move.l	#-1,d7				;Indicate there are spaces.
	jsr	InsertCharacter			;Insert padding space.
	subq.l	#1,d6
	cmp.l	#0,d6
	beq	FlushJustifyLeftOut		;All spaces inserted.

FlushJustifyLeftLoop7:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	cmp.l	CurrentLineOffset,d5
	beq	FlushJustifyLeftOut		;EOL reached.

	add.l	#tb_Text,a5
	add.l	CurrentLineOffset,a5

	addq.l	#1,CurrentLineOffset

	cmp.b	#" ",(a5)
	bne	FlushJustifyLeftLoop6		;Find next space.

	jmp	FlushJustifyLeftLoop7

FlushJustifyLeftOut:
	cmp.l	#0,d7				;Line had no spaces.
	beq	FlushJustifyOut
	move.l	#0,CurrentLineOffset
	cmp.l	#0,d6
	bne	FlushJustifyLeftLoop6		;Go round again.
	rts

FlushJustifyRight:
	move.l	PrinterPageWidth,d6		;Page width.
	sub.l	PrinterLeftMargin,d6		;Left margin.
	sub.l	PrinterRightMargin,d6		;Right margin.

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5

	cmp.l	d6,d5
	bge	FlushJustifyOut			;Line is too long.

	sub.l	d5,d6				;No. of spaces to insert.

	move.l	d5,CurrentLineOffset
	move.b	#" ",Buffer
	moveq.l	#0,d7				;'No spaces' indicator.
FlushJustifyRightLoop6:
	cmp.l	#0,CurrentLineOffset
	beq	FlushJustifyRightOut		;EOL reached.

	move.l	CurrentLinePtr,a5
	add.l	#tb_Text,a5
	add.l	CurrentLineOffset,a5

	cmp.b	#" ",(a5)
	beq	FlushJustifyRightLoop6Out	;Found next space.

	subq.l	#1,CurrentLineOffset
	jmp	FlushJustifyRightLoop6

FlushJustifyRightLoop6Out:
	move.l	#-1,d7				;Indicate there are spaces.
	jsr	InsertCharacter			;Insert padding space.

	subq.l	#1,d6
	cmp.l	#0,d6
	beq	FlushJustifyRightOut		;All spaces inserted.

	subq.l	#1,CurrentLineOffset

FlushJustifyRightLoop7:
	cmp.l	#0,CurrentLineOffset
	beq	FlushJustifyRightOut		;EOL reached.

	move.l	CurrentLinePtr,a5
	add.l	#tb_Text,a5
	add.l	CurrentLineOffset,a5

	subq.l	#1,CurrentLineOffset

	cmp.b	#" ",(a5)
	bne	FlushJustifyRightLoop6		;Find next space.

	jmp	FlushJustifyRightLoop7

FlushJustifyRightOut:
	cmp.l	#0,d7				;Line had no spaces.
	beq	FlushJustifyOut

	move.l	PrinterPageWidth,d5		;Page width.
	sub.l	PrinterLeftMargin,d5		;Left margin.
	sub.l	PrinterRightMargin,d5		;Right margin.
	move.l	d5,CurrentLineOffset

	cmp.l	#0,d6
	bne	FlushJustifyRightLoop6		;Go round again.
	rts

FlushJustifyOut:
	rts

*****************************************************************************
* Go to end of file.                                                        *
*****************************************************************************
EndOfFile:
	jsr	BlockInput
	move.w	#0,TextBlockMarked

	move.l	BOOPSIMaxHeight,d5
	cmp.l	BOOPSIVertView,d5
	ble	EndOfShortFile

	sub.l	BOOPSIVertView,d5

	move.l	d5,BOOPSIVertPropVal
	jsr	UpdateBOOPSIVertProp	;Update vert prop position.
	jsr	GetBOOPSIVertSliderPosition

	move.l	#0,BOOPSIHorizPropVal
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	move.l	LastLinePtr,CurrentLinePtr

	jsr	ResetCursor
	move.w	#0,MouseXCoord
	move.w	MainWindowHeightChars,MouseYCoord
	sub.w	#1,MouseYCoord

	move.l	#0,CurrentLineOffset
	jsr	HideCursor
	jsr	DisplayVisibleText

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	jsr	ShowCursor
	jsr	DrawPrinterBorders
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

EndOfShortFile:
	move.l	#0,BOOPSIVertPropVal
	jsr	UpdateBOOPSIVertProp	;Update vert prop position.
	jsr	GetBOOPSIVertSliderPosition

	move.l	#0,BOOPSIHorizPropVal
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	move.l	LastLinePtr,CurrentLinePtr

	jsr	ResetCursor
	move.w	#0,MouseXCoord

	move.l	BOOPSIMaxHeight,d5
	move.w	d5,MouseYCoord
	sub.w	#1,MouseYCoord

	move.l	#0,CurrentLineOffset
	jsr	HideCursor
	jsr	DisplayVisibleText

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	jsr	ShowCursor
	jsr	DrawPrinterBorders
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Go to top of file.                                                        *
*****************************************************************************
TopOfFile:
	jsr	BlockInput
	move.w	#0,TextBlockMarked

	move.l	#0,BOOPSIVertPropVal
	jsr	UpdateBOOPSIVertProp	;Update vert prop position.
	jsr	GetBOOPSIVertSliderPosition

	move.l	#0,BOOPSIHorizPropVal
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	move.l	FirstLinePtr,CurrentLinePtr

	jsr	ResetCursor
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	#0,CurrentLineOffset
	jsr	HideCursor
	jsr	DisplayVisibleText
	jsr	ResetCursor
	jsr	ShowCursor
	jsr	DrawPrinterBorders
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Routines to insert printer control codes into document.                   *
*****************************************************************************
InsertBoldCharacter:
	cmp.w	#1,TextBlockMarked
	bne	InsertBoldNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

InsertBoldNoCurrentBlock:
	move.b	#$10,Buffer
	move.w	WordWrapMode,TempWordWrapMode	;Store word wrap mode.
	move.w	#0,WordWrapMode			;Switch off word wrap.
	jsr	InsertKeyboardTextValidChar	;Put character in text buffer.
	move.w	TempWordWrapMode,WordWrapMode	;Restore word wrap mode.
	jmp	ProcessMenuSelectionReturn

InsertItalicCharacter:
	cmp.w	#1,TextBlockMarked
	bne	InsertItalicNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

InsertItalicNoCurrentBlock:
	move.b	#$11,Buffer
	move.w	WordWrapMode,TempWordWrapMode	;Store word wrap mode.
	move.w	#0,WordWrapMode			;Switch off word wrap.
	jsr	InsertKeyboardTextValidChar	;Put character in text buffer.
	move.w	TempWordWrapMode,WordWrapMode	;Restore word wrap mode.
	jmp	ProcessMenuSelectionReturn

InsertUnderlineCharacter:
	cmp.w	#1,TextBlockMarked
	bne	InsertUnderlineNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

InsertUnderlineNoCurrentBlock:
	move.b	#$12,Buffer
	move.w	WordWrapMode,TempWordWrapMode	;Store word wrap mode.
	move.w	#0,WordWrapMode			;Switch off word wrap.
	jsr	InsertKeyboardTextValidChar	;Put character in text buffer.
	move.w	TempWordWrapMode,WordWrapMode	;Restore word wrap mode.
	jmp	ProcessMenuSelectionReturn

InsertCondensedCharacter:
	cmp.w	#1,TextBlockMarked
	bne	InsertCondensedNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

InsertCondensedNoCurrentBlock:
	move.b	#$13,Buffer
	move.w	WordWrapMode,TempWordWrapMode	;Store word wrap mode.
	move.w	#0,WordWrapMode			;Switch off word wrap.
	jsr	InsertKeyboardTextValidChar	;Put character in text buffer.
	move.w	TempWordWrapMode,WordWrapMode	;Restore word wrap mode.
	jmp	ProcessMenuSelectionReturn

InsertDStrikeCharacter:
	cmp.w	#1,TextBlockMarked
	bne	InsertDStrikeNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

InsertDStrikeNoCurrentBlock:
	move.b	#$14,Buffer
	move.w	WordWrapMode,TempWordWrapMode	;Store word wrap mode.
	move.w	#0,WordWrapMode			;Switch off word wrap.
	jsr	InsertKeyboardTextValidChar	;Put character in text buffer.
	move.w	TempWordWrapMode,WordWrapMode	;Restore word wrap mode.
	jmp	ProcessMenuSelectionReturn

InsertEliteCharacter:
	cmp.w	#1,TextBlockMarked
	bne	InsertEliteNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

InsertEliteNoCurrentBlock:
	move.b	#$15,Buffer
	move.w	WordWrapMode,TempWordWrapMode	;Store word wrap mode.
	move.w	#0,WordWrapMode			;Switch off word wrap.
	jsr	InsertKeyboardTextValidChar	;Put character in text buffer.
	move.w	TempWordWrapMode,WordWrapMode	;Restore word wrap mode.
	jmp	ProcessMenuSelectionReturn

InsertEnlargedCharacter:
	cmp.w	#1,TextBlockMarked
	bne	InsertEnlargedNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

InsertEnlargedNoCurrentBlock:
	move.b	#$16,Buffer
	move.w	WordWrapMode,TempWordWrapMode	;Store word wrap mode.
	move.w	#0,WordWrapMode			;Switch off word wrap.
	jsr	InsertKeyboardTextValidChar	;Put character in text buffer.
	move.w	TempWordWrapMode,WordWrapMode	;Restore word wrap mode.
	jmp	ProcessMenuSelectionReturn

InsertPicaCharacter:
	cmp.w	#1,TextBlockMarked
	bne	InsertPicaNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

InsertPicaNoCurrentBlock:
	move.b	#$17,Buffer
	move.w	WordWrapMode,TempWordWrapMode	;Store word wrap mode.
	move.w	#0,WordWrapMode			;Switch off word wrap.
	jsr	InsertKeyboardTextValidChar	;Put character in text buffer.
	move.w	TempWordWrapMode,WordWrapMode	;Restore word wrap mode.
	jmp	ProcessMenuSelectionReturn

InsertSubSCharacter:
	cmp.w	#1,TextBlockMarked
	bne	InsertSubSNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

InsertSubSNoCurrentBlock:
	move.b	#$18,Buffer
	move.w	WordWrapMode,TempWordWrapMode	;Store word wrap mode.
	move.w	#0,WordWrapMode			;Switch off word wrap.
	jsr	InsertKeyboardTextValidChar	;Put character in text buffer.
	move.w	TempWordWrapMode,WordWrapMode	;Restore word wrap mode.
	jmp	ProcessMenuSelectionReturn

InsertSuperSCharacter:
	cmp.w	#1,TextBlockMarked
	bne	InsertSuperSNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

InsertSuperSNoCurrentBlock:
	move.b	#$19,Buffer
	move.w	WordWrapMode,TempWordWrapMode	;Store word wrap mode.
	move.w	#0,WordWrapMode			;Switch off word wrap.
	jsr	InsertKeyboardTextValidChar	;Put character in text buffer.
	move.w	TempWordWrapMode,WordWrapMode	;Restore word wrap mode.
	jmp	ProcessMenuSelectionReturn

InsertPlainCharacter:
	cmp.w	#1,TextBlockMarked
	bne	InsertPlainNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText

InsertPlainNoCurrentBlock:
	move.b	#$1a,Buffer
	move.w	WordWrapMode,TempWordWrapMode	;Store word wrap mode.
	move.w	#0,WordWrapMode			;Switch off word wrap.
	jsr	InsertKeyboardTextValidChar	;Put character in text buffer.
	move.w	TempWordWrapMode,WordWrapMode	;Restore word wrap mode.
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Count the words, lines, and pages in the document.                        *
*****************************************************************************
WordCount:
	jsr	BlockInput

	move.l	FirstLinePtr,a3
	move.l	#1,NumberOfWords

	move.l	tb_LineLength(a3),d5
	cmp.l	#0,d5
	beq	WordCountNextLine

	add.l	#tb_Text,a3
	move.l	a3,a2
	sub.l	#tb_Text,a3

	sub.l	#1,d5
	move.b	(a2)+,WordCountBuffer2

WordCountLoop:
	move.b	WordCountBuffer2,WordCountBuffer
	move.b	(a2)+,WordCountBuffer2

	cmp.b	#$2f,WordCountBuffer
	bhi	WordCountCouldBeNumber
WordCountCouldBeNumberBack:
	cmp.b	#$40,WordCountBuffer
	bhi	WordCountCouldBeCapital
WordCountCouldBeCapitalBack:
	cmp.b	#$60,WordCountBuffer
	bhi	WordCountCouldBeSmall
WordCountCouldBeSmallBack:
	cmp.b	#191,WordCountBuffer
	bhi	WordCountLoopCont	;Accented characters.

	jmp	WordCountAddWord

WordCountLoopCont:
	dbra	d5,WordCountLoop

WordCountNextLine:
	move.l	tb_Next(a3),a3
	cmp.l	#0,a3
	beq	WordCountOut
	move.l	tb_LineLength(a3),d5
	cmp.l	#0,d5
	beq	WordCountNextLine

	add.l	#tb_Text,a3
	move.l	a3,a2
	sub.l	#tb_Text,a3

	move.b	(a2)+,WordCountBuffer2

	jmp	WordCountAddWord

WordCountCouldBeNumber:
	cmp.b	#$3a,WordCountBuffer
	blo	WordCountLoopCont
	jmp	WordCountCouldBeNumberBack

WordCountCouldBeCapital:
	cmp.b	#$5b,WordCountBuffer
	blo	WordCountLoopCont
	jmp	WordCountCouldBeCapitalBack

WordCountCouldBeSmall:
	cmp.b	#$7b,WordCountBuffer
	blo	WordCountLoopCont
	jmp	WordCountCouldBeSmallBack

WordCountAddWord:
	cmp.b	#$2f,WordCountBuffer2
	bhi	WordCountCouldBeNumber2
WordCountCouldBeNumber2Back:
	cmp.b	#$40,WordCountBuffer2
	bhi	WordCountCouldBeCapital2
WordCountCouldBeCapital2Back:
	cmp.b	#$60,WordCountBuffer2
	bhi	WordCountCouldBeSmall2
WordCountCouldBeSmall2Back:
	cmp.b	#191,WordCountBuffer
	bhi	AddCouldBeWord		;Accented characters.
	jmp	WordCountLoopCont

AddCouldBeWord:
	add.l	#1,NumberOfWords
	jmp	WordCountLoopCont

WordCountCouldBeNumber2:
	cmp.b	#$3a,WordCountBuffer2
	blo	AddCouldBeWord
	jmp	WordCountCouldBeNumber2Back

WordCountCouldBeCapital2:
	cmp.b	#$5b,WordCountBuffer2
	blo	AddCouldBeWord
	jmp	WordCountCouldBeCapital2Back

WordCountCouldBeSmall2:
	cmp.b	#$7b,WordCountBuffer2
	blo	AddCouldBeWord
	jmp	WordCountCouldBeSmall2Back

WordCountOut:
	move.l	BOOPSIMaxHeight,NumberOfLines

	move.l	PrinterPageHeight,d5		;Get page height.
	move.l	PrinterTopMargin,d4		;Get top margin.
	sub.l	d4,d5
	move.l	PrinterBottomMargin,d4		;Get bottom margin
	sub.l	d4,d5			;d4 contains real page height.

	cmp.l	#0,d5
	beq	CantCountPages

	move.l	NumberOfLines,d4
	sub.l	#1,d4

	cmp.l	#0,DSPrintMode
	beq	CountDoubleSpacePages

	add.l	#1,d5
	divu	#2,d5
CountDoubleSpacePages:
	divu	d5,d4
	add.w	#1,d4

	clr.l	d5
	move.w	d4,d5
	move.l	d5,NumberOfPages

CantCountPages:
	move.l	#WordCountRequester,a1
	move.l	#NumberOfWords,a3
	jsr	DisplayEasyRequester

	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Get function keys prefs from the user.                                    *
*****************************************************************************
FunctionKeysPrefs:
	jsr	BlockInput
	jsr	OpenFunctionKeysWindow
	bne	FunctionKeysPrefsFail		;Not enough memory.
	jsr	FunctionKeysRender

	move.l	#FunctionKeysGadgets,a0
	move.l	8(a0),a0
	move.l	FunctionKeysWnd,a1
	move.l	#0,a2
	move.l	_IntuitionBase,a6
	jsr	ActivateGadget(a6)		;Activate F1 gadget.

FunctionKeysPrefsEventLoop:
	move.l	FunctionKeysWnd,a0
	move.l	UserPort(a0),a0
	jsr	WaitForPort		;Wait for a message.

	move.l	FunctionKeysWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	FunctionKeysPrefsEventLoop	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage	;Reply to message.

	move.l	imsgClass,d0
	cmp.l	#IDCMP_GADGETUP,d0
	beq	ProcessFunctionKeysPrefsGadgets	;Gadget clicked on.
	cmp.l	#IDCMP_CLOSEWINDOW,d0
	beq	FunctionKeysPrefsCancel		;Window closed.

	jmp	FunctionKeysPrefsEventLoop

ProcessFunctionKeysPrefsGadgets:
	move.l	imsg,a0
	move.l	IAddress(a0),a0
	move.w	GadgetID(a0),d0

	cmp.b	#GD_FuncKeysOKGad,d0
	beq	FunctionKeysPrefsOK
	cmp.b	#GD_FuncKeysCancelGad,d0
	beq	FunctionKeysPrefsCancel

	jmp	FunctionKeysPrefsEventLoop

FunctionKeysPrefsOK:
	move.l	#FunctionKeysGadgets,a4
	add.l	#8,a4
	move.l	#F1String,a6

	move.l	#9,d4
UpdateFunctionKeys:
	move.l	(a4),a5
	move.l	SpecialInfo(a5),a5
	move.l	(a5),a5

	move.l	#255,d5			;F1 string.
UpdateFLoop:
	move.b	(a5)+,(a6)+
	dbra	d5,UpdateFLoop

	add.l	#4,a4
	add.l	#1,a6
	dbra	d4,UpdateFunctionKeys

FunctionKeysPrefsCancel:
	jsr	CloseFunctionKeysWindow

FunctionKeysPrefsFail:
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Get colour prefs from the user.                                           *
*****************************************************************************
ColourPrefs:
	move.l	#ColoursGTags,a5
	move.w	TextColour,22(a5)
	move.w	FieldColour,58(a5)

	move.w	TextColour,TempTextColour
	move.w	FieldColour,TempFieldColour

	jsr	BlockInput
	jsr	OpenColoursWindow
	bne	ColourPrefsFail		;Not enough memory.
	jsr	ColoursRender

ColourPrefsEventLoop:
	move.l	ColoursWnd,a0
	move.l	UserPort(a0),a0
	jsr	WaitForPort		;Wait for a message.

	move.l	ColoursWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	ColourPrefsEventLoop	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage	;Reply to message.

	move.l	imsgClass,d0
	cmp.l	#IDCMP_GADGETUP,d0
	beq	ProcessColoursPrefsGadgets	;Gadget clicked on.
	cmp.l	#IDCMP_CLOSEWINDOW,d0
	beq	ColourPrefsCancel		;Window closed.

	jmp	ColourPrefsEventLoop

ProcessColoursPrefsGadgets:
	move.l	imsg,a0
	move.l	IAddress(a0),a0
	move.w	GadgetID(a0),d0

	cmp.b	#GD_ColoursTextGad,d0
	beq	ChangeTextColour
	cmp.b	#GD_ColoursFieldGad,d0
	beq	ChangeFieldColour
	cmp.b	#GD_ColoursOKGad,d0
	beq	ColourPrefsOK
	cmp.b	#GD_ColoursCancelGad,d0
	beq	ColourPrefsCancel

	jmp	ColourPrefsEventLoop

ChangeTextColour:
	move.w	imsgCode,TempTextColour
	jmp	ColourPrefsEventLoop

ChangeFieldColour:
	move.w	imsgCode,TempFieldColour
	jmp	ColourPrefsEventLoop

ColourPrefsOK:
	move.w	#0,TextBlockMarked

	move.w	TempTextColour,TextColour
	move.w	TempFieldColour,FieldColour

	move.l	#InitConsoleText,a5	;Change console colours.
	add.l	#4,a5			;Text colour

	move.w	TextColour,d5
	add.b	#$30,d5
	move.b	d5,(a5)			;Insert text colour.

	add.l	#3,a5

	move.w	FieldColour,d5
	add.b	#$30,d5
	move.b	d5,(a5)			;Insert field colour.

	add.l	#3,a5

	move.w	FieldColour,d5
	add.b	#$30,d5
	move.b	d5,(a5)			;Insert field colour.

	jsr	HideCursor
	jsr	ClearConsole
	jsr	RefreshVisibleText

ColourPrefsCancel:
	jsr	CloseColoursWindow

ColourPrefsFail:
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Get printer preferences from user.                                        *
*****************************************************************************
PrinterPrefs:
	jsr	GiveUserPrinterPrefs
	jmp	ProcessMenuSelectionReturn

GiveUserPrinterPrefs:
	jsr	BlockInput
	jsr	OpenPrinterPrefsWindow
	bne	PrinterPrefsFail	;Not enough memory.
	jsr	PrinterPrefsRender

	move.l	#PrinterPrefsGadgets,a0
	move.l	20(a0),a0
	move.l	PrinterPrefsWnd,a1
	move.l	#0,a2
	move.l	_IntuitionBase,a6
	jsr	ActivateGadget(a6)		;Activate top margin gadget.

PrinterPrefsEventLoop:
	move.l	PrinterPrefsWnd,a0
	move.l	UserPort(a0),a0
	jsr	WaitForPort		;Wait for a message.

	move.l	PrinterPrefsWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	PrinterPrefsEventLoop	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage	;Reply to message.

	move.l	imsgClass,d0
	cmp.l	#IDCMP_GADGETUP,d0
	beq	ProcessPrinterPrefsGadgets	;Gadget clicked on.
	cmp.l	#IDCMP_CLOSEWINDOW,d0
	beq	PrinterPrefsCancel		;Window closed.

	jmp	PrinterPrefsEventLoop

ProcessPrinterPrefsGadgets:
	move.l	imsg,a0
	move.l	IAddress(a0),a0
	move.w	GadgetID(a0),d0

	cmp.b	#GD_PPOKButton,d0
	beq	PrinterPrefsOK
	cmp.b	#GD_PPCancelButton,d0
	beq	PrinterPrefsCancel

	jmp	PrinterPrefsEventLoop

PrinterPrefsOK:
	move.w	#0,TextBlockMarked

	move.l	#PrinterPrefsGTags,a0
	move.l	#PrinterPrefsGadgets,a5
	move.l	28(a5),a5
	move.l	SpecialInfo(a5),a5
	move.l	LongInt(a5),d5
	move.l	d5,88(a0)		;Page length.
	move.l	d5,PrinterPageHeight

	move.l	d5,d4

	move.l	#PrinterPrefsGadgets,a5
	move.l	20(a5),a5
	move.l	SpecialInfo(a5),a5
	move.l	LongInt(a5),d5
	move.l	d5,48(a0)		;Top margin.
	move.l	d5,PrinterTopMargin

	sub.l	d5,d4

	move.l	#PrinterPrefsGadgets,a5
	move.l	24(a5),a5
	move.l	SpecialInfo(a5),a5
	move.l	LongInt(a5),d5
	move.l	d5,68(a0)		;Bottom margin.
	move.l	d5,PrinterBottomMargin

	sub.l	d5,d4			;d4 contains page length.

	move.l	#PrinterPrefsGadgets,a5
	move.l	40(a5),a5
	move.l	SpecialInfo(a5),a5
	move.l	LongInt(a5),d5
	move.l	d5,148(a0)		;Page width.
	move.l	d5,PrinterPageWidth

	move.l	d5,d6

	move.l	#PrinterPrefsGadgets,a5
	move.l	32(a5),a5
	move.l	SpecialInfo(a5),a5
	move.l	LongInt(a5),d5
	move.l	d5,108(a0)		;Left margin.
	move.l	d5,PrinterLeftMargin

	sub.l	d5,d6

	move.l	#PrinterPrefsGadgets,a5
	move.l	36(a5),a5
	move.l	SpecialInfo(a5),a5
	move.l	LongInt(a5),d5
	move.l	d5,128(a0)		;Right margin.
	move.l	d5,PrinterRightMargin

	sub.l	d5,d6			;d6 contains page width.
	jsr	CheckPageDimensions

	move.l	#PrinterPrefsGadgets,a5
	move.l	48(a5),a5
	move.l	SpecialInfo(a5),a5
	move.l	LongInt(a5),d5

	cmp.l	#1,d5
	bge	PrinterPrefsNumCopiesOK

	move.l	#1,d5

PrinterPrefsNumCopiesOK:
	move.l	d5,188(a0)		;Num of copies.
	move.l	d5,NumOfCopies

	move.l	#PrinterPrefsGadgets,a5
	move.l	44(a5),a5
	move.l	SpecialInfo(a5),a5
	move.l	(a5),a5

	move.l	#PrintToString,a6

	move.l	#255,d5			;Print to string.
UpdatePrintToLoop:
	move.b	(a5)+,(a6)+
	dbra	d5,UpdatePrintToLoop

	move.l	#0,DraftPrintMode
	move.l	#PrinterPrefsGadgets,a5
	move.l	8(a5),a5
	move.l	Flags(a5),d5
	and.l	GFLG_SELECTED,d5
	lsr.l	#7,d5
	move.l	d5,12(a0)		;Draft print mode.
	move.l	d5,DraftPrintMode

	move.l	#0,PropPrintMode
	move.l	#PrinterPrefsGadgets,a5
	move.l	12(a5),a5
	move.l	Flags(a5),d5
	and.l	GFLG_SELECTED,d5
	lsr.l	#7,d5
	move.l	d5,24(a0)		;Proportional print mode.
	move.l	d5,PropPrintMode

	move.l	#0,DSPrintMode
	move.l	#PrinterPrefsGadgets,a5
	move.l	16(a5),a5
	move.l	Flags(a5),d5
	and.l	GFLG_SELECTED,d5
	lsr.l	#7,d5
	move.l	d5,36(a0)		;Double space mode.
	move.l	d5,DSPrintMode

	jsr	RefreshVisibleText
	jsr	ClosePrinterPrefsWindow
	jsr	UnBlockInput

	move.l	#-1,d0			;Indicate 'OK' selected.
	rts

PrinterPrefsCancel:
	jsr	ClosePrinterPrefsWindow

PrinterPrefsFail:
	jsr	UnBlockInput
	clr.l	d0
	rts

CheckPageDimensions:
	cmp.l	#2,d4
	bge	PageLengthOK

	move.l	#PrinterPrefsGTags,a0
	move.l	#0,48(a0)		;Top margin.
	move.l	#0,PrinterTopMargin

	move.l	#0,68(a0)		;Bottom margin.
	move.l	#0,PrinterBottomMargin

	move.l	#2,88(a0)		;Page length.
	move.l	#2,PrinterPageHeight

PageLengthOK:
	cmp.l	#5,d6
	bge	PageWidthOKish

	move.l	#PrinterPrefsGTags,a0

	move.l	#0,108(a0)		;Left margin.
	move.l	#0,PrinterLeftMargin

	move.l	#0,128(a0)		;Right margin.
	move.l	#0,PrinterRightMargin

	move.l	#5,148(a0)		;Page width.
	move.l	#5,PrinterPageWidth

PageWidthOKish:
	cmp.l	#240,d6
	ble	PageWidthOK

	move.l	#PrinterPrefsGTags,a0

	move.l	#0,108(a0)		;Left margin.
	move.l	#0,PrinterLeftMargin

	move.l	#0,128(a0)		;Right margin.
	move.l	#0,PrinterRightMargin

	move.l	#240,148(a0)		;Page width.
	move.l	#240,PrinterPageWidth

PageWidthOK:
	rts

*****************************************************************************
* Clear the current document and open new one.                              *
*****************************************************************************
NewDocument:
	jsr	BlockInput

	move.l	#NewDocumentRequester,a1
	jsr	DisplayEasyRequester
	tst.l	d0
	beq	NoNewDocument		;User selected 'Cancel'.

	move.l	LastLinePtr,a1
	jsr	ReleaseTextBuffer	;Release old buffer memory.
	jsr	InitialiseTextBuffer	;Allocate new text buffer.

	jsr	ClearConsole
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	#WindowTitle,a5
	move.b	#"U",(a5)+
	move.b	#"n",(a5)+
	move.b	#"t",(a5)+
	move.b	#"i",(a5)+
	move.b	#"t",(a5)+
	move.b	#"l",(a5)+
	move.b	#"e",(a5)+
	move.b	#"d",(a5)+
	move.b	#0,(a5)+

	move.l	#FileName,a5
	move.l	#300,d5
NewDocumentClearFileName:
	move.b	#0,(a5)+
	dbra	d5,NewDocumentClearFileName

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	#WindowTitle,a1
	move.l	#-1,a2
	jsr	SetWindowTitles(a6)

	move.l	#1,BOOPSIMaxHeight
	move.l	#0,BOOPSIMaxWidth
	move.l	#0,BOOPSIHorizPropVal
	move.l	#0,BOOPSIVertPropVal
	move.l	#0,CurrentHorizTop
	move.l	#0,CurrentHorizPosition
	move.l	#0,CurrentVertTop
	move.l	#0,CurrentVertPosition

	move.w	#0,TextBlockMarked

	jsr	UpdateBOOPSIGadgets
	jsr	DrawPrinterBorders

NoNewDocument:
	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Display 'About' information.                                              *
*****************************************************************************
AboutTextEngine:
	jsr	BlockInput

	clr.l	d0		;Get avail chip memory.
	move.l	_SysBase,a6
	move.l	#MEMF_CHIP,d1
	jsr	AvailMem(a6)
	divu	#1024,d0

	clr.l	d1
	move.w	d0,d1
	move.l	d1,AvailChipMem

	clr.l	d0
	move.l	_SysBase,a6
	move.l	#MEMF_FAST,d1
	jsr	AvailMem(a6)
	divu	#1024,d0

	clr.l	d1
	move.w	d0,d1
	move.l	d1,AvailFastMem

	move.l	#AboutRequester,a1
	move.l	#AvailChipMem,a3
	jsr	DisplayEasyRequester

	jsr	UnBlockInput
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Indicate out of memory during a load operation.                           *
*****************************************************************************
LoadFileMemoryError:
	jsr	ErrorBeep

	move.l	#FileMemoryErrorRequester,a1
	jsr	DisplayEasyRequester
	rts

*****************************************************************************
* Refresh the console window keeping its contents the same.                 *
*****************************************************************************
RefreshVisibleText:
	jsr	HideCursor
	jsr	DisplayVisibleText
	jsr	ResetCursor

	clr.l	d7
	move.w	MouseYCoord,d7

	cmp.l	#0,d7
	beq	RefreshVisibleTextCont
	sub.l	#1,d7
RefreshVisibleTextLoop:
	move.l	#WriteIOReq,a1			;Reset cursor Y position.
	move.l	#CarriageReturnText,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	dbra	d7,RefreshVisibleTextLoop

RefreshVisibleTextCont:
	jsr	MoveCursorAlongLine
	jsr	ShowCursor
	rts

*****************************************************************************
* Display the visible text within the window.                               *
*****************************************************************************
DisplayVisibleText:
	jsr	ResetCursor		;Get pointer to top of page.
	move.l	a5,a4			;Store the pointer to the top line.

	clr.l	d6
	move.w	MainWindowHeightChars,d6

DisplayVisibleTextLoop:
	jsr	ClearLine
	jsr	DisplayVisibleLine	;Print up one line.

	sub.l	#1,d6
	cmp.l	#0,d6
	beq	DisplayVisibleTextDone

	move.l	tb_Next(a5),a5
	move.l	a5,a4
	cmp.l	#0,a4
	beq	DisplayVisibleTextDone		;No more lines left.

	move.l	#WriteIOReq,a1			;Move down a line.
	move.l	#CarriageReturnText,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	jmp	DisplayVisibleTextLoop

DisplayVisibleTextDone:
	jsr	ClearWindow
	jsr	DrawPrinterBorders
	rts

*****************************************************************************
* Procedure to print up one line of text.                                   *
*****************************************************************************
DisplayVisibleLine:
	add.l	#tb_Text,a4		;Get text block.
	add.l	CurrentHorizTop,a4	;Account for left offset.
	move.l	a4,a3

	move.l	tb_LineLength(a5),d5
	sub.l	CurrentHorizTop,d5
	bmi	NoLineVisible
	beq	NoLineVisible

	cmp.w	MainWindowWidthChars,d5
	ble	DisplayLineLengthOK

	clr.l	d5
	move.w	MainWindowWidthChars,d5

DisplayLineLengthOK:
	move.l	#0,d4
	cmp.l	#0,d5
	beq	NoLineVisible
	sub.l	#1,d5

DisplayLineLoop:
	cmp.b	#$1b,(a4)
	blo	DisplayPrinterCodes	;Printer control code encountered.

	add.l	#1,a4
	add.l	#1,d4

DisplayPrinterCodesReturn:
	dbra	d5,DisplayLineLoop

	move.l	#WriteIOReq,a1			;Display current line.
	move.l	a3,io_Data(a1)
	move.l	d4,io_Length(a1)
	jsr	SendChars

NoLineVisible:
	rts

DisplayPrinterCodes:
	move.l	#WriteIOReq,a1			;Display line so far.
	move.l	a3,io_Data(a1)
	move.l	d4,io_Length(a1)
	jsr	SendChars

	move.b	(a4),d0
	add.l	#1,a4
	move.l	a4,a3
	move.l	#0,d4

	cmp.b	#$0f,d0
	beq	DisplayBookmarkCode
	cmp.b	#$10,d0
	beq	DisplayBoldCode
	cmp.b	#$11,d0
	beq	DisplayItalicCode
	cmp.b	#$12,d0
	beq	DisplayUnderlineCode
	cmp.b	#$13,d0
	beq	DisplayCondensedCode
	cmp.b	#$14,d0
	beq	DisplayDStrikeCode
	cmp.b	#$15,d0
	beq	DisplayEliteCode
	cmp.b	#$16,d0
	beq	DisplayEnlargedCode
	cmp.b	#$17,d0
	beq	DisplayPicaCode
	cmp.b	#$18,d0
	beq	DisplaySubscriptCode
	cmp.b	#$19,d0
	beq	DisplaySuperscriptCode
	cmp.b	#$1a,d0
	beq	DisplayPlainCode
	jmp	DisplayPrinterCodesReturn

DisplayBookmarkCode:
	move.l	#WriteIOReq,a1
	move.l	#BookmarkChar,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,TextBlockMarked
	bne	DisplayPrinterCodesReturn	;Don't un-invert text.

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	jmp	DisplayPrinterCodesReturn

DisplayBoldCode:
	move.l	#WriteIOReq,a1
	move.l	#BoldChar,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,TextBlockMarked
	bne	DisplayPrinterCodesReturn	;Don't un-invert text.

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	jmp	DisplayPrinterCodesReturn

DisplayItalicCode:
	move.l	#WriteIOReq,a1
	move.l	#ItalicChar,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,TextBlockMarked
	bne	DisplayPrinterCodesReturn	;Don't un-invert text.

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	jmp	DisplayPrinterCodesReturn

DisplayUnderlineCode:
	move.l	#WriteIOReq,a1
	move.l	#UnderlineChar,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,TextBlockMarked
	bne	DisplayPrinterCodesReturn	;Don't un-invert text.

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	jmp	DisplayPrinterCodesReturn

DisplayCondensedCode:
	move.l	#WriteIOReq,a1
	move.l	#CondensedChar,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,TextBlockMarked
	bne	DisplayPrinterCodesReturn	;Don't un-invert text.

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	jmp	DisplayPrinterCodesReturn

DisplayDStrikeCode:
	move.l	#WriteIOReq,a1
	move.l	#DStrikeChar,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,TextBlockMarked
	bne	DisplayPrinterCodesReturn	;Don't un-invert text.

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	jmp	DisplayPrinterCodesReturn

DisplayEliteCode:
	move.l	#WriteIOReq,a1
	move.l	#EliteChar,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,TextBlockMarked
	bne	DisplayPrinterCodesReturn	;Don't un-invert text.

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	jmp	DisplayPrinterCodesReturn

DisplayEnlargedCode:
	move.l	#WriteIOReq,a1
	move.l	#EnlargedChar,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,TextBlockMarked
	bne	DisplayPrinterCodesReturn	;Don't un-invert text.

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	jmp	DisplayPrinterCodesReturn

DisplayPicaCode:
	move.l	#WriteIOReq,a1
	move.l	#PicaChar,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,TextBlockMarked
	bne	DisplayPrinterCodesReturn	;Don't un-invert text.

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	jmp	DisplayPrinterCodesReturn

DisplaySubscriptCode:
	move.l	#WriteIOReq,a1
	move.l	#SubscriptChar,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,TextBlockMarked
	bne	DisplayPrinterCodesReturn	;Don't un-invert text.

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	jmp	DisplayPrinterCodesReturn

DisplaySuperscriptCode:
	move.l	#WriteIOReq,a1
	move.l	#SuperscriptChar,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,TextBlockMarked
	bne	DisplayPrinterCodesReturn	;Don't un-invert text.

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	jmp	DisplayPrinterCodesReturn

DisplayPlainCode:
	move.l	#WriteIOReq,a1
	move.l	#PlainChar,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,TextBlockMarked
	bne	DisplayPrinterCodesReturn	;Don't un-invert text.

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#NormalText,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars

	jmp	DisplayPrinterCodesReturn

*****************************************************************************
* Subroutine to display the printer borders.                                *
*****************************************************************************
DrawPrinterBorders:
	cmp.w	#0,ShowBordersMode
	beq	DrawBottomBorderLoopOut	;Don't draw borders.

	move.l	MainEditWindowWnd,a1
	move.l	RPort(a1),a1
	move.l	_GfxBase,a6
	move.l	#1,d0
	jsr	SetDrMd(a6)	;Draw mode = JAM2.

	move.l	MainEditWindowWnd,a1
	move.l	RPort(a1),a1
	move.l	_GfxBase,a6
	move.w	TextColour,d0
	jsr	SetAPen(a6)	;FG colour.

	move.l	MainEditWindowWnd,a1
	move.l	RPort(a1),a1
	move.l	_GfxBase,a6
	move.w	FieldColour,d0
	jsr	SetBPen(a6)	;BG colour.

	move.l	MainEditWindowWnd,a1
	move.l	RPort(a1),a1
	move.w	#%1010101010101010,LinePtrn(a1)	;Set line pattern.

	move.l	PrinterPageWidth,d5		;Get page width.
	move.l	PrinterLeftMargin,d4		;Get left margin.
	sub.l	d4,d5
	move.l	PrinterRightMargin,d4		;Get right margin
	sub.l	d4,d5				;d5 contains real page width.

	sub.l	CurrentHorizTop,d5
	ble	RightBorderNotVisible

	cmp.w	MainWindowWidthChars,d5
	bhi	RightBorderNotVisible

	clr.l	d6
	move.w	CursorWidth,d6
	mulu	d6,d5			;Border X position in pixels.

	add.l	#3,d5			;Accont for right window border.

	move.l	d5,d0
	move.w	OffY,d1
	move.l	MainEditWindowWnd,a1
	move.l	RPort(a1),a1
	move.l	_GfxBase,a6
	jsr	Move(a6)	;Line start coords.

	move.l	d5,d0
	move.w	MainWindowHeightChars,d1
	mulu	CursorHeight,d1
	add.w	OffY,d1
	sub.w	#1,d1
	move.l	MainEditWindowWnd,a1
	move.l	RPort(a1),a1
	move.l	_GfxBase,a6
	jsr	Draw(a6)	;Line start coords.

RightBorderNotVisible:
	move.l	CurrentVertTop,d5
	clr.l	d6
	move.w	MainWindowHeightChars,d6

DrawBottomBorderLoop:
	move.l	MainEditWindowWnd,a1
	move.l	RPort(a1),a1
	move.l	_GfxBase,a6
	move.l	#0,d0
	jsr	SetDrMd(a6)	;Draw mode = JAM1.

	move.l	PrinterPageHeight,d4		;Get page height.
	move.l	PrinterTopMargin,d3		;Get top margin.
	sub.l	d3,d4
	move.l	PrinterBottomMargin,d3		;Get bottom margin
	sub.l	d3,d4				;d4 contains real page height.

	cmp.l	#0,DSPrintMode
	beq	DrawDoubleSpaceBorders

	add.l	#1,d4
	divu	#2,d4
DrawDoubleSpaceBorders:
	move.l	d5,d2
	divu	d4,d2
	mulu	d4,d2

	cmp.l	BOOPSIMaxHeight,d5
	beq	DrawBottomBorderLoopOut

	cmp.l	d5,d2
	beq	DrawBottomBorder

DrawBottomBorderBack:
	add.l	#1,d5
	dbra	d6,DrawBottomBorderLoop

DrawBottomBorderLoopOut:
	rts

DrawBottomBorder:
	move.w	OffX,d0

	move.l	d5,d1
	sub.l	CurrentVertTop,d1
	mulu	CursorHeight,d1
	add.w	OffY,d1
	cmp.w	OffY,d1
	beq	DrawBottomBorderBack	;Border at top of window.

	sub.l	#1,d1
	move.l	MainEditWindowWnd,a1
	move.l	RPort(a1),a1
	move.l	_GfxBase,a6
	jsr	Move(a6)	;Line start coords.

	move.w	MainWindowWidthChars,d0
	mulu	CursorWidth,d0
	add.w	OffX,d0

	move.l	d5,d1
	sub.l	CurrentVertTop,d1
	mulu	CursorHeight,d1
	add.w	OffY,d1
	sub.l	#1,d1

	move.l	MainEditWindowWnd,a1
	move.l	RPort(a1),a1
	move.l	_GfxBase,a6
	jsr	Draw(a6)	;Line start coords.

	jmp	DrawBottomBorderBack

*****************************************************************************
* Subroutines to alter mouse pointer imagery.                               *
*****************************************************************************
SleepPointer:
	move.l	_IntuitionBase,a0
	move.w	lib_Version(a0),d0	;Get intuition version.
	cmp.w	#39,d0
	blo	OldSleepPointer		;Have to use lores pointer.

	move.l	#PointerSwitch,a0	;Use prefs sleepy pointer.
	move.l	#-1,(a0)

	move.l	MainEditWindowWnd,a0
	move.l	#PointerTags,a1
	move.l	_IntuitionBase,a6
	jsr	SetWindowPointerA(a6)
	rts

OldSleepPointer:
	move.l	MainEditWindowWnd,a0	;Use built-in sleepy pointer.
	move.l	#SleepPointerImage,a1
	move.l	#16,d0
	move.l	#16,d1
	move.l	#-6,d2
	move.l	#0,d3
	move.l	_IntuitionBase,a6
	jsr	SetPointer(a6)
	rts

WakePointer:
	move.l	_IntuitionBase,a0
	move.w	lib_Version(a0),d0	;Get intuition version.
	cmp.w	#39,d0
	blo	OldWakePointer		;Have to use lores pointer.

	move.l	#PointerSwitch,a0	;Use prefs sleepy pointer.
	move.l	#0,(a0)

	move.l	MainEditWindowWnd,a0
	move.l	#PointerTags,a1
	move.l	_IntuitionBase,a6
	jsr	SetWindowPointerA(a6)
	rts

OldWakePointer:
	move.l	MainEditWindowWnd,a0	;Use built-in sleepy pointer,
	move.l	_IntuitionBase,a6
	jsr	ClearPointer(a6)
	rts

*****************************************************************************
* Subroutines to handle disk files.                                         *
*****************************************************************************
OpenFile:
	move.l	_DOSBase,a6
	jsr	Open(a6)		;Open a disk file.
	rts

ReadFile:
	move.l	_DOSBase,a6
	jsr	Read(a6)
	rts

CloseFile:
	move.l	_DOSBase,a6
	jsr	Close(a6)		;Close a disk file.
	rts

LoadFileError:
	jsr	ErrorBeep

	move.l	#LoadFileErrorRequester,a1
	move.l	#FileNamePtr,a3
	jsr	DisplayEasyRequester

	move.l	#300,d0
	move.l	#WindowTitle,a5
	move.l	#FileName,a6
LoadErrorReplaceFileName:		;Replace old file name.
	move.b	(a5)+,(a6)+
	dbra	d0,LoadErrorReplaceFileName

	jsr	UnBlockInput		;Restore input to main edit window.
	jmp	ProcessMenuSelectionReturn

SaveErrorCloseFile:
	move.l	TextFileHd,d1
	jsr	CloseFile

SaveFileError:
	jsr	ErrorBeep

	move.l	#SaveFileErrorRequester,a1
	move.l	#FileNamePtr,a3
	jsr	DisplayEasyRequester

	move.l	#300,d0
	move.l	#WindowTitle,a5
	move.l	#FileName,a6
SaveErrorReplaceFileName:		;Replace old file name.
	move.b	(a5)+,(a6)+
	dbra	d0,SaveErrorReplaceFileName

	jsr	UnBlockInput		;Restore input to main edit window.
	jmp	ProcessMenuSelectionReturn

*****************************************************************************
* Attatch file name to window title.                                        *
*****************************************************************************
FileNameInWindowTitle:
	move.l	#300,d0
	move.l	#FileName,a5
	move.l	#WindowTitle,a6
CopyFileNameToWindow:
	move.b	(a5)+,(a6)+
	dbra	d0,CopyFileNameToWindow

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	#WindowTitle,a1
	move.l	#-1,a2
	jsr	SetWindowTitles(a6)
	rts

*****************************************************************************
* Extract filename from ASL FileRequest structure.                          *
*****************************************************************************
GetFileName:
	move.l	a5,a4		;Store request pointer.
	move.l	rf_Dir(a5),a5	;Isolate directory path.
	cmp.b	#0,(a5)
	beq	DirectoryPathDone
ExtractDirectoryPath:		;Extract the directory path.
	cmp.b	#0,(a5)
	beq	DirectoryPathExtracted
	move.b	(a5),(a6)
	add.l	#1,a5
	add.l	#1,a6
	jmp	ExtractDirectoryPath

DirectoryPathExtracted:		;Add colons or slashes to file name.
	sub.l	#1,a5
	cmp.b	#":",(a5)
	beq	DirectoryPathDone
	cmp.b	#"/",(a5)
	beq	DirectoryPathDone
	move.b	#"/",(a6)
	add.l	#1,a6
	add.l	#1,a5

DirectoryPathDone:
	move.l	a4,a5
	move.l	rf_File(a5),a5
ExtractFileName:		;Extract the file name.
	cmp.b	#0,(a5)
	beq	FileNameExtracted
	move.b	(a5),(a6)
	add.l	#1,a5
	add.l	#1,a6
	jmp	ExtractFileName

FileNameExtracted:
	move.b	#0,(a6)
	rts

*****************************************************************************
* Subroutines to reserve and initialise text buffer memory.                 *
*****************************************************************************
InitialiseTextBuffer:
	move.l	_SysBase,a6
	move.l	#LineBlockLength,d0
	move.l	#MEMF_CLEAR,d1
	jsr	AllocMem(a6)		;Try and grab the memory.

	move.l	d0,FirstLinePtr
	move.l	d0,LastLinePtr
	move.l	d0,CurrentLinePtr
	move.l	#0,CurrentLineOffset
	rts

CreateNewLineAfter:			;Create new line after current line.
	move.l	_SysBase,a6
	move.l	#MEMF_CHIP,d1
	jsr	AvailMem(a6)
	cmp.l	#1024*100,d0
	ble	CreateNewLineAfterFail	;Less than 100k chip mem left.

	move.l	_SysBase,a6
	move.l	#LineBlockLength,d0
	move.l	#MEMF_CLEAR,d1
	jsr	AllocMem(a6)		;Try and grab the memory.
	tst.l	d0
	beq	CreateNewLineAfterFail	;Memory not available.

	move.l	CurrentLinePtr,a0	;Sort out linked list pointers.
	move.l	d0,a1
	move.l	tb_Next(a0),tb_Next(a1)
	move.l	a1,tb_Next(a0)
	move.l	a0,tb_Prev(a1)

	cmp.l	#0,tb_Next(a1)
	beq	NoNextLine

	move.l	tb_Next(a1),a0
	move.l	a1,tb_Prev(a0)

NoNextLine:
	move.l	d0,CurrentLinePtr
	add.l	#1,BOOPSIMaxHeight

	move.l	CurrentLinePtr,a0
	cmp.l	#0,tb_Next(a0)
	bne	NoNextLineCont
	move.l	a0,LastLinePtr

NoNextLineCont:
	move.l	#-1,d0
	rts

CreateNewLineAfterFail:
	move.l	#0,d0
	rts

*****************************************************************************
* Delete the current line.                                                  *
*****************************************************************************
DeleteCurrentLine:
	move.l	CurrentLinePtr,a5
	move.l	tb_Next(a5),a6
	move.l	tb_Prev(a5),a4

	cmp.l	#0,a6
	beq	DeleteLastLine

	move.l	a4,tb_Prev(a6)

	cmp.l	#0,a4
	beq	DeleteFirstLine

	move.l	a6,tb_Next(a4)

	move.l	CurrentLinePtr,a1
	move.l	#LineBlockLength,d0
	move.l	_SysBase,a6
	jsr	FreeMem(a6)		;Release the memory.

	move.l	a4,CurrentLinePtr
	sub.l	#1,BOOPSIMaxHeight
	rts

DeleteLastLine:
	move.l	CurrentLinePtr,a1
	move.l	#LineBlockLength,d0
	move.l	_SysBase,a6
	jsr	FreeMem(a6)		;Release the memory.

	move.l	#0,tb_Next(a4)
	move.l	a4,CurrentLinePtr
	move.l	a4,LastLinePtr
	sub.l	#1,BOOPSIMaxHeight
	rts

DeleteFirstLine:
	move.l	a6,a5

	move.l	CurrentLinePtr,a1
	move.l	#LineBlockLength,d0
	move.l	_SysBase,a6
	jsr	FreeMem(a6)		;Release the memory.

	move.l	a5,CurrentLinePtr
	move.l	a5,FirstLinePtr
	sub.l	#1,BOOPSIMaxHeight
	rts

*****************************************************************************
* Subroutine to display an easy requester.                                  *
*****************************************************************************
DisplayEasyRequester:
	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	#0,a2
	jsr	EasyRequestArgs(a6)
	rts

*****************************************************************************
* Subroutine to beep display on an error.                                   *
*****************************************************************************
ErrorBeep:
	move.l	_IntuitionBase,a6
	move.l	Scr,a0			;Pointer to workbench screen.
	jsr	DisplayBeep(a6)
	rts

*****************************************************************************
* Subroutine to free text buffer memory.                                    *
*****************************************************************************
ReleaseTextBuffer:
	move.l	tb_Prev(a1),a5		;Store pointer to previous paragraph.
	move.l	#LineBlockLength,d0
	move.l	_SysBase,a6
	jsr	FreeMem(a6)		;Release the memory.

	move.l	a5,a1			;Go to previous paragraph.
	cmp.l	#0,a5
	bne	ReleaseTextBuffer	;Some paragraphs left.
	rts

*****************************************************************************
* Subroutine to open an Amiga library.                                      *
*****************************************************************************
OpenLibrary:
	moveq	#0,d0
	move.l	_SysBase,a6
	jsr	OpenLib(a6)
	rts

*****************************************************************************
* Subroutine to close an Amiga library.                                     *
*****************************************************************************
CloseLibrary:
	move.l	_SysBase,a6
	jsr	CloseLib(a6)
	rts

*****************************************************************************
* Determine message port IDs.                                               *
*****************************************************************************
DeterminePortIDs:
	clr.l	d1			;Get window intuition ID.
	move.l	MainEditWindowWnd,a0
	move.l	UserPort(a0),a0
	move.b	mp_SigBit(a0),d1

	sub.l	#1,d1
	move.l	#1,d0
GetWindowSigBit:
	lsl.l	d0
	dbra	d1,GetWindowSigBit
	move.l	d0,MainWindowSigBit

	clr.l	d1			;Get console device ID.
	move.l	ReadReplyPort,a0
	move.b	mp_SigBit(a0),d1

	sub.l	#1,d1
	move.l	#1,d0
GetConsoleSigBit:
	lsl.l	d0
	dbra	d1,GetConsoleSigBit
	move.l	d0,ConsoleSigBit

	clr.l	d1			;Get appwindow ID.
	move.l	AppWindowPort,a0
	move.b	mp_SigBit(a0),d1

	sub.l	#1,d1
	move.l	#1,d0
GetAppWindowSigBit:
	lsl.l	d0
	dbra	d1,GetAppWindowSigBit
	move.l	d0,AppWindowSigBit
	rts

*****************************************************************************
* Subroutines to wait for a message port.                                   *
*****************************************************************************
WaitForMainMessage:
	move.l	MainWindowSigBit,d0
	or.l	ConsoleSigBit,d0
	or.l	AppWindowSigBit,d0
	move.l	_SysBase,a6
	jsr	Wait(a6)		;Wait for a window event.
	rts

WaitForPort:
	move.l	_SysBase,a6
	jsr	WaitPort(a6)		;Wait for a window event.
	rts

*****************************************************************************
* Subroutines to get a message from a message port.                         *
*****************************************************************************
GetGadToolsMessage:
	move.l	UserPort(a0),a0
	move.l	_GadToolsBase,a6
	jsr	GT_GetIMsg(a6)		;Test window event.
	move.l	d0,imsg
	rts

GetConsoleMessage:
	move.l	ReadReplyPort,a0
	move.l	_SysBase,a6
	jsr	GetMsg(a6)
	tst.l	d0
	beq	GotConsoleMessage

	move.b	TempBuffer,Buffer
	jsr	QueueRead
	move.l	#-1,d0

GotConsoleMessage:
	rts

*****************************************************************************
* Reply to an exec message.                                                 *
*****************************************************************************
ReplyExecMessage:
	move.l	imsg,a1
	move.l	_SysBase,a6
	jsr	ReplyMsg(a6)		;Reply to exec message.
	rts

*****************************************************************************
* Subroutine to reply to a GadTools message.                                *
*****************************************************************************
ReplyGadToolsMessage:
	move.l	imsg,a1
	move.l	_GadToolsBase,a6
	jsr	GT_ReplyIMsg(a6)	;Reply to GadTools message.
	rts

*****************************************************************************
* Determine size of the main edit window.                                   *
*****************************************************************************
GetWindowDimensions:
	move.l	MainEditWindowWnd,a0

	move.w	Width(a0),MainWindowWidthPixels	;Full width of window.
	clr.l	d0
	move.b	BorderLeft(a0),d0		;Subtract
	add.b	BorderRight(a0),d0		; border
	sub.w	d0,MainWindowWidthPixels	;  dimensions.

	move.w	Height(a0),MainWindowHeightPixels	;Window height.
	clr.l	d0
	move.b	BorderTop(a0),d0		;Subtract
	add.b	BorderBottom(a0),d0		; border
	sub.w	d0,MainWindowHeightPixels	;  dimensions.

	clr.l	d0
	move.w	MainWindowWidthPixels,d0	;Width in chars
	divu	CursorWidth,d0			; = pixels/8.
	move.w	d0,MainWindowWidthChars
	sub.w	#1,MainWindowWidthChars
	move.l	#0,BOOPSIHorizView		;Avoid storing
	move.w	d0,BOOPSIHorizView+2		; carry from divide.

	clr.l	d0
	move.w	MainWindowHeightPixels,d0	;Height in chars
	divu	CursorHeight,d0				; = pixels/8.
	move.w	d0,MainWindowHeightChars
	move.l	#0,BOOPSIVertView		;Avoid storing
	move.w	d0,BOOPSIVertView+2		; carry from divide.
	rts

*****************************************************************************
* Create and remove an appwindow.                                           *
*****************************************************************************
MakeAppWindow:
	move.l	_SysBase,a6		;Make console read port.
	jsr	CreateMsgPort(a6)
	move.l	d0,AppWindowPort

	move.l	#1,d0
	move.l	#0,d1
	move.l	MainEditWindowWnd,a0
	move.l	AppWindowPort,a1
	move.l	#0,a2
	move.l	_WorkbenchBase,a6
	jsr	AddAppWindow(a6)

	move.l	d0,AppWindowPtr
	rts

DestroyAppWindow:
	move.l	AppWindowPtr,a0
	move.l	_WorkbenchBase,a6
	jsr	RemoveAppWindow(a6)

	move.l	_SysBase,a6
	move.l	AppWindowPort,a0
	jsr	DeleteMsgPort(a6)

	rts

*****************************************************************************
* Main program loop.                                                        *
*****************************************************************************
MainControlLoop:
	jsr	WaitForMainMessage		;Wait for a message.
	move.l	d0,MainMessage

	move.l	MainMessage,d0
	and.l	MainWindowSigBit,d0
	bne	ProcessMainWindowEvent

ProcessMainWindowEventBack:
	move.l	MainMessage,d0
	and.l	ConsoleSigBit,d0
	bne	ProcessConsoleInput

	move.l	MainMessage,d0
	and.l	AppWindowSigBit,d0
	bne	ProcessAppWindow
	jmp	MainControlLoop

*****************************************************************************
* Process an intuition event for the main window.                           *
*****************************************************************************
ProcessMainWindowEvent:
	move.l	MainEditWindowWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	ProcessMainWindowEventBack	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage	;Reply to message.

	move.l	imsgClass,d0
	cmp.l	#IDCMP_NEWSIZE,d0
	beq	RefreshWindowContents	;Window size changed.
	cmp.l	#IDCMP_CLOSEWINDOW,d0
	beq	QuitTextEngine		;Window closed.
	cmp.l	#IDCMP_MENUPICK,d0
	beq	ProcessMenuSelection	;Menu selected.
	cmp.l	#IDCMP_GADGETDOWN,d0
	beq	ProcessBOOPSIGadgets	;Gadget clicked on.
	cmp.l	#IDCMP_MOUSEBUTTONS,d0
	beq	MousePositionCursor	;Mouse button pressed.

	jmp	ProcessMainWindowEvent

*****************************************************************************
* Data entries begin here.                                                  *
*****************************************************************************

*****************************************************************************
* Library names and bases.                                                  *
*****************************************************************************
		dc.b	"$VER: TextEngine V5.2",0	;Version string.
GadToolsName:	dc.b	"gadtools.library",0
IntuitionName:	dc.b	"intuition.library",0
GfxName:	dc.b	"graphics.library",0
UtilityName:	dc.b	"utility.library",0
ASLName:	dc.b	"asl.library",0
DOSName:	dc.b	"dos.library",0
WorkbenchName:	dc.b	"workbench.library",0

	cnop	0,4	;Longword align.
_GadToolsBase:	dc.l	0
_IntuitionBase:	dc.l	0
_GfxBase:	dc.l	0
_UtilityBase:	dc.l	0
_ASLBase:	dc.l	0
_DOSBase:	dc.l	0
_WorkbenchBase:	dc.l	0

*****************************************************************************
* Preferences data items.                                                   *
*****************************************************************************
PreferencesFileName:
	dc.b	"TextEngine5.0.cfg",0

	EVEN
TextEngineDocument:	;Header length = 2879 bytes.
			dc.l	"Tf50"
Preferences:		;File length = 2875 bytes.
WordWrapMode:		dc.w	CHECKED
ShowBordersMode:	dc.w	CHECKED
SaveASCIIMode:		dc.w	0

DraftPrintMode:		dc.l	1
PropPrintMode:		dc.l	0
DSPrintMode:		dc.l	0
NumOfCopies:		dc.l	1

PrinterPageHeight:	dc.l	70
PrinterTopMargin:	dc.l	0
PrinterBottomMargin:	dc.l	0
PrinterPageWidth:	dc.l	80
PrinterLeftMargin:	dc.l	5
PrinterRightMargin:	dc.l	5

TextColour:		dc.w	1	;Console text colour.
FieldColour:		dc.w	0	;Console field colour.

F1String:		dcb.b	257,0
F2String:		dcb.b	257,0
F3String:		dcb.b	257,0
F4String:		dcb.b	257,0
F5String:		dcb.b	257,0
F6String:		dcb.b	257,0
F7String:		dcb.b	257,0
F8String:		dcb.b	257,0
F9String:		dcb.b	257,0
F10String:		dcb.b	257,0

PrintToString:		dc.b	"PRT:"
			dcb.b	253,0

*****************************************************************************
* Various items of data.                                                    *
*****************************************************************************
	cnop	0,4	;Longword align.
PointerTags:	dc.l	WA_BusyPointer	;Tags for new look sleepy pointer.
PointerSwitch:	dc.l	-1
		dc.l	TAG_END

PrintToStringPtr:
		dc.l	0	;Points to printer file name.

TestFileFormatBuffer:
		dc.l	0	;Determines whether file is ascii or not.
TempTextColour:	dc.w	0
TempFieldColour:dc.w	0
TempWordWrapMode:
		dc.w	0	;Used for inserting printer chars.

AppWindowPort:	dc.l	0
AppWindowPtr:	dc.l	0
MainMessage:	dc.l	0	;Message got by Wait().
imsg:		dc.l	0	;Contains intuition message.
imsgClass:	dc.l	0	;Contains intuition message class field.
imsgCode:	dc.w	0	;Contains intuition message code field.
	cnop	0,4	;Longword align.
item:		dc.l	0	;Contains selected menu item.
Task:		dc.l	0	;Contains task pointer (from FindTask).

CommAdd:	dc.l	0	;CLI command address.
CommLen:	dc.l	0	;CLI command length.
WBMessage:	dc.l	0	;Pointer to workbench message.
OldLock:	dc.l	0	;Obtained from CurrentDir.

MainWindowWidthPixels:
		dc.w	0	;Width of main window in pixels.
MainWindowHeightPixels:
		dc.w	0	;Height of main window in pixels.
MainWindowWidthChars:
		dc.w	0	;Width of main window in characters.
MainWindowHeightChars:
		dc.w	0	;Height of main window in characters.

MouseYCoord:	dc.w	0	;Y coordinate of pointer.
MouseXCoord:	dc.w	0	;X coordinate of pointer.
OldMouseYCoord:	dc.w	0	;Y coordinate of pointer.
OldMouseXCoord:	dc.w	0	;X coordinate of pointer.

	cnop	0,4	;Longword align.
TextBlockTopPtr:dc.l	0	;Pointer to first line in block.
TextBlockLength:dc.l	0	;Length of block in lines.
TextBlockMarked:dc.w	0	;=1 if text block is marked.

	cnop	0,4	;Longword align.
BackSpaceUpLineBuffer:
		dc.l	0
ReplaceTextPtr:	dc.l	0

MainWindowSigBit:
		dc.l	0	;Main window signal bit for Wait().
ConsoleSigBit:	dc.l	0	;Console signal bit for Wait().
AppWindowSigBit:dc.l	0

FirstLinePtr:	dc.l	0	;Pointer to first line.
LastLinePtr:	dc.l	0	;Pointer to last line.
CurrentLinePtr:	dc.l	0	;Pointer to current line.
CurrentLineOffset:
		dc.l	0	;Position of cursor on the line.

TextFileHd:	dc.l	0	;Pointer to open text disk file.
PrintHd:	dc.l	0	;Pointer to open printer file.

PrinterPageTop:	dc.l	0	;Distance of page start from top of sheet.
PrinterPageBottom:
		dc.l	0	;Distance of page end from top of sheet.
PrinterCopiesCounter:
		dc.l	0
PrintDocumentLinesPrinted:
		dc.l	0

WordCountBuffer:
		dc.b	0
WordCountBuffer2:
		dc.b	0

SpareLineBuffer:dcb.b	240,0	;Used for 'centre line', etc.

DiskFileBuffer:	dcb.b	1024,0	;Buffer for disk file access.
FileName:	dcb.b	301,0
InsertFileName:	dcb.b	301,0

	EVEN
BlockingRequester:
		dcb.b	112,0
SpellBlockingRequester:
		dcb.b	112,0

WindowTitle:	dc.b	"Untitled"
		dcb.b	293,0

FindTextString:	dcb.b	257,0	;Buffer for find text.
BookmarkFindString:
		dc.b	$0f,0
ReplaceTextString:
		dcb.b	257,0	;Buffer for replace text.

SpellReplaceString:
		dcb.b	257,0
SpellUnknownString:
		dcb.b	257,0

PrintPreviewFile:
		dc.b	"CON:0/0/-1/-1/Print preview",0

DictionaryFileName:
		dc.b	"TextEngine5.0.dct",0

	cnop	0,4	;Longword align.
FindTextStringPtr:
		dc.l	FindTextString	;Pointer to find text string.
FunctionKeysStringPointer:
		dc.l	0

DictionaryLock:		dc.l	0
DictionaryLength:	dc.l	0
MaxDictionaryLength:	dc.l	0
DictionaryPtr:		dc.l	0
SpellDictionaryPtr:	dc.l	0
SpellLearnPtr:		dc.l	0
SpellLength:		dc.l	0
SpellCheckerQuitFlag:	dc.l	0
			cnop	0,4	;Needed for DictionaryInfo.
DictionaryInfo:		dcb.b	260,0
SpellPointers:		dcb.l	26,0
SpellSuggestionBarrier:	dc.b	0

	EVEN
SpellSuggestionsList:
		dcb.b	14,0

	cnop	0,4	;Longword align.
SpellSuggestionsListNodesPtr:
		dc.l	SpellSuggestionsListNodes
SpellSuggestionsListNodes:
		dcb.b	14*50,0

	cnop	0,4	;Longword align.
SpellSuggestionBufferPtr:
		dc.l	SpellSuggestionBuffer
SpellSuggestionBuffer:
		dcb.b	256*50,0	;Room for 60 suggestions.

	cnop	0,4	;Longword align.
BoldFont:	dc.l	0	;Font structures for Bold,
		dc.w	0	; Italic, & Underline menu items.
		dc.b	2
		dc.b	1
	cnop	0,4	;Longword align.
ItalicFont:	dc.l	0
		dc.w	0
		dc.b	4
		dc.b	1
	cnop	0,4	;Longword align.
UnderlineFont:	dc.l	0
		dc.w	0
		dc.b	1
		dc.b	1

FlushJustifyDirection:
		dc.w	1	;0=leftwards, 1=rightwards.

*****************************************************************************
* Clipboard data.                                                           *
*****************************************************************************
	cnop	0,4	;Longword align.
CBMsgPort:	dc.l	0	;Message port for clipboard.device.
CBIOReq:	dc.l	0	;IO request for clipboard.device.
PasteTextBuffer:dc.l	0	;Used for reading in clipboard text.
PasteTextTopPtr:dc.l	0	;Points to top of pasted block.
ClipboardName:	dc.b	"clipboard.device",0

	cnop	0,4	;Longword align.
ClipboardHeader:dc.b	"FORM"
ClipTotalLen:	dc.l	0	;Total length = string length + 12.
		dc.b	"FTXT"
		dc.b	"CHRS"
ClipStringLen:	dc.l	0	;String length.

ClipboardCR:	dc.b	$0a	;Carriage return character.
ClipboardPad:	dc.b	0

*****************************************************************************
* Easy requester structures.                                                *
*****************************************************************************
EasyRequestOKText:
		dc.b	"OK",0			;Standard requester OK.
EasyRequestOKCancelText:
		dc.b	"OK|Cancel",0	;Standard requester OK and Cancel.

	cnop	0,4	;Longword align.
WordCountRequester:
		dc.l	0,0
		dc.l	WordCountRequestTitle
		dc.l	WordCountText
		dc.l	EasyRequestOKText

WordCountRequestTitle:
		dc.b	"Word count",0
WordCountText:	dc.b	"Words: %ld",$0a
		dc.b	"Lines: %ld",$0a
		dc.b	"Pages: %ld",0

	cnop	0,4	;Longword align.
NumberOfWords:	dc.l	0
NumberOfLines:	dc.l	0
NumberOfPages:	dc.l	0

	cnop	0,4	;Longword align.
QuitTextEngineRequester:
		dc.l	0,0
		dc.l	QuitTextEngineRequestTitle	;Pointer to title.
		dc.l	NewDocumentText		;Pointer to body text.
		dc.l	EasyRequestOKCancelText	;Pointer to gadget text.

QuitTextEngineRequestTitle:
		dc.b	"Quit TextEngine",0

	cnop	0,4	;Longword align.
NewDocumentRequester:
		dc.l	0,0
		dc.l	NewDocumentRequestTitle	;Pointer to title.
		dc.l	NewDocumentText		;Pointer to body text.
		dc.l	EasyRequestOKCancelText	;Pointer to gadget text.

NewDocumentRequestTitle:
		dc.b	"New document",0
NewDocumentText:dc.b	"Are you sure?",$0a
		dc.b	"Current document will be lost.",0

	cnop	0,4	;Longword align.
PrintDocumentErrorRequester:
		dc.l	0,0
		dc.l	FileErrorRequestTitle	;Pointer to title.
		dc.l	PrintDocumentErrorText	;Pointer to body text.
		dc.l	EasyRequestOKText	;Pointer to gadget text.

PrintDocumentErrorText:
		dc.b	"Unable to open printer file",$0a
		dc.b	"%s",0

	cnop	0,4	;Longword align.
PrintDocumentErrorArgs:
		dc.l	PrintToString

FileMemoryErrorRequester:
		dc.l	0,0
		dc.l	FileErrorRequestTitle	;Pointer to title.
		dc.l	FileMemoryErrorText	;Pointer to body text.
		dc.l	EasyRequestOKText	;Pointer to gadget text.

FileMemoryErrorText:
		dc.b	"Out of memory!",$0a
		dc.b	"File has been truncated.",0

	cnop	0,4	;Longword align.
TextBlockErrorRequester:
		dc.l	0,0
		dc.l	MemoryErrorRequestTitle	;Pointer to title.
		dc.l	TextBlockErrorText	;Pointer to body text.
		dc.l	EasyRequestOKText	;Pointer to gadget text.

TextBlockErrorText:
		dc.b	"Insufficient memory to allocate",$0a
		dc.b	"temporary edit buffer.",0

MemoryErrorRequestTitle:
		dc.b	"Memory error",0

	cnop	0,4	;Longword align.
OpenDictionaryErrorRequester:
		dc.l	0,0
		dc.l	FileErrorRequestTitle	;Pointer to title.
		dc.l	OpenDictioanryErrorText	;Pointer to body text.
		dc.l	EasyRequestOKText	;Pointer to gadget text.

OpenDictioanryErrorText:
		dc.b	"Cannot open file",$0a
		dc.b	"TextEngine5.0.dct",0

	cnop	0,4	;Longword align.
LoadFileErrorRequester:
		dc.l	0,0
		dc.l	FileErrorRequestTitle	;Pointer to title.
		dc.l	LoadFileErrorText	;Pointer to body text.
		dc.l	EasyRequestOKText	;Pointer to gadget text.

LoadFileErrorText:
		dc.b	"Cannot open file",$0a
		dc.b	"%s",0
FileErrorRequestTitle:
		dc.b	"File error",0

	cnop	0,4	;Longword align.
FileNamePtr:	dc.l	FileName

SavePrefsErrorRequester:
		dc.l	0,0
		dc.l	FileErrorRequestTitle	;Pointer to title.
		dc.l	SavePrefsErrorText	;Pointer to body text.
		dc.l	EasyRequestOKText	;Pointer to gadget text.

SavePrefsErrorText:
		dc.b	"Cannot save preferences file.",0

	cnop	0,4	;Longword align.
SaveFileErrorRequester:
		dc.l	0,0
		dc.l	FileErrorRequestTitle	;Pointer to title.
		dc.l	SaveFileErrorText	;Pointer to body text.
		dc.l	EasyRequestOKText	;Pointer to gadget text.

SaveFileErrorText:
		dc.b	"Cannot save file as",$0a
		dc.b	"%s",0

	cnop	0,4	;Longword align.
OverwriteFileRequester:
		dc.l	0,0
		dc.l	OverwriteRequestTitle	;Pointer to title.
		dc.l	OverwriteFileText	;Pointer to body text.
		dc.l	EasyRequestOKCancelText	;Pointer to gadget text.

OverwriteFileText:
		dc.b	"This file already exists.",$0a
		dc.b	"Do you want to overwrite it?",0

OverwriteRequestTitle:
		dc.b	"Save file",0

	cnop	0,4	;Longword align.
AboutRequester:	dc.l	0,0
		dc.l	AboutRequestTitle
		dc.l	AboutText
		dc.l	EasyRequestOKText

AboutRequestTitle:
		dc.b	"About TextEngine",0
AboutText:	dc.b	"TextEngine V5.2.",$0a
		dc.b	"Copyright © Nicholas Harvey 1991-2010.",$0a
		dc.b	"%ldK graphics mem, %ldK other mem.",$0a,$0a
		dc.b	"TextEngine is freeware. Enjoy!",0

	cnop	0,4	;Longword align.
AvailChipMem:	dc.l	0
AvailFastMem:	dc.l	0

SpellingEndRequester:
		dc.l	0,0
		dc.l	SpellingEndRequestTitle
		dc.l	SpellingEndText
		dc.l	EasyRequestOKText
SpellingEndRequestTitle:
		dc.b	"Spelling checker",0
SpellingEndText:dc.b	"End of text reached.",0

	cnop	0,4	;Longword align.
ClipboardErrorRequester:
		dc.l	0,0
		dc.l	ClipboardErrorRequestTitle
		dc.l	ClipboardErrorText
		dc.l	EasyRequestOKText
ClipboardErrorRequestTitle:
		dc.b	"Clipboard error",0
ClipboardErrorText:
		dc.b	"Unable to open clipboard.device.",$0a
		dc.b	"Cut, Copy, & Paste functions unavailable.",0

	cnop	0,4	;Longword align.
WelcomeWindowTagList:
WelcomeLeft:	dc.l	WA_Left,161
WelcomeTop:	dc.l	WA_Top,57
		dc.l	WA_Width,316
		dc.l	WA_Height,142
		dc.l	WA_ScreenTitle,MainEditWindowSTitle
		dc.l	WA_Flags,$00000800
WelcomeWindowWnd:
		dc.l	0

*****************************************************************************
* Printer escape codes.                                                     *
*****************************************************************************
BoldOnText:		dc.b	27,"[1m"
BoldOffText:		dc.b	27,"[22m"
PrintBoldMode:		dc.b	0

CondensedOnText:	dc.b	27,"[4w"
CondensedOffText:	dc.b	27,"[3w"
PrintCondensedMode:	dc.b	0

DSOnText:		dc.b	27,"[4",$22,"z"
DSOffText:		dc.b	27,"[3",$22,"z"
PrintDSMode:		dc.b	0

EliteText:		dc.b	27,"[2w"

EnlargedOnText:		dc.b	27,"[6w"
EnlargedOffText:	dc.b	27,"[5w"
PrintEnlargedMode:	dc.b	0

ItalicsOnText:		dc.b	27,"[3m"
ItalicsOffText:		dc.b	27,"[23m"
PrintItalicsMode:	dc.b	0

NLQOnText:		dc.b	27,"[2",$22,"z"

PicaText:		dc.b	27,"[0w"

PropOnText:		dc.b	27,"[2p"

SubOnText:		dc.b	27,"[4v"
SubOffText:		dc.b	27,"[3v"
PrintSubMode:		dc.b	0

SuperOnText:		dc.b	27,"[2v"
SuperOffText:		dc.b	27,"[1v"
PrintSuperMode:		dc.b	0

UnderlineOnText:	dc.b	27,"[4m"
UnderlineOffText:	dc.b	27,"[24m"
PrintUnderlineMode:	dc.b	0

PlainText:		dc.b	27,"[22m",27,"[3w",27,"[3",$22,"z"
			dc.b	27,"[5w",27,"[23m"
			dc.b	27,"[0w",27,"[3v",27,"[1v"
			dc.b	27,"[24m"

			dc.b	27,"[1p",27,"[1",$22,"z"

ResetPrinterText:	dc.b	27,"c"
CarriageReturnText:	dc.b	$0a
FormFeedText:		dc.b	$0c
LeftMarginText:		dc.b	" "

*****************************************************************************
* External CLI commands.                                                    *
*****************************************************************************
NewShellCommand:
	dc.b	"RUN >NIL: SYS:System/CLI >NIL:",0
CalculatorCommand:
	dc.b	"RUN >NIL: SYS:Tools/Calculator >NIL:",0
MultiviewCommand:
	dc.b	"RUN >NIL: SYS:Utilities/Multiview >NIL:",0
PrinterPrefsCommand:
	dc.b	"RUN >NIL: SYS:Prefs/Printer >NIL:",0
TextEngineCommand:
	dc.b	"RUN >NIL: TextEngine >NIL:",0

	EVEN
*****************************************************************************
* BOOPSI Section.                                                           *
*****************************************************************************

*****************************************************************************
* BOOPSI offsets.                                                           *
*****************************************************************************
BOOPSILeftGadgetID	EQU	$00000001
BOOPSIRightGadgetID	EQU	$00000002
BOOPSIHorizPropID	EQU	$00000003
BOOPSIUpGadgetID	EQU	$00000004
BOOPSIDownGadgetID	EQU	$00000005
BOOPSIVertPropID	EQU	$00000006

TAG_END			EQU	$00000000

LEFTIMAGE		EQU	$0000000a
UPIMAGE			EQU	$0000000b
RIGHTIMAGE		EQU	$0000000c
DOWNIMAGE		EQU	$0000000d

SYSIA_Which		EQU	$8002000d
SYSIA_DrawInfo		EQU	$80020018

FREEVERT		EQU	$00000004
FREEHORIZ		EQU	$00000002
PGA_Total		EQU	$80031007
PGA_Freedom		EQU	$80031001
PGA_Top			EQU	$80031009
PGA_Visible		EQU	$80031008
PGA_NewLook		EQU	$8003100a
PGA_Borderless		EQU	$80031002

GA_Width		EQU	$80030005
GA_Height		EQU	$80030007
GA_Top			EQU	$80030003
GA_Left			EQU	$80030001
GA_Previous		EQU	$80030010
GA_Image		EQU	$8003000a
GA_ID			EQU	$80030010
GA_RelRight		EQU	$80030002
GA_RelBottom		EQU	$80030004
GA_RelWidth		EQU	$80030006
GA_RelHeight		EQU	$80030008
GA_BottomBorder		EQU	$8003001b
GA_RightBorder		EQU	$80030018
GA_Immediate		EQU	$80030015
GA_RelVerify		EQU	$80030016

*****************************************************************************
* Get screen draw info.                                                     *
*****************************************************************************
GetDrawInfo:
	move.l	_IntuitionBase,a6
	move.l	Scr,a0
	jsr	GetScreenDrawInfo(a6)
	move.l	d0,WBDrawInfo1
	move.l	d0,WBDrawInfo2
	move.l	d0,WBDrawInfo3
	move.l	d0,WBDrawInfo4

	move.l	WBDrawInfo1,a5
	clr.l	d5
	move.w	12(a5),d5		;Get screen depth.

	cmp.w	#3,d5
	ble	ScreenDepthOK

	move.w	#3,d5			;Limit palette to 64 colours.

ScreenDepthOK:
	move.l	#ColoursGTags,a5	;Store screen depth in
	move.l	d5,4(a5)		; palette gadgets.
	move.l	d5,40(a5)

	move.l	_IntuitionBase,a6
	move.l	Scr,a0
	move.l	WBDrawInfo1,a1
	jsr	FreeScreenDrawInfo(a6)
	rts

*****************************************************************************
* Set up the right and bottom text scroller gadgets.                        *
*****************************************************************************
DrawBOOPSIGadgets:
	move.l	BOOPSIMaxWidth,d0	;Set up initial slider values.
	move.l	d0,BOOPSIHorizTotal
	move.l	BOOPSIMaxHeight,d0
	move.l	d0,BOOPSIVertTotal
	move.l	BOOPSIHorizView,d0
	move.l	d0,BOOPSIHorizVisible
	move.l	BOOPSIVertView,d0
	move.l	d0,BOOPSIVertVisible

	move.l	_IntuitionBase,a6
	move.l	#0,a0
	move.l	#ImageClassID,a1
	move.l	#LeftImageTagList,a2
	jsr	NewObjectA(a6)		;Left slider button image.
	move.l	d0,BOOPSILeftImage

	move.l	_IntuitionBase,a6
	move.l	#0,a0
	move.l	#ImageClassID,a1
	move.l	#RightImageTagList,a2
	jsr	NewObjectA(a6)		;Right slider button image.
	move.l	d0,BOOPSIRightImage

	move.l	_IntuitionBase,a6
	move.l	#0,a0
	move.l	#ImageClassID,a1
	move.l	#UpImageTagList,a2
	jsr	NewObjectA(a6)		;Up slider button image.
	move.l	d0,BOOPSIUpImage

	move.l	_IntuitionBase,a6
	move.l	#0,a0
	move.l	#ImageClassID,a1
	move.l	#DownImageTagList,a2
	jsr	NewObjectA(a6)		;Down slider button image.
	move.l	d0,BOOPSIDownImage

	jsr	FitBOOPSIsToWindowBorders

	move.l	_IntuitionBase,a6
	move.l	#0,a0
	move.l	#ButtonClassID,a1
	move.l	#LeftButtonTagList,a2
	jsr	NewObjectA(a6)		;Left slider button.
	move.l	d0,BOOPSILeftButton

	move.l	_IntuitionBase,a6
	move.l	#0,a0
	move.l	#ButtonClassID,a1
	move.l	#RightButtonTagList,a2
	jsr	NewObjectA(a6)		;Right slider button.
	move.l	d0,BOOPSIRightButton

	move.l	_IntuitionBase,a6
	move.l	#0,a0
	move.l	#ProportionalClassID,a1
	move.l	#HorizPropTagList,a2
	jsr	NewObjectA(a6)		;Horizontal prop gadget.
	move.l	d0,BOOPSIHorizProp

	move.l	_IntuitionBase,a6
	move.l	#0,a0
	move.l	#ButtonClassID,a1
	move.l	#UpButtonTagList,a2
	jsr	NewObjectA(a6)		;Up slider button.
	move.l	d0,BOOPSIUpButton

	move.l	_IntuitionBase,a6
	move.l	#0,a0
	move.l	#ButtonClassID,a1
	move.l	#DownButtonTagList,a2
	jsr	NewObjectA(a6)		;Down slider button.
	move.l	d0,BOOPSIDownButton

	move.l	_IntuitionBase,a6
	move.l	#0,a0
	move.l	#ProportionalClassID,a1
	move.l	#VertPropTagList,a2
	jsr	NewObjectA(a6)		;Vertical prop gadget.
	move.l	d0,BOOPSIVertProp

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	BOOPSILeftButton,a1
	move.l	#-1,d0
	move.l	#-1,d1
	move.l	#0,a2
	jsr	AddGList(a6)		;Add Left button gadget to window.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	BOOPSIRightButton,a1
	move.l	#-1,d0
	move.l	#-1,d1
	move.l	#0,a2
	jsr	AddGList(a6)		;Add right button gadget to window.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	BOOPSIHorizProp,a1
	move.l	#-1,d0
	move.l	#-1,d1
	move.l	#0,a2
	jsr	AddGList(a6)		;Add horizontal prop gadget to window.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	BOOPSIUpButton,a1
	move.l	#-1,d0
	move.l	#-1,d1
	move.l	#0,a2
	jsr	AddGList(a6)		;Add up button gadget to window.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	BOOPSIDownButton,a1
	move.l	#-1,d0
	move.l	#-1,d1
	move.l	#0,a2
	jsr	AddGList(a6)		;Add down button gadget to window.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	BOOPSIVertProp,a1
	move.l	#-1,d0
	move.l	#-1,d1
	move.l	#0,a2
	jsr	AddGList(a6)		;Add vertical prop gadget to window.

	move.l	_IntuitionBase,a6
	move.l	BOOPSILeftButton,a0
	move.l	MainEditWindowWnd,a1
	move.l	#0,a2
	move.l	#-1,d0
	jsr	RefreshGList(a6)	;Display BOOPSI gadgets.
	rts

*****************************************************************************
* Fit the BOOPSI gadgets snuggly into the window borders.                   *
*****************************************************************************
FitBOOPSIsToWindowBorders:
	move.l	MainEditWindowWnd,a0	;Sort out y coords of bottom
	clr.l	d0			; button gadgets.
	move.b	BorderBottom(a0),d0
	neg.l	d0
	add.l	#1,d0
	move.l	d0,LeftButtonTagList+20
	move.l	d0,RightButtonTagList+20
	add.l	#2,d0
	move.l	d0,HorizPropTagList+28

	move.l	MainEditWindowWnd,a0	;Sort x coords of bottom
	clr.l	d0			; button gadgets.
	move.b	BorderRight(a0),d0
	neg.l	d0
	move.l	BOOPSIRightImage,a0
	clr.l	d1
	move.w	4(a0),d1		;Get image width.
	sub.l	d1,d0
	add.l	#1,d0
	move.l	d0,RightButtonTagList+12
	sub.l	d1,d0
	move.l	d0,LeftButtonTagList+12

	move.l	MainEditWindowWnd,a0	;Sort out x coords of horiz
	clr.l	d1			; slider gadget.
	move.b	BorderLeft(a0),d1
	sub.l	#1,d1
	move.l	d1,HorizPropTagList+12

	sub.l	d1,d0			;Sort out width of
	sub.l	#3,d0			; horiz slider.
	move.l	d0,HorizPropTagList+36

	move.l	MainEditWindowWnd,a0	;Sort out height of horiz
	clr.l	d0			; slider gadget.
	move.b	BorderBottom(a0),d0
	sub.l	#4,d0
	move.l	d0,HorizPropTagList+20

	move.l	MainEditWindowWnd,a0	;Sort out y coords of vert
	clr.l	d0			; button gadgets.
	move.b	BorderBottom(a0),d0
	move.l	BOOPSIDownImage,a0
	clr.l	d1
	move.w	6(a0),d1		;Get image height.
	add.l	d1,d0
	neg	d0
	add.l	#1,d0
	move.l	d0,DownButtonTagList+20
	sub.l	d1,d0
	move.l	d0,UpButtonTagList+20

	move.l	MainEditWindowWnd,a0	;Sort out y coord of horiz
	clr.l	d1			; slider gadget.
	move.b	BorderTop(a0),d1
	add.l	#1,d1
	move.l	d1,VertPropTagList+28

	sub.l	d1,d0			;Sort out height of
	sub.l	#2,d0			; vert slider.
	move.l	d0,VertPropTagList+36

	move.l	MainEditWindowWnd,a0	;Sort out x coords of
	clr.l	d0			; right gadgets.
	move.b	BorderRight(a0),d0
	neg	d0
	add.l	#1,d0
	move.l	d0,UpButtonTagList+12
	move.l	d0,DownButtonTagList+12
	add.l	#4,d0
	move.l	d0,VertPropTagList+12

	move.l	MainEditWindowWnd,a0	;Sort out height of horiz
	clr.l	d0			; slider gadget.
	move.b	BorderRight(a0),d0
	sub.l	#8,d0
	move.l	d0,VertPropTagList+20
	rts

*****************************************************************************
* Alter values of BOOPSI slider gadgets.                                    *
*****************************************************************************
UpdateBOOPSIGadgets:
	move.l	BOOPSIMaxWidth,d0	;Set up slider values.
	move.l	d0,BOOPSIHorizTotal
	move.l	BOOPSIMaxHeight,d0
	move.l	d0,BOOPSIVertTotal
	move.l	BOOPSIHorizView,d0
	move.l	d0,BOOPSIHorizVisible
	move.l	BOOPSIVertView,d0
	move.l	d0,BOOPSIVertVisible

	move.l	_IntuitionBase,a6
	move.l	BOOPSIHorizProp,a0
	move.l	#HorizPropTagList,a1
	jsr	SetAttrsA(a6)		;Update horizontal prop gadget.

	move.l	_IntuitionBase,a6
	move.l	BOOPSIVertProp,a0
	move.l	#VertPropTagList,a1
	jsr	SetAttrsA(a6)		;Update vertical prop gadget.

	move.l	_IntuitionBase,a6
	move.l	BOOPSILeftButton,a0
	move.l	MainEditWindowWnd,a1
	move.l	#0,a2
	move.l	#-1,d0
	jsr	RefreshGList(a6)	;Display BOOPSI gadgets.

	jsr	GetBOOPSIHorizSliderPosition
	move.l	CurrentHorizPosition,d0	;Correct the horiz prop val.
	sub.l	BOOPSIHorizView,d0
	move.l	d0,BOOPSIHorizPropVal	;Store current position.

	jsr	GetBOOPSIVertSliderPosition
	move.l	CurrentVertPosition,d0	;Correct the vert prop val.
	sub.l	BOOPSIVertView,d0
	move.l	d0,BOOPSIVertPropVal	;Store current position.
	rts

*****************************************************************************
* Free up BOOPSI gadgets.                                                   *
*****************************************************************************
RemoveBOOPSIObjects:
	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	BOOPSILeftButton,a1
	move.l	#1,d0
	jsr	RemoveGList(a6)		;Remove Left button gadget.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	BOOPSIRightButton,a1
	move.l	#1,d0
	jsr	RemoveGList(a6)		;Removeright button gadget.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	BOOPSIHorizProp,a1
	move.l	#1,d0
	jsr	RemoveGList(a6)		;Remove horizontal prop gadget.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	BOOPSIUpButton,a1
	move.l	#1,d0
	jsr	RemoveGList(a6)		;Remove up button gadget.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	BOOPSIDownButton,a1
	move.l	#1,d0
	jsr	RemoveGList(a6)		;Remove down button gadget.

	move.l	_IntuitionBase,a6
	move.l	MainEditWindowWnd,a0
	move.l	BOOPSIVertProp,a1
	move.l	#1,d0
	jsr	RemoveGList(a6)		;Remove vertical prop gadget.

	move.l	_IntuitionBase,a6
	move.l	BOOPSILeftImage,a0
	jsr	DisposeObject(a6)

	move.l	_IntuitionBase,a6
	move.l	BOOPSIRightImage,a0
	jsr	DisposeObject(a6)

	move.l	_IntuitionBase,a6
	move.l	BOOPSIUpImage,a0
	jsr	DisposeObject(a6)

	move.l	_IntuitionBase,a6
	move.l	BOOPSIDownImage,a0
	jsr	DisposeObject(a6)

	move.l	_IntuitionBase,a6
	move.l	BOOPSILeftButton,a0
	jsr	DisposeObject(a6)

	move.l	_IntuitionBase,a6
	move.l	BOOPSIRightButton,a0
	jsr	DisposeObject(a6)

	move.l	_IntuitionBase,a6
	move.l	BOOPSIHorizProp,a0
	jsr	DisposeObject(a6)

	move.l	_IntuitionBase,a6
	move.l	BOOPSIUpButton,a0
	jsr	DisposeObject(a6)

	move.l	_IntuitionBase,a6
	move.l	BOOPSIDownButton,a0
	jsr	DisposeObject(a6)

	move.l	_IntuitionBase,a6
	move.l	BOOPSIVertProp,a0
	jsr	DisposeObject(a6)
	rts

*****************************************************************************
* Subroutine to process button gadget selections.                           *
*****************************************************************************
ProcessBOOPSIGadgets:
	move.l	imsg,a0
	move.l	IAddress(a0),a0
	move.w	GadgetID(a0),d0

	cmp.b	#BOOPSILeftGadgetID,d0
	beq	ProcessBOOPSILeft
	cmp.b	#BOOPSIRightGadgetID,d0
	beq	ProcessBOOPSIRight
	cmp.b	#BOOPSIUpGadgetID,d0
	beq	ProcessBOOPSIUp
	cmp.b	#BOOPSIDownGadgetID,d0
	beq	ProcessBOOPSIDown
	cmp.b	#BOOPSIHorizPropID,d0
	beq	ProcessBOOPSIHorizProp
	cmp.b	#BOOPSIVertPropID,d0
	beq	ProcessBOOPSIVertProp

	jmp	ProcessMainWindowEvent

*****************************************************************************
* Routines to process BOOPSI gadgets.                                       *
*****************************************************************************
ProcessBOOPSILeft:
	move.l	MainEditWindowWnd,a0
	move.l	UserPort(a0),a0
	jsr	WaitForPort		;Wait for a message.

	move.l	MainEditWindowWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	ProcessBOOPSILeft	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage

	move.l	imsgClass,d0
	cmp.l	#IDCMP_GADGETUP,d0	;Gadget released.
	beq	ProcessMainWindowEvent
	cmp.l	#IDCMP_INTUITICS,d0
	bne	ProcessBOOPSILeft	;Wait again.

	cmp.l	#0,BOOPSIHorizPropVal
	beq	ProcessMainWindowEvent	;Slider fully to the left.

	move.w	#0,TextBlockMarked

	sub.l	#1,BOOPSIHorizPropVal	;Move slider 1 to left.
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	jsr	HideCursor

	jsr	DisplayVisibleText

	jsr	ResetCursor
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr

	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	BOOPSILeftGotOffset

	move.l	d6,CurrentLineOffset

BOOPSILeftGotOffset:
	jsr	ShowCursor

	jmp	ProcessBOOPSILeft

ProcessBOOPSIRight:
	move.l	MainEditWindowWnd,a0
	move.l	UserPort(a0),a0
	jsr	WaitForPort		;Wait for a message.

	move.l	MainEditWindowWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	ProcessBOOPSIRight	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage

	move.l	imsgClass,d0
	cmp.l	#IDCMP_GADGETUP,d0	;Button released.
	beq	ProcessMainWindowEvent
	cmp.l	#IDCMP_INTUITICS,d0
	bne	ProcessBOOPSIRight	;Wait again.

	jsr	GetBOOPSIHorizSliderPosition
	move.l	CurrentHorizPosition,d0

	cmp.l	BOOPSIMaxWidth,d0
	bge	ProcessMainWindowEvent	;Slider fully to right.

	move.w	#0,TextBlockMarked

	add.l	#1,BOOPSIHorizPropVal	;Move slider 1 to right.
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	jsr	HideCursor

	jsr	DisplayVisibleText

	jsr	ResetCursor
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr

	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	BOOPSIRightGotOffset

	move.l	d6,CurrentLineOffset

BOOPSIRightGotOffset:
	jsr	ShowCursor

	jmp	ProcessBOOPSIRight

ProcessBOOPSIHorizProp:
	move.l	MainEditWindowWnd,a0
	move.l	UserPort(a0),a0
	jsr	WaitForPort		;Wait for a message.

	move.l	MainEditWindowWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	ProcessBOOPSIHorizProp	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage

	move.l	imsgClass,d0
	cmp.l	#IDCMP_GADGETUP,d0	;Button released.
	beq	BOOPSIHorizPropOut
	cmp.l	#IDCMP_INTUITICS,d0
	bne	ProcessBOOPSIHorizProp	;Wait again.

	jsr	GetBOOPSIHorizSliderPosition
	move.l	CurrentHorizPosition,d0
	sub.l	BOOPSIHorizView,d0

	cmp.l	BOOPSIHorizPropVal,d0
	beq	ProcessBOOPSIHorizProp

	move.l	d0,BOOPSIHorizPropVal	;Store current position.

	jsr	HideCursor

	move.w	#0,TextBlockMarked
	jsr	DisplayVisibleText

	jsr	ResetCursor		;Place cursor in
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr	; top left corner.

	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	BOOPSIHorizPropGotOffset

	move.l	d6,CurrentLineOffset

BOOPSIHorizPropGotOffset:
	jsr	ShowCursor

	jmp	ProcessBOOPSIHorizProp

BOOPSIHorizPropOut:
	jsr	GetBOOPSIHorizSliderPosition
	move.l	CurrentHorizPosition,d0
	sub.l	BOOPSIHorizView,d0

	cmp.l	BOOPSIHorizPropVal,d0
	beq	ProcessMainWindowEvent

	move.l	d0,BOOPSIHorizPropVal	;Store current position.

	move.w	#0,TextBlockMarked
	jsr	HideCursor
	jsr	DisplayVisibleText

	jsr	ResetCursor		;Place cursor in
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr	; top left corner.

	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	BOOPSIHorizPropGotOffset2

	move.l	d6,CurrentLineOffset

BOOPSIHorizPropGotOffset2:
	jsr	ShowCursor

	jmp	ProcessMainWindowEvent

ProcessBOOPSIUp:
	cmp.w	#1,TextBlockMarked
	bne	ProcessBOOPSIUpNoCurrentBlock

	move.l	#0,TextBlockMarked
	jsr	RefreshVisibleText

ProcessBOOPSIUpNoCurrentBlock:
	move.l	MainEditWindowWnd,a0
	move.l	UserPort(a0),a0
	jsr	WaitForPort		;Wait for a message.

	move.l	MainEditWindowWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	ProcessBOOPSIUp		;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage

	move.l	imsgClass,d0
	cmp.l	#IDCMP_GADGETUP,d0	;Button released.
	beq	ProcessMainWindowEvent
	cmp.l	#IDCMP_INTUITICS,d0
	bne	ProcessBOOPSIUp		;Wait again.

	cmp.l	#0,BOOPSIVertPropVal
	beq	ProcessMainWindowEvent	;Slider fully to top.

	move.w	#0,TextBlockMarked

	sub.l	#1,BOOPSIVertPropVal	;Move slider 1 up.
	jsr	UpdateBOOPSIVertProp	;Update horiz prop position.
	jsr	GetBOOPSIVertSliderPosition

	jsr	HideCursor		;Add new line at top of window.

	jsr	ResetCursor
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr
	jsr	BOOPSIScrollUp

	jmp	ProcessBOOPSIUp

BOOPSIScrollUp:
	move.l	#WriteIOReq,a1		;Move text down a line.
	move.l	#UpCur,io_Data(a1)
	move.l	#3,io_Length(a1)
	jsr	SendChars

	move.l	CurrentLinePtr,a5
	move.l	a5,a4

	jsr	DisplayVisibleLine
	jsr	ClearLine
	jsr	DrawPrinterBorders

	jsr	ResetCursor
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr

	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	BOOPSIUpGotOffset

	move.l	d6,CurrentLineOffset

BOOPSIUpGotOffset:
	jsr	ShowCursor
	rts

ProcessBOOPSIDown:
	cmp.w	#1,TextBlockMarked
	bne	ProcessBOOPSIDownNoCurrentBlock

	move.l	#0,TextBlockMarked
	jsr	RefreshVisibleText

ProcessBOOPSIDownNoCurrentBlock:
	move.l	MainEditWindowWnd,a0
	move.l	UserPort(a0),a0
	jsr	WaitForPort		;Wait for a message.

	move.l	MainEditWindowWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	ProcessBOOPSIDown	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage

	move.l	imsgClass,d0
	cmp.l	#IDCMP_GADGETUP,d0	;Button released.
	beq	ProcessMainWindowEvent
	cmp.l	#IDCMP_INTUITICS,d0
	bne	ProcessBOOPSIDown	;Wait again.

	jsr	GetBOOPSIVertSliderPosition
	move.l	CurrentVertPosition,d0

	cmp.l	BOOPSIMaxHeight,d0
	bge	ProcessMainWindowEvent	;Slider fully to bottom.

	move.w	#0,TextBlockMarked

	add.l	#1,BOOPSIVertPropVal	;Move slider 1 down.
	jsr	UpdateBOOPSIVertProp	;Update horiz prop position.
	jsr	GetBOOPSIVertSliderPosition

	jsr	HideCursor

	jsr	ResetCursor
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr
	jsr	BOOPSIScrollDown

	jmp	ProcessBOOPSIDown

BOOPSIScrollDown:
	move.l	CurrentLinePtr,a5
	move.l	BOOPSIVertView,d5

	sub.l	#1,d5
BOOPSIScrollDownLoop:
	move.l	#WriteIOReq,a1		;Move cursor down to bottom.
	move.l	#DownCur,io_Data(a1)
	move.l	#3,io_Length(a1)
	jsr	SendChars

	cmp.l	#0,d5			;Don't do a tb_Next(a5)
	beq	BOOPSIScrollDownLoopDone; for the last line.
	move.l	tb_Next(a5),a5
BOOPSIScrollDownLoopDone:
	dbra	d5,BOOPSIScrollDownLoop

	move.l	a5,a4			;Add new line at bottom of window.
	jsr	DisplayVisibleLine
	jsr	ClearLine
	jsr	DrawPrinterBorders

	jsr	ResetCursor
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr

	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	BOOPSIDownGotOffset

	move.l	d6,CurrentLineOffset

BOOPSIDownGotOffset:
	jsr	ShowCursor
	rts

ProcessBOOPSIVertProp:
	move.l	MainEditWindowWnd,a0
	move.l	UserPort(a0),a0
	jsr	WaitForPort		;Wait for a message.

	move.l	MainEditWindowWnd,a0
	jsr	GetGadToolsMessage	;Get the message.

	move.l	imsg,d0
	tst.l	d0
	beq	ProcessBOOPSIVertProp	;No event occurred.

	move.l	imsg,a0			;Process event
	move.l	Class(a0),imsgClass
	move.w	Code(a0),imsgCode
	jsr	ReplyGadToolsMessage

	move.l	imsgClass,d0
	cmp.l	#IDCMP_GADGETUP,d0	;Button released.
	beq	BOOPSIVertPropOut
	cmp.l	#IDCMP_INTUITICS,d0
	bne	ProcessBOOPSIVertProp	;Wait again.

	jsr	GetBOOPSIVertSliderPosition
	move.l	CurrentVertPosition,d0
	sub.l	BOOPSIVertView,d0

	cmp.l	BOOPSIVertPropVal,d0
	beq	ProcessBOOPSIVertProp

	move.l	d0,BOOPSIVertPropVal	;Store current position.

	jsr	HideCursor

	move.w	#0,TextBlockMarked
	jsr	DisplayVisibleText

	jsr	ResetCursor		;Place cursor in
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr	; top left corner.

	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	BOOPSIVertPropGotOffset

	move.l	d6,CurrentLineOffset

BOOPSIVertPropGotOffset:
	jsr	ShowCursor

	jmp	ProcessBOOPSIVertProp

BOOPSIVertPropOut:
	jsr	GetBOOPSIVertSliderPosition
	move.l	CurrentVertPosition,d0
	sub.l	BOOPSIVertView,d0

	cmp.l	BOOPSIVertPropVal,d0
	beq	ProcessMainWindowEvent

	move.l	d0,BOOPSIVertPropVal	;Store current position.

	move.w	#0,TextBlockMarked
	jsr	HideCursor
	jsr	DisplayVisibleText

	jsr	ResetCursor		;Place cursor in
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	a5,CurrentLinePtr	; top left corner.

	move.l	CurrentLinePtr,a5
	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	BOOPSIVertPropGotOffset2

	move.l	d6,CurrentLineOffset

BOOPSIVertPropGotOffset2:
	jsr	ShowCursor

	jmp	ProcessMainWindowEvent

*****************************************************************************
* Determine the actual position of the sliders.                             *
*****************************************************************************
GetBOOPSIHorizSliderPosition:
	move.l	_IntuitionBase,a6
	move.l	#PGA_Top,d0
	move.l	BOOPSIHorizProp,a0
	move.l	#CurrentHorizTop,a1
	jsr	GetAttr(a6)		;Get horiz prop position.

	move.l	CurrentHorizTop,d0
	add.l	BOOPSIHorizView,d0
	move.l	d0,CurrentHorizPosition	;Calculate actual prop value.
	rts

GetBOOPSIVertSliderPosition:
	move.l	_IntuitionBase,a6
	move.l	#PGA_Top,d0
	move.l	BOOPSIVertProp,a0
	move.l	#CurrentVertTop,a1
	jsr	GetAttr(a6)		;Get vert prop position.

	move.l	CurrentVertTop,d0
	add.l	BOOPSIVertView,d0
	move.l	d0,CurrentVertPosition	;Calculate actual prop value.
	rts

*****************************************************************************
* Routines to update BOOPSI proportional gadgets.                           *
*****************************************************************************
UpdateBOOPSIHorizProp:
	move.l	BOOPSIMaxWidth,d0
	move.l	d0,BOOPSIHorizTotal
	move.l	BOOPSIHorizView,d0
	move.l	d0,BOOPSIHorizVisible

	move.l	_IntuitionBase,a6
	move.l	BOOPSIHorizProp,a0
	move.l	MainEditWindowWnd,a1
	move.l	#0,a2
	move.l	#HorizPropTagList,a3
	jsr	SetGadgetAttrsA(a6)
	rts

UpdateBOOPSIVertProp:
	move.l	BOOPSIMaxHeight,d0
	move.l	d0,BOOPSIVertTotal
	move.l	BOOPSIVertView,d0
	move.l	d0,BOOPSIVertVisible

	move.l	_IntuitionBase,a6
	move.l	BOOPSIVertProp,a0
	move.l	MainEditWindowWnd,a1
	move.l	#0,a2
	move.l	#VertPropTagList,a3
	jsr	SetGadgetAttrsA(a6)
	rts

*****************************************************************************
* BOOPSI data entries here.                                                 *
*****************************************************************************
	cnop	0,4	;Longword align.
BOOPSIMaxWidth:	dc.l	0	;Maximum value for horiz slider.
BOOPSIMaxHeight:dc.l	1	;Maximum value for vert slider.
BOOPSIHorizView:dc.l	0	;Amount shown in horiz slider.
BOOPSIVertView:	dc.l	0	;Amount shown in vert slider.

CurrentHorizTop:dc.l	0	;Actual horiz prop top value.
CurrentHorizPosition:
		dc.l	0	;Actual prop position.
CurrentVertTop:	dc.l	0
CurrentVertPosition:
		dc.l	0

ImageClassID:	dc.b	"sysiclass",0
ButtonClassID:	dc.b	"buttongclass",0
ProportionalClassID:
		dc.b	"propgclass",0

	cnop	0,4	;Longword align.
LeftImageTagList:
		dc.l	SYSIA_Which, LEFTIMAGE
		dc.l	SYSIA_DrawInfo
WBDrawInfo1:	dc.l	0
		dc.l	TAG_END

RightImageTagList:
		dc.l	SYSIA_Which, RIGHTIMAGE
		dc.l	SYSIA_DrawInfo
WBDrawInfo2:	dc.l	0
		dc.l	TAG_END

UpImageTagList:
		dc.l	SYSIA_Which, UPIMAGE
		dc.l	SYSIA_DrawInfo
WBDrawInfo3:	dc.l	0
		dc.l	TAG_END

DownImageTagList:
		dc.l	SYSIA_Which, DOWNIMAGE
		dc.l	SYSIA_DrawInfo
WBDrawInfo4:	dc.l	0
		dc.l	TAG_END

LeftButtonTagList:
		dc.l	GA_ID, BOOPSILeftGadgetID
		dc.l	GA_RelRight, 0
		dc.l	GA_RelBottom, 0
		dc.l	GA_Immediate, 1
		dc.l	GA_RelVerify, 1
		dc.l	GA_Image
BOOPSILeftImage:dc.l	0
		dc.l	GA_BottomBorder,1
		dc.l	TAG_END
BOOPSILeftButton:
		dc.l	0

RightButtonTagList:
		dc.l	GA_ID, BOOPSIRightGadgetID
		dc.l	GA_RelRight, 0
		dc.l	GA_RelBottom, 0
		dc.l	GA_Immediate, 1
		dc.l	GA_RelVerify, 1
		dc.l	GA_Image
BOOPSIRightImage:
		dc.l	0
		dc.l	GA_BottomBorder,1
		dc.l	TAG_END
BOOPSIRightButton:
		dc.l	0

HorizPropTagList:
		dc.l	GA_ID, BOOPSIHorizPropID
		dc.l	GA_Left, 0
		dc.l	GA_Height, 0
		dc.l	GA_RelBottom, 0
		dc.l	GA_RelWidth, 0
		dc.l	GA_Immediate, 1
		dc.l	GA_RelVerify, 1
		dc.l	PGA_Total
BOOPSIHorizTotal:
		dc.l	0
		dc.l	PGA_Top
BOOPSIHorizPropVal:
		dc.l	0
		dc.l	PGA_Visible
BOOPSIHorizVisible:
		dc.l	0
		dc.l	PGA_NewLook, 1
		dc.l	PGA_Freedom, FREEHORIZ
		dc.l	PGA_Borderless, 1
		dc.l	GA_BottomBorder,1
		dc.l	TAG_END
BOOPSIHorizProp:dc.l	0

UpButtonTagList:
		dc.l	GA_ID, BOOPSIUpGadgetID
		dc.l	GA_RelRight, 0
		dc.l	GA_RelBottom, 0
		dc.l	GA_Immediate, 1
		dc.l	GA_RelVerify, 1
		dc.l	GA_Image
BOOPSIUpImage:	dc.l	0
		dc.l	GA_RightBorder,1
		dc.l	TAG_END
BOOPSIUpButton:	dc.l	0

DownButtonTagList:
		dc.l	GA_ID, BOOPSIDownGadgetID
		dc.l	GA_RelRight, 0
		dc.l	GA_RelBottom, 0
		dc.l	GA_Immediate, 1
		dc.l	GA_RelVerify, 1
		dc.l	GA_Image
BOOPSIDownImage:dc.l	0
		dc.l	GA_RightBorder,1
		dc.l	TAG_END
BOOPSIDownButton:
		dc.l	0

VertPropTagList:dc.l	GA_ID, BOOPSIVertPropID
		dc.l	GA_RelRight, 0
		dc.l	GA_Width, 0
		dc.l	GA_Top, 0
		dc.l	GA_RelHeight, 0
		dc.l	GA_Immediate, 1
		dc.l	GA_RelVerify, 1
		dc.l	PGA_Total
BOOPSIVertTotal:dc.l	0
		dc.l	PGA_Top
BOOPSIVertPropVal:
		dc.l	0
		dc.l	PGA_Visible
BOOPSIVertVisible:
		dc.l	0
		dc.l	PGA_NewLook, 1
		dc.l	PGA_Freedom, FREEVERT
		dc.l	PGA_Borderless, 1
		dc.l	GA_RightBorder,1
		dc.l	TAG_END
BOOPSIVertProp:	dc.l	0

*****************************************************************************
* Console device section.                                                   *
*****************************************************************************

*****************************************************************************
* Process a console device input event.                                     *
*****************************************************************************
ProcessConsoleInput:
	jsr	GetConsoleMessage	;Get the message.
	tst.l	d0
	beq	MainControlLoop

	cmp.b	#$7f,Buffer
	beq	ConsoleDelete	;Execute this before text block is cleared.

	cmp.w	#1,TextBlockMarked
	bne	ConsoleInputNoCurrentBlock

	move.w	#0,TextBlockMarked
	jsr	RefreshVisibleText	;Clear marked text block.

ConsoleInputNoCurrentBlock:
	cmp.l	#1,CSIMode
	beq	ConsoleSpecialKeys

	cmp.b	#$9b,Buffer
	bne	NotCSI

	move.l	#1,CSIMode
	jmp	MainControlLoop

NotCSI:	cmp.b	#$8,Buffer
	beq	ConsoleBackspace
	cmp.b	#$0d,Buffer
	beq	ConsoleCarriageReturn
	cmp.b	#$09,Buffer
	beq	ConsoleTab

	jsr	InsertKeyboardText
	jmp	MainControlLoop

ConsoleSpecialKeys:
	move.l	#0,CSIMode

	cmp.b	#$53,Buffer
	beq	ConsolePageDown
	cmp.b	#$54,Buffer
	beq	ConsolePageUp
	cmp.b	#$41,Buffer
	beq	ConsoleCursorUp
	cmp.b	#$42,Buffer
	beq	ConsoleCursorDown
	cmp.b	#$43,Buffer
	beq	ConsoleCursorRight
	cmp.b	#$44,Buffer
	beq	ConsoleCursorLeft

	move.l	#1,CSIMode

	cmp.b	#"0",Buffer
	beq	ConsoleMacro1
	cmp.b	#"1",Buffer
	beq	ConsoleMacro2
	cmp.b	#"2",Buffer
	beq	ConsoleMacro3
	cmp.b	#"3",Buffer
	beq	ConsoleMacro4
	cmp.b	#"4",Buffer
	beq	ConsoleMacro5
	cmp.b	#"5",Buffer
	beq	ConsoleMacro6
	cmp.b	#"6",Buffer
	beq	ConsoleMacro7
	cmp.b	#"7",Buffer
	beq	ConsoleMacro8
	cmp.b	#"8",Buffer
	beq	ConsoleMacro9
	cmp.b	#"9",Buffer
	beq	ConsoleMacro10

	move.l	#0,CSIMode

	jsr	GetConsoleMessage
	tst.l	d0
	beq	MainControlLoop

	cmp.b	#"A",Buffer
	beq	ConsoleShiftLeft
	cmp.b	#"@",Buffer
	beq	ConsoleShiftRight

	jmp	MainControlLoop

*****************************************************************************
* Handle shift+left cursor input.                                           *
*****************************************************************************
ConsoleShiftLeft:
	move.l	#0,CurrentLineOffset
	move.w	#0,MouseXCoord

	jsr	HideCursor

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	jsr	ShowCursor

	cmp.l	#0,BOOPSIHorizPropVal
	beq	MainControlLoop

	move.l	#0,BOOPSIHorizPropVal
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	jsr	RefreshVisibleText
	jmp	MainControlLoop

*****************************************************************************
* Handle shift+left cursor input.                                           *
*****************************************************************************
ConsoleShiftRight:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5

	sub.l	CurrentLineOffset,d5
	cmp.l	#0,d5
	beq	MainControlLoop		;Cursor at end of line.

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),CurrentLineOffset

	clr.l	d5
	move.w	MainWindowWidthChars,d5
	cmp.l	tb_LineLength(a5),d5
	bge	ConsoleShiftRightOnSamePage

	move.l	CurrentLineOffset,d5
	add.l	#1,d5
	sub.l	BOOPSIHorizView,d5
	move.l	d5,BOOPSIHorizPropVal

	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	jsr	HideCursor
	jsr	DisplayVisibleText

	jsr	ResetCursor
	move.w	#0,MouseXCoord

	clr.l	d7
	move.w	MouseYCoord,d7

	cmp.l	#0,d7
	beq	ConsoleShiftRightLoopCont
	sub.l	#1,d7
ConsoleShiftRightLoop:
	move.l	#WriteIOReq,a1			;Reset cursor Y position.
	move.l	#CarriageReturnText,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	dbra	d7,ConsoleShiftRightLoop

ConsoleShiftRightLoopCont:
	clr.l	d5
	move.w	MainWindowWidthChars,d5
	sub.l	#1,d5

ConsoleShiftRightLoop2:
	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#RightCur,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars

	dbra	d5,ConsoleShiftRightLoop2

	move.w	MainWindowWidthChars,MouseXCoord
	jsr	ShowCursor
	jmp	MainControlLoop

ConsoleShiftRightOnSamePage:
	jsr	HideCursor

	move.l	CurrentLinePtr,a5
	move.l	a5,a4

	move.l	CurrentLineOffset,d5
	sub.l	CurrentHorizTop,d5
	move.w	d5,MouseXCoord

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	jsr	DisplayVisibleLine
	jsr	ClearLine
	jsr	DrawPrinterBorders
	jsr	ShowCursor
	jmp	MainControlLoop

*****************************************************************************
* Handle Del key input.                                                     *
*****************************************************************************
ConsoleDelete:
	cmp.w	#1,TextBlockMarked
	beq	ConsoleDeleteTextBlock	;Text block is marked.

	jsr	DeleteCurrentCharacter

	cmp.l	#0,d0
	beq	MainControlLoop

	jsr	MoveCursorRight
	jmp	MainControlLoop

ConsoleDeleteTextBlock:			;Delete a block of text.
	jsr	BlockInput
	jsr	DeleteTextBlock
	jsr	UnBlockInput
	jmp	MainControlLoop

*****************************************************************************
* Handle backspace key input.                                               *
*****************************************************************************
ConsoleBackspace:
	cmp.l	#0,CurrentLineOffset
	beq	BackSpaceUpLine		;Cursor on start of line.

	jsr	MoveCursorLeft
	jsr	DeleteCurrentCharacter

	cmp.l	#0,d0
	beq	MainControlLoop

	jsr	MoveCursorRight
	jmp	MainControlLoop

BackSpaceUpLine:
	move.l	CurrentLinePtr,a5
	cmp.l	#0,tb_Prev(a5)
	beq	MainControlLoop		;Cursor on first line of document.

	cmp.l	#0,tb_LineLength(a5)
	beq	BackSpaceUpEmptyLine	;Current line is empty.

	move.l	tb_Prev(a5),a5
	move.l	tb_LineLength(a5),d5	;d5 contains length of line above.

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d4
	sub.l	#1,d4
	move.l	#0,d6			;d6 contains length of text to
					; be wrapped up a line.
	move.l	#0,d7
	add.l	#tb_Text,a5
BackSpaceUpLineLoop1:
	cmp.w	#0,WordWrapMode
	beq	BackSpaceUpLineNoWordWrap

	move.l	PrinterPageWidth,d0		;Page width.
	sub.l	PrinterLeftMargin,d0		;Left margin.
	sub.l	PrinterRightMargin,d0		;Right margin.

	cmp.l	d5,d0
	beq	BackSpaceUpLineLoopOut

BackSpaceUpLineNoWordWrap:
	cmp.l	#240,d5
	beq	BackSpaceUpLineLoopOut

	cmp.b	#" ",(a5)+
	beq	BackSpaceUpLineLoopMarkSpace

BackSpaceUpLineLoopMarkSpaceBack:
	add.l	#1,d6
	add.l	#1,d5

	dbra	d4,BackSpaceUpLineLoop1

	;Wrap entire line up onto previous one.
	jsr	MoveCursorLeft		;Go to end of previous line.
	move.l	CurrentLinePtr,a5
	move.l	tb_Next(a5),CurrentLinePtr

	move.l	CurrentLinePtr,a5

	move.l	tb_LineLength(a5),d5

	move.l	tb_Prev(a5),a6

	move.l	tb_LineLength(a6),d4
	add.l	d5,tb_LineLength(a6)

	add.l	d4,a6
	add.l	#tb_Text,a6
	add.l	#tb_Text,a5

BackSpaceUpWrapEntireLine:
	move.b	(a5),(a6)
	move.b	#0,(a5)

	add.l	#1,a5
	add.l	#1,a6
	dbra	d5,BackSpaceUpWrapEntireLine

	move.l	CurrentVertPosition,d5
	cmp.l	BOOPSIMaxHeight,d5
	bne	BackSpaceUpWrapEntireLineCont

	add.w	#1,MouseYCoord
	sub.l	#1,BOOPSIVertPropVal	;Move slider 1 up.

BackSpaceUpWrapEntireLineCont:
	jsr	DeleteCurrentLine
	jsr	DetermineLongestLine
	jsr	UpdateBOOPSIGadgets
	jsr	RefreshVisibleText

	jmp	MainControlLoop

BackSpaceUpLineLoopMarkSpace:
	move.l	d6,d7
	jmp	BackSpaceUpLineLoopMarkSpaceBack

BackSpaceUpLineLoopOut:
	cmp.l	#0,d7
	beq	MainControlLoop

	move.l	d7,BackSpaceUpLineBuffer

	jsr	MoveCursorLeft		;Go to end of previous line.

	move.l	CurrentLinePtr,a6
	move.l	tb_Next(a6),a5

	move.l	BackSpaceUpLineBuffer,d5

	sub.l	d5,tb_LineLength(a5)	;Shorten lower line.
	sub.l	#1,tb_LineLength(a5)

	move.l	tb_LineLength(a6),d4

	add.l	d5,tb_LineLength(a6)	;Lengthen upper line.
	add.l	#1,tb_LineLength(a6)

	add.l	d4,a6
	add.l	#tb_Text,a6
	add.l	#tb_Text,a5

BackSpaceUpWrapPartialLine:
	move.b	(a5),(a6)
	move.b	#0,(a5)

	add.l	#1,a5
	add.l	#1,a6
	dbra	d5,BackSpaceUpWrapPartialLine

	move.l	CurrentLinePtr,a5
	move.l	tb_Next(a5),a5
	add.l	#tb_Text,a5
	move.l	a5,a6
	add.l	BackSpaceUpLineBuffer,a5
	add.l	#1,a5

	move.l	#238,d5
	sub.l	BackSpaceUpLineBuffer,d5

BackSpaceUpWrapShortenLowerLine:
	move.b	(a5),(a6)
	move.b	#0,(a5)

	add.l	#1,a5
	add.l	#1,a6
	dbra	d5,BackSpaceUpWrapShortenLowerLine

	jsr	DetermineLongestLine
	jsr	UpdateBOOPSIGadgets
	jsr	RefreshVisibleText
	jmp	MainControlLoop

BackSpaceUpEmptyLine:
	jsr	MoveCursorLeft

	move.l	CurrentLinePtr,a5
	move.l	tb_Next(a5),CurrentLinePtr

	move.l	BOOPSIVertView,d5
	add.l	#1,d5
	cmp.l	BOOPSIMaxHeight,d5
	bhi	BackSpaceUpEmptyLineCont

	move.l	CurrentVertPosition,d5
	cmp.l	BOOPSIMaxHeight,d5
	bne	BackSpaceUpEmptyLineCont

	add.w	#1,MouseYCoord
	sub.l	#1,BOOPSIVertPropVal	;Move slider 1 up.

BackSpaceUpEmptyLineCont:
	jsr	DeleteCurrentLine
	jsr	UpdateBOOPSIVertProp
	jsr	GetBOOPSIVertSliderPosition
	jsr	RefreshVisibleText

	jmp	MainControlLoop

*****************************************************************************
* Delete the character under the cursor.                                    *
*****************************************************************************
DeleteCurrentCharacter:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	cmp.l	#0,d5
	beq	ConsoleDeleteLine

	cmp.l	CurrentLineOffset,d5
	beq	DeleteCurrentCharacterOut

	move.l	#239,d5
	sub.l	CurrentLineOffset,d5	;d5 contains no. of chars to shift.

	move.l	CurrentLinePtr,a6
	add.l	#tb_Text,a6
	add.l	CurrentLineOffset,a6

	move.l	a6,a5
	add.l	#1,a5

DeleteCurrentCharacterLoop:
	move.b	(a5),(a6)
	move.b	#0,(a5)

	add.l	#1,a5
	add.l	#1,a6
	dbra	d5,DeleteCurrentCharacterLoop

	move.l	CurrentLinePtr,a5
	sub.l	#1,tb_LineLength(a5)

	jsr	DetermineLongestLine

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	add.l	#1,d5
	cmp.l	BOOPSIMaxWidth,d5
	bge	DeleteLongestLine	;Longest line has been shortened.

DeleteLongestLineBack:
	jsr	HideCursor

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	move.l	CurrentLinePtr,a5
	move.l	CurrentLinePtr,a4
	jsr	DisplayVisibleLine
	jsr	ClearLine
	jsr	DrawPrinterBorders

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	jsr	MoveCursorAlongLine
	jsr	ShowCursor

DeleteCurrentCharacterOut:
	move.l	#0,d0
	rts

DeleteLongestLine:
	cmp.l	#0,BOOPSIHorizPropVal
	beq	DeleteLongestLineBack

	move.l	CurrentHorizPosition,d5
	cmp.l	BOOPSIMaxWidth,d5
	blo	DeleteLongestLineBack

	move.l	BOOPSIMaxWidth,d5
	cmp.l	BOOPSIHorizView,d5
	blo	DeleteLongestLineBack	;Not off edge of screen.

	sub.l	#1,BOOPSIHorizPropVal	;Move slider 1 to left.
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	jsr	RefreshVisibleText

	move.l	#-1,d0
	rts

ConsoleDeleteLine:
	move.l	CurrentLinePtr,a5
	cmp.l	#0,tb_Next(a5)
	beq	ConsoleDeleteLineOut	;Cursor on last line.

	move.l	BOOPSIVertView,d5
	add.l	#1,d5
	cmp.l	BOOPSIMaxHeight,d5
	bhi	ConsoleDeleteLineCont

	move.l	CurrentVertPosition,d5
	cmp.l	BOOPSIMaxHeight,d5
	bne	ConsoleDeleteLineCont

	add.w	#1,MouseYCoord
	sub.l	#1,BOOPSIVertPropVal	;Move slider 1 up.

ConsoleDeleteLineCont:
	move.l	#0,BOOPSIHorizPropVal
	move.l	CurrentLinePtr,a5
	cmp.l	#0,tb_Prev(a5)
	beq	ConsoleDeleteFirstLine

	jsr	DeleteCurrentLine
	jsr	UpdateBOOPSIGadgets
	jsr	RefreshVisibleText

	move.l	CurrentLinePtr,a5
	move.l	tb_Next(a5),CurrentLinePtr
	rts

ConsoleDeleteFirstLine:
	jsr	DeleteCurrentLine
	jsr	UpdateBOOPSIGadgets
	jsr	RefreshVisibleText

ConsoleDeleteLineOut:
	rts

*****************************************************************************
* Carriage return key handler.                                              *
*****************************************************************************
ConsoleCarriageReturn:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	cmp.l	CurrentLineOffset,d5
	beq	SimpleCarriageReturn	;Cursor at end of line.

	jsr	CreateNewLineAfter
	beq	MainControlLoop	;Out of memory.

	move.l	CurrentLinePtr,a6	;a6 contains new line
	move.l	tb_Prev(a6),a5		;a5 contains previous line.
	move.l	a5,CurrentLinePtr
	move.l	tb_LineLength(a5),d5

	sub.l	CurrentLineOffset,d5	;d5 contains length of line
					; to move down onto new line.
	sub.l	d5,tb_LineLength(a5)
	add.l	d5,tb_LineLength(a6)

	add.l	#tb_Text,a6
	add.l	#tb_Text,a5
	add.l	CurrentLineOffset,a5
	sub.l	#1,d5
CarriageReturnCopyText:
	move.b	(a5),(a6)
	move.b	#0,(a5)

	add.l	#1,a5
	add.l	#1,a6
	dbra	d5,CarriageReturnCopyText

	jsr	DetermineLongestLine
	jsr	UpdateBOOPSIVertProp
	jsr	GetBOOPSIVertSliderPosition
	jsr	RefreshVisibleText
	jsr	MoveCursorRight
	jmp	MainControlLoop

SimpleCarriageReturn:
	jsr	CreateNewLineAfter
	beq	MainControlLoop	;Out of memory.

	jsr	UpdateBOOPSIVertProp
	jsr	GetBOOPSIVertSliderPosition
	jsr	RefreshVisibleText

	move.l	CurrentLinePtr,a5
	move.l	tb_Prev(a5),CurrentLinePtr

	jsr	MoveCursorRight		;Fall off end of line.
	jmp	MainControlLoop

*****************************************************************************
* Insert tab spacers.                                                       *
*****************************************************************************
ConsoleTab:
	move.b	#" ",Buffer
	jsr	InsertKeyboardText

	move.l	CurrentLineOffset,d5
	move.l	d5,d6
	divu	#8,d5
	mulu	#8,d5
	cmp.l	d5,d6
	bne	ConsoleTab

	jmp	MainControlLoop

*****************************************************************************
* Routines to insert macros into document.                                  *
*****************************************************************************
ConsoleMacro1:
	move.l	#F1String,FunctionKeysStringPointer
	jmp	InsertMacro

ConsoleMacro2:
	move.l	#F2String,FunctionKeysStringPointer
	jmp	InsertMacro

ConsoleMacro3:
	move.l	#F3String,FunctionKeysStringPointer
	jmp	InsertMacro

ConsoleMacro4:
	move.l	#F4String,FunctionKeysStringPointer
	jmp	InsertMacro

ConsoleMacro5:
	move.l	#F5String,FunctionKeysStringPointer
	jmp	InsertMacro

ConsoleMacro6:
	move.l	#F6String,FunctionKeysStringPointer
	jmp	InsertMacro

ConsoleMacro7:
	move.l	#F7String,FunctionKeysStringPointer
	jmp	InsertMacro

ConsoleMacro8:
	move.l	#F8String,FunctionKeysStringPointer
	jmp	InsertMacro

ConsoleMacro9:
	move.l	#F9String,FunctionKeysStringPointer
	jmp	InsertMacro

ConsoleMacro10:
	move.l	#F10String,FunctionKeysStringPointer
	jmp	InsertMacro

InsertMacro:
	move.l	FunctionKeysStringPointer,a5
	cmp.b	#0,(a5)
	beq	MainControlLoop		;End of macro reached.

	move.b	(a5),Buffer

	jsr	InsertKeyboardText

	add.l	#1,FunctionKeysStringPointer
	jmp	InsertMacro

*****************************************************************************
* Handle usual keyboard inputs into text buffer.                            *
*****************************************************************************
InsertKeyboardText:
	cmp.b	#32,Buffer		;Block unwanted characters.
	blo	InsertKeyboardTextOut
	cmp.b	#128,Buffer
	blo	InsertKeyboardTextValidChar
	cmp.b	#160,Buffer
	blo	InsertKeyboardTextOut

InsertKeyboardTextValidChar:
	cmp.w	#0,WordWrapMode
	bne	DoWordWrap

DoWordWrapBack:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	cmp.l	#240,d5
	beq	InsertKeyboardTextOut	;Current line is full.

	move.l	CurrentHorizTop,d5
	sub.l	#1,d5
	cmp.l	CurrentLineOffset,d5
	bge	InsertKeyboardTextOffScreen

	jsr	HideCursor
	jsr	InsertCharacter		;Put character in text buffer.

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d0
	add.l	#1,d0
	cmp.l	BOOPSIMaxWidth,d0
	ble	InsertTextCont
	move.l	d0,BOOPSIMaxWidth	;Calculate max width for BOOPSI.
	jsr	UpdateBOOPSIHorizProp

InsertTextCont:
	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	move.l	CurrentLinePtr,a5
	move.l	CurrentLinePtr,a4
	jsr	DisplayVisibleLine
	jsr	ClearLine

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	jsr	MoveCursorAlongLine
	jsr	DrawPrinterBorders
	jsr	MoveCursorRight

InsertKeyboardTextOut:
	rts

InsertKeyboardTextOffScreen:
	jsr	InsertCharacter		;Put character in text buffer.
	add.l	#1,CurrentLineOffset

	move.l	CurrentLineOffset,d5
	sub.l	BOOPSIHorizView,d5
	add.l	#1,d5
	move.l	d5,BOOPSIHorizPropVal

	cmp.l	#0,d5
	bge	InsertKeyboardTextOffScreenCont

	move.l	#0,BOOPSIHorizPropVal
InsertKeyboardTextOffScreenCont:
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	jsr	HideCursor
	jsr	DisplayVisibleText

	jsr	ResetCursor
	move.w	#0,MouseXCoord

	clr.l	d7
	move.w	MouseYCoord,d7

	cmp.l	#0,d7
	beq	InsertKeyboardTextOffScreenCont2
	sub.l	#1,d7
InsertKeyboardTextOffScreenLoop:
	move.l	#WriteIOReq,a1			;Reset cursor Y position.
	move.l	#CarriageReturnText,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	dbra	d7,InsertKeyboardTextOffScreenLoop

InsertKeyboardTextOffScreenCont2:
	move.w	#0,MouseXCoord
	move.l	CurrentLineOffset,d5

	cmp.l	#0,d5
	beq	InsertKeyboardTextOffScreenOut

	sub.l	CurrentHorizTop,d5
	sub.l	#1,d5

InsertKeyboardTextOffScreenLoop2:
	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#RightCur,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars

	add.w	#1,MouseXCoord
	dbra	d5,InsertKeyboardTextOffScreenLoop2

InsertKeyboardTextOffScreenOut:
	jsr	ShowCursor
	jmp	InsertKeyboardTextOut

*****************************************************************************
* Routine to determine the longest line in the document.                    *
*****************************************************************************
DetermineLongestLine:
	move.l	FirstLinePtr,a5
	move.l	#0,BOOPSIMaxWidth
DetermineLongestLineLoop:
	move.l	tb_LineLength(a5),d0
	add.l	#1,d0
	cmp.l	BOOPSIMaxWidth,d0
	ble	LineNotLongest
	move.l	d0,BOOPSIMaxWidth	;Calculate max width for BOOPSI.

LineNotLongest:
	move.l	tb_Next(a5),a5
	cmp.l	#0,a5
	bne	DetermineLongestLineLoop

	jsr	UpdateBOOPSIHorizProp
	rts

*****************************************************************************
* Word wrap routines.                                                       *
*****************************************************************************
DoWordWrap:
	move.l	PrinterPageWidth,d5		;Page width.
	sub.l	PrinterLeftMargin,d5		;Left margin.
	sub.l	PrinterRightMargin,d5		;Right margin.

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d6
	cmp.l	d5,d6
	bne	DoWordWrapBack		;Right margin not yet reached.

	move.l	CurrentLinePtr,a5
	add.l	tb_LineLength(a5),a5
	add.l	#tb_Text,a5		;Get end of line in a5.
	sub.l	#1,a5

	move.l	CurrentLinePtr,a6
	add.l	#tb_Text,a6
	add.l	CurrentLineOffset,a6	;Get cursor address in a6.
	sub.l	#1,a6

	cmp.l	a6,a5
	beq	WordWrapLastWord	;Cursor on last word.

	sub.l	#1,a5
	move.l	#1,d5
WordWrapLoop1:				;Check if cursor in last word.
	cmp.l	a6,a5
	beq	WordWrapLastWord	;Cursor on last word.

	cmp.b	#" ",(a5)
	beq	WordWrapNotLastWord	;Cursor not on last word.

	move.l	CurrentLinePtr,a4
	add.l	#tb_Text,a4
	cmp.l	a4,a5
	beq	DoWordWrapBack	;Line contains no spaces.

	sub.l	#1,a5
	add.l	#1,d5
	jmp	WordWrapLoop1

*****************************************************************************
* Wrap last word onto next line but keep cursor on same line.               *
*****************************************************************************
WordWrapNotLastWord:
	add.l	#1,a5			;a5 contains pointer to wrapped word.

	move.l	CurrentLinePtr,a6
	move.l	tb_Next(a6),a6
	cmp.l	#0,a6
	beq	WordWrapNotLastWordNewLine	;Cursor on last line.

	move.l	tb_LineLength(a6),d6
	add.l	d5,d6			;d6 contains potential length
					; of next line.
	move.l	PrinterPageWidth,d4		;Page width.
	sub.l	PrinterLeftMargin,d4		;Left margin.
	sub.l	PrinterRightMargin,d4		;Right margin.

	cmp.l	d4,d6
	bhi	WordWrapNotLastWordNewLine	;Not enough room on next line.

	move.l	CurrentLinePtr,a6
	sub.l	d5,tb_LineLength(a6)

	move.l	tb_Next(a6),a6
	move.l	a6,CurrentLinePtr		;Move down a line

	add.l	d5,tb_LineLength(a6)

	add.l	#tb_Text,a6
	jmp	WordWrapNotLastWordInsertChars	;Wrap word onto next line.

WordWrapNotLastWordNewLine:
	move.l	CurrentLinePtr,a6
	sub.l	d5,tb_LineLength(a6)

	jsr	CreateNewLineAfter
	beq	InsertKeyboardTextOut	;No memory available.

	move.l	CurrentLinePtr,a6
	move.l	d5,tb_LineLength(a6)

	add.l	#tb_Text,a6

WordWrapNotLastWordInsertChars:
	move.l	CurrentLinePtr,a0
	add.l	#tb_Text,a0
	add.l	#239,a0
	move.l	a0,a1
	sub.l	d5,a0

	move.l	#239,d0
	sub.l	d5,d0
WordWrapNotLastWordLoop2:		;Make room for new character.
	move.b	(a0),(a1)
	sub.l	#1,a0
	sub.l	#1,a1
	dbra	d0,WordWrapNotLastWordLoop2

	sub.l	#1,d5
WordWrapNotLastWordLoop:
	move.b	(a5),(a6)		;Insert new character.
	move.b	#0,(a5)
	add.l	#1,a5
	add.l	#1,a6

	dbra	d5,WordWrapNotLastWordLoop

	move.l	CurrentLinePtr,a5
	move.l	tb_Prev(a5),CurrentLinePtr

	jsr	RefreshVisibleText
	jsr	DetermineLongestLine

	jsr	UpdateBOOPSIVertProp	;Update horiz prop position.
	jsr	GetBOOPSIVertSliderPosition

	jmp	DoWordWrapBack

*****************************************************************************
* Wrap last word onto next line.                                            *
*****************************************************************************
WordWrapLastWord:			;Cursor on last word.
	sub.l	#1,a5
	cmp.b	#" ",(a5)
	beq	WordWrapLastWordCont	;Line contains spaces.
	move.l	CurrentLinePtr,a4
	add.l	#tb_Text,a4
	cmp.l	a4,a5
	beq	WordWrapLastCharacter2	;Line contains no spaces.

	jmp	WordWrapLastWord

WordWrapLastWordCont:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	cmp.l	CurrentLineOffset,d5
	beq	WordWrapLastCharacter

WordWrapLastCharacterBack:
	move.l	CurrentLinePtr,a5
	add.l	tb_LineLength(a5),a5
	add.l	#tb_Text,a5
	sub.l	#1,a5

	move.l	#0,d5
	move.l	#1,d6
	move.l	#0,d7

	cmp.b	#" ",(a5)
	bne	WordWrapLastWordContCont;Line doesn't end with a space.

	sub.l	#2,a5			;Avoid the space.
	add.l	#2,d7

WordWrapLastWordContCont:
	add.l	#1,a5
	move.l	CurrentLinePtr,a4
	add.l	#tb_Text,a4
	add.l	CurrentLineOffset,a4

WordWrapLastWordLoop1:
	cmp.l	a4,a5
	bge	WordWrapLastWordLoop1Cont
	move.l	#1,d5
WordWrapLastWordLoop1Cont:
	cmp.b	#" ",(a5)
	beq	WordWrapLastWordLoop1Out
	sub.l	#1,a5
	add.l	d5,d6	;d6 contains no. of chars between cursor and space.
	add.l	#1,d7	;d7 contains length of last word.
	jmp	WordWrapLastWordLoop1

WordWrapLastWordLoop1Out:
	add.l	#1,a5		;a5 points to beginning of last word.

	jsr	CreateNewLineAfter
	beq	InsertKeyboardTextOut	;No memory available.

	sub.l	#1,d7
	move.l	CurrentLinePtr,a6
	move.l	tb_Prev(a6),a4
	add.l	d7,tb_LineLength(a6)
	add.l	#tb_Text,a6

	sub.l	d7,tb_LineLength(a4)

	move.l	d6,CurrentLineOffset
	sub.l	#1,CurrentLineOffset

WordWrapLastWordLoop2:
	move.b	(a5),(a6)
	move.b	#0,(a5)

	add.l	#1,a5
	add.l	#1,a6
	dbra	d7,WordWrapLastWordLoop2

	jsr	InsertCharacter

	move.l	CurrentLinePtr,a5
	move.l	tb_Prev(a5),CurrentLinePtr
	add.l	#1,CurrentLineOffset

	move.l	CurrentLineOffset,d7
	jsr	MoveCursorDown
	move.l	d7,CurrentLineOffset

	move.l	CurrentLineOffset,d5
	sub.l	BOOPSIHorizView,d5
	add.l	#1,d5
	move.l	d5,BOOPSIHorizPropVal

	cmp.l	#0,d5
	bge	WordWrapLastWordCont2

	move.l	#0,BOOPSIHorizPropVal
WordWrapLastWordCont2:
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	jsr	HideCursor
	jsr	DisplayVisibleText
	jsr	ResetCursor
	move.w	#0,MouseXCoord

	clr.l	d7
	move.w	MouseYCoord,d7

	cmp.l	#0,d7
	beq	WordWrapLastWordLoop3Cont
	sub.l	#1,d7
WordWrapLastWordLoop3:
	move.l	#WriteIOReq,a1			;Reset cursor Y position.
	move.l	#CarriageReturnText,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	dbra	d7,WordWrapLastWordLoop3

WordWrapLastWordLoop3Cont:
	move.w	#0,MouseXCoord
	move.l	CurrentLineOffset,d5

	cmp.l	#0,d5
	beq	WordWrapLastWordOut

	sub.l	CurrentHorizTop,d5
	sub.l	#1,d5

WordWrapLastWordLoop4:
	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#RightCur,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars

	add.w	#1,MouseXCoord
	dbra	d5,WordWrapLastWordLoop4

WordWrapLastWordOut:
	jsr	UpdateBOOPSIVertProp	;Update horiz prop position.
	jsr	GetBOOPSIVertSliderPosition
	jsr	ShowCursor
	jsr	DetermineLongestLine
	jmp	InsertKeyboardTextOut

*****************************************************************************
* Check for space hit on end of line. If so, just make a new line.          *
*****************************************************************************
WordWrapLastCharacter:			;Cursor on end of line.
	cmp.b	#" ",Buffer
	beq	WordWrapLastCharSpace

	move.l	CurrentLinePtr,a5
	add.l	tb_LineLength(a5),a5
	add.l	#tb_Text,a5
	sub.l	#1,a5
	cmp.b	#" ",(a5)
	bne	WordWrapLastCharacterBack

WordWrapLastCharacter2:
	cmp.b	#" ",Buffer
	beq	WordWrapLastCharSpace

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	cmp.l	CurrentLineOffset,d5
	bne	DoWordWrapBack

WordWrapLastCharSpace:
	jsr	CreateNewLineAfter
	beq	InsertKeyboardTextOut	;Out of memory.

	jsr	UpdateBOOPSIVertProp
	jsr	GetBOOPSIVertSliderPosition
	jsr	HideCursor
	jsr	DisplayVisibleText
	jsr	ResetCursor

	clr.l	d7
	move.w	MouseYCoord,d7

	cmp.l	#0,d7
	beq	WordWrapLastCharacterSpaceCont
	sub.l	#1,d7
WordWrapLastCharacterSpaceLoop:
	move.l	#WriteIOReq,a1			;Reset cursor Y position.
	move.l	#CarriageReturnText,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	dbra	d7,WordWrapLastCharacterSpaceLoop

WordWrapLastCharacterSpaceCont:
	move.l	CurrentLinePtr,a5
	move.l	tb_Prev(a5),CurrentLinePtr
	jsr	MoveCursorRight			;Fall off end of line.

	jsr	ShowCursor
	jsr	DrawPrinterBorders
	jsr	DetermineLongestLine

	cmp.b	#" ",Buffer
	bne	DoWordWrapBack		;Insert character in new line.

	jmp	InsertKeyboardTextOut

*****************************************************************************
* Word wrap routines for when cursor is in a paragraph.                     *
*****************************************************************************
DoWordWrapInParagraph:
	jmp	InsertKeyboardTextOut

*****************************************************************************
* Procedure to insert a character into the text buffer at cursor position.  *
*****************************************************************************
InsertCharacter:
	move.l	CurrentLinePtr,a5
	add.l	#tb_Text,a5
	add.l	#240,a5
	move.l	a5,a6
	sub.l	#1,a5

	move.l	#239,d5
	sub.l	CurrentLineOffset,d5
	cmp.l	#0,d5
	ble	InsertCharacterLoopCont

	sub.l	#1,d5
InsertCharacterLoop:			;Create a space for new character.
	sub.l	#1,a5
	sub.l	#1,a6
	move.b	(a5),(a6)
	dbra	d5,InsertCharacterLoop

InsertCharacterLoopCont:
	move.b	Buffer,(a5)		;Insert the character.
	move.l	CurrentLinePtr,a5
	add.l	#1,tb_LineLength(a5)	;Increase line length counter.
	rts

*****************************************************************************
* Handle shift+cursor up keys.                                              *
*****************************************************************************
ConsolePageUp:
	cmp.l	#0,CurrentVertTop
	beq	MainControlLoop

	move.l	BOOPSIVertView,d5
	sub.l	#1,d5
	sub.l	d5,BOOPSIVertPropVal
	cmp.l	#0,BOOPSIVertPropVal
	bge	ConsolePageUpCont

	move.l	#0,BOOPSIVertPropVal

ConsolePageUpCont:
	jsr	UpdateBOOPSIVertProp	;Update horiz prop position.
	jsr	GetBOOPSIVertSliderPosition

	jsr	HideCursor

	jsr	ResetCursor
	move.l	a5,CurrentLinePtr
	jsr	DisplayVisibleText

	jsr	ResetCursor
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	CurrentLinePtr,a5
	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	ConsolePageUpGotOffset

	move.l	d6,CurrentLineOffset

ConsolePageUpGotOffset:
	jsr	ShowCursor
	jmp	MainControlLoop

*****************************************************************************
* Handle shift+cursor down keys.                                            *
*****************************************************************************
ConsolePageDown:
	move.l	BOOPSIMaxHeight,d5
	cmp.l	CurrentVertPosition,d5
	ble	MainControlLoop

	move.l	BOOPSIVertView,d5
	sub.l	#1,d5
	add.l	d5,BOOPSIVertPropVal
	move.l	BOOPSIMaxHeight,d5
	sub.l	BOOPSIVertView,d5
	cmp.l	BOOPSIVertPropVal,d5
	bge	ConsolePageDownCont

	move.l	BOOPSIMaxHeight,BOOPSIVertPropVal
	move.l	BOOPSIVertView,d5
	sub.l	d5,BOOPSIVertPropVal

ConsolePageDownCont:
	jsr	UpdateBOOPSIVertProp	;Update horiz prop position.
	jsr	GetBOOPSIVertSliderPosition

	jsr	HideCursor

	jsr	ResetCursor
	move.l	a5,CurrentLinePtr
	jsr	DisplayVisibleText

	jsr	ResetCursor
	move.w	#0,MouseXCoord
	move.w	#0,MouseYCoord

	move.l	CurrentLinePtr,a5
	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	ConsolePageDownGotOffset

	move.l	d6,CurrentLineOffset

ConsolePageDownGotOffset:
	jsr	ShowCursor
	jmp	MainControlLoop

*****************************************************************************
* Handle cursor left keys.                                                  *
*****************************************************************************
ConsoleCursorLeft:
	jsr	MoveCursorLeft
	jmp	MainControlLoop

MoveCursorLeft:
	cmp.l	#0,CurrentLineOffset
	beq	CursorLeftUp		;Cursor at start of line.
	cmp.w	#0,MouseXCoord
	beq	CursorLeftOffScreen	;Cursor at left of window.

	jsr	HideCursor

	move.l	#WriteIOReq,a1		;Move cursor 1 char left.
	move.l	#LeftCur,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars

	jsr	ShowCursor

	sub.l	#1,CurrentLineOffset
	sub.w	#1,MouseXCoord
	rts

CursorLeftUp:
	move.l	CurrentLinePtr,a5
	cmp.l	#0,tb_Prev(a5)
	beq	MoveCursorLeftOut		;Cursor on top line of text.

	move.l	tb_Prev(a5),a5
	move.l	a5,CurrentLinePtr	;Move up a line

	move.l	tb_LineLength(a5),CurrentLineOffset

	move.l	CurrentHorizTop,d5
	cmp.l	CurrentLineOffset,d5
	bge	CursorLeftUpLineNotVisible

	clr.l	d5
	move.w	MainWindowWidthChars,d5
	cmp.l	tb_LineLength(a5),d5
	bge	CursorLeftUpOnSamePage

	move.l	CurrentLineOffset,d5
	add.l	#1,d5
	sub.l	BOOPSIHorizView,d5
	move.l	d5,BOOPSIHorizPropVal

	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	cmp.w	#0,MouseYCoord
	bne	CursorLeftUpCont	;Cursor not at top of window.

	sub.l	#1,BOOPSIVertPropVal	;Move slider 1 up.
	jsr	UpdateBOOPSIVertProp	;Update horiz prop position.
	jsr	GetBOOPSIVertSliderPosition

	move.w	#1,MouseYCoord

CursorLeftUpCont:
	sub.w	#1,MouseYCoord

	jsr	HideCursor
	jsr	DisplayVisibleText

	jsr	ResetCursor
	move.w	#0,MouseXCoord

	clr.l	d7
	move.w	MouseYCoord,d7

	cmp.l	#0,d7
	beq	CursorLeftUpLoopCont
	sub.l	#1,d7
CursorLeftUpLoop:
	move.l	#WriteIOReq,a1			;Reset cursor Y position.
	move.l	#CarriageReturnText,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	dbra	d7,CursorLeftUpLoop

CursorLeftUpLoopCont:
	clr.l	d5
	move.w	MainWindowWidthChars,d5
	sub.l	#1,d5

CursorLeftUpLoop2:
	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#RightCur,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars

	dbra	d5,CursorLeftUpLoop2

	move.w	MainWindowWidthChars,MouseXCoord
	jsr	ShowCursor
	rts

CursorLeftUpLineNotVisible:
	jsr	HideCursor

	move.l	#WriteIOReq,a1		;Move text down a line.
	move.l	#UpCur,io_Data(a1)
	move.l	#3,io_Length(a1)
	jsr	SendChars

	cmp.w	#0,MouseYCoord
	bne	CursorLeftUpLineNotVisibleCont	;Cursor not at top of window.

	sub.l	#1,BOOPSIVertPropVal	;Move slider 1 up.
	jsr	UpdateBOOPSIVertProp	;Update horiz prop position.
	jsr	GetBOOPSIVertSliderPosition

	move.w	#1,MouseYCoord

CursorLeftUpLineNotVisibleCont:
	sub.w	#1,MouseYCoord
	jsr	ShowCursor
	rts

CursorLeftUpOnSamePage:
	jsr	HideCursor

	move.l	#WriteIOReq,a1		;Move text down a line.
	move.l	#UpCur,io_Data(a1)
	move.l	#3,io_Length(a1)
	jsr	SendChars

	move.l	CurrentLinePtr,a5
	move.l	a5,a4

	move.l	CurrentLineOffset,d5
	sub.l	CurrentHorizTop,d5
	move.w	d5,MouseXCoord

	cmp.w	#0,MouseYCoord
	bne	CursorLeftUpOnSamePageCont	;Cursor not at top of window.

	sub.l	#1,BOOPSIVertPropVal	;Move slider 1 up.
	jsr	UpdateBOOPSIVertProp	;Update horiz prop position.
	jsr	GetBOOPSIVertSliderPosition

	move.w	#1,MouseYCoord

CursorLeftUpOnSamePageCont:
	sub.w	#1,MouseYCoord

	jsr	DisplayVisibleLine
	jsr	ClearLine
	jsr	DrawPrinterBorders
	jsr	ShowCursor
	rts

CursorLeftOffScreen:
	move.l	CurrentLineOffset,d5
	sub.l	BOOPSIHorizView,d5
	add.l	#1,d5
	move.l	d5,BOOPSIHorizPropVal

	cmp.l	#0,d5
	bge	CursorLeftOffScreenCont

	move.l	#0,BOOPSIHorizPropVal
CursorLeftOffScreenCont:
	sub.l	#1,CurrentLineOffset
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	jsr	HideCursor
	jsr	DisplayVisibleText

	jsr	ResetCursor
	move.w	#0,MouseXCoord

	clr.l	d7
	move.w	MouseYCoord,d7

	cmp.l	#0,d7
	beq	CursorLeftOffScreenCont2
	sub.l	#1,d7
CursorLeftOffScreenLoop:
	move.l	#WriteIOReq,a1			;Reset cursor Y position.
	move.l	#CarriageReturnText,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	dbra	d7,CursorLeftOffScreenLoop

CursorLeftOffScreenCont2:
	move.w	#0,MouseXCoord
	move.l	CurrentLineOffset,d5

	cmp.l	#0,d5
	beq	CursorLeftOffScreenOut

	sub.l	CurrentHorizTop,d5
	sub.l	#1,d5

CursorLeftOffScreenLoop2:
	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#RightCur,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars

	add.w	#1,MouseXCoord
	dbra	d5,CursorLeftOffScreenLoop2

CursorLeftOffScreenOut:
	jsr	ShowCursor
MoveCursorLeftOut:
	rts

*****************************************************************************
* Handle right cursor key press.                                            *
*****************************************************************************
ConsoleCursorRight:
	jsr	MoveCursorRight
	jmp	MainControlLoop

MoveCursorRight:
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5

	sub.l	CurrentLineOffset,d5
	cmp.l	#0,d5
	beq	CursorRightDown		;Cursor at end of line.
	cmp.l	#1,d5
	beq	ConsoleCursorRightCont	;Cursor 1 char away form end.

	clr.l	d5
	move.w	MouseXCoord,d5
	add.l	#2,d5
	cmp.l	BOOPSIHorizView,d5
	beq	CursorRightOffScreen	;Cursor at window limits.

ConsoleCursorRightCont:
	move.w	MouseXCoord,d5
	cmp.w	MainWindowWidthChars,d5
	beq	CursorRightOffScreen

	jsr	HideCursor

	move.l	#WriteIOReq,a1
	move.l	#RightCur,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars

	jsr	ShowCursor

	add.l	#1,CurrentLineOffset
	add.w	#1,MouseXCoord
	rts

CursorRightOffScreen:
	add.l	#1,CurrentLineOffset

	move.l	BOOPSIHorizView,d5
	sub.l	#1,d5
	add.l	d5,BOOPSIHorizPropVal
	move.l	BOOPSIMaxWidth,d5
	sub.l	BOOPSIHorizView,d5
	cmp.l	BOOPSIHorizPropVal,d5
	bge	CursorRightOffScreenCont

	move.l	BOOPSIMaxWidth,BOOPSIHorizPropVal
	move.l	BOOPSIHorizView,d5
	sub.l	d5,BOOPSIHorizPropVal

CursorRightOffScreenCont:
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition

	jsr	HideCursor
	jsr	DisplayVisibleText

	jsr	ResetCursor
	move.w	#0,MouseXCoord

	clr.l	d7
	move.w	MouseYCoord,d7

	cmp.l	#0,d7
	beq	CursorRightOffScreenLoopCont
	sub.l	#1,d7
CursorRightOffScreenLoop:
	move.l	#WriteIOReq,a1			;Reset cursor Y position.
	move.l	#CarriageReturnText,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	dbra	d7,CursorRightOffScreenLoop

CursorRightOffScreenLoopCont:
	move.l	CurrentLineOffset,d5
	sub.l	CurrentHorizTop,d5
	beq	CursorRightOffScreenOut

	sub.l	#1,d5
CursorRightOffScreenLoop2:
	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#RightCur,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars

	add.w	#1,MouseXCoord
	dbra	d5,CursorRightOffScreenLoop2

CursorRightOffScreenOut:
	jsr	ShowCursor
	rts

CursorRightDown:
	move.l	CurrentLinePtr,a5
	cmp.l	#0,tb_Next(a5)
	beq	MoveCursorRightOut		;Cursor on last line.

	cmp.l	#0,CurrentHorizTop
	bne	CursorRightDownOffScreen;Move window view back to left.

	move.l	#0,CurrentLineOffset
	move.w	#0,MouseXCoord

	jmp	ConsoleDoCursorDown	;Move cursor down a line.

CursorRightDownOffScreen:
	move.l	CurrentLinePtr,a5
	move.l	tb_Next(a5),CurrentLinePtr

	move.l	#0,BOOPSIHorizPropVal
	jsr	UpdateBOOPSIHorizProp	;Update horiz prop position.
	jsr	GetBOOPSIHorizSliderPosition
	move.l	#0,CurrentLineOffset

	jsr	HideCursor
	jsr	DisplayVisibleText

	jsr	ResetCursor
	move.w	#0,MouseXCoord

	clr.l	d7
	move.w	MouseYCoord,d7

CursorRightDownOffScreenLoop:
	move.l	#WriteIOReq,a1			;Reset cursor Y position.
	move.l	#CarriageReturnText,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	dbra	d7,CursorRightDownOffScreenLoop

	move.l	CurrentLinePtr,a5
	move.l	CurrentLinePtr,a4
	jsr	DisplayVisibleLine
	jsr	ClearLine

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	move.w	MouseYCoord,d0
	add.w	#1,d0
	cmp.w	MainWindowHeightChars,d0
	beq	CurDownAdjustVertProp

	add.w	#1,MouseYCoord
	jsr	DrawPrinterBorders
	jsr	ShowCursor
MoveCursorRightOut:
	rts
*****************************************************************************
* Handle up cursor key press.                                               *
*****************************************************************************
ConsoleCursorUp:
	jsr	MoveCursorUp
	jmp	MainControlLoop

MoveCursorUp:
	move.l	CurrentLinePtr,a4
	cmp.l	#0,tb_Prev(a4)
	beq	MoveCursorUpOut		;Cursor on first line of text.

	move.l	CurrentLinePtr,a4
	move.l	tb_Prev(a4),a4
	move.l	a4,CurrentLinePtr	;Move up a line.

	jsr	HideCursor

	move.l	#WriteIOReq,a1		;Move text down a line.
	move.l	#UpCur,io_Data(a1)
	move.l	#3,io_Length(a1)
	jsr	SendChars

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	sub.l	CurrentHorizTop,d5
	ble	ConsoleCursorUpNextLineEmpty	;Previous line is empty

	move.l	CurrentLinePtr,a5
	move.l	CurrentLinePtr,a4
	jsr	DisplayVisibleLine
	jsr	ClearLine

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	move.l	CurrentLinePtr,a5
	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	ConsoleCursorUpGotOffset

	move.l	d6,CurrentLineOffset

ConsoleCursorUpGotOffset:
	cmp.w	#0,MouseXCoord
	beq	ConsoleCursorUpOut

	jsr	MoveCursorAlongLine

ConsoleCursorUpOut:
	cmp.w	#0,MouseYCoord
	beq	CurUpAdjustVertProp

	sub.w	#1,MouseYCoord
	jsr	DrawPrinterBorders
	jsr	ShowCursor
	rts

CurUpAdjustVertProp:
	sub.l	#1,BOOPSIVertPropVal	;Move slider 1 up.
	jsr	UpdateBOOPSIVertProp	;Update horiz prop position.
	jsr	GetBOOPSIVertSliderPosition
	jsr	DrawPrinterBorders
	jsr	ShowCursor
	rts

ConsoleCursorUpNextLineEmpty:
	move.w	#0,MouseXCoord
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),CurrentLineOffset
	jmp	ConsoleCursorUpOut

MoveCursorUpOut:
	rts

*****************************************************************************
* Handle down cursor key press.                                             *
*****************************************************************************
ConsoleCursorDown:
	jsr	MoveCursorDown
	jmp	MainControlLoop

MoveCursorDown:
	move.l	CurrentLinePtr,a4
	cmp.l	#0,tb_Next(a4)
	beq	MoveCursorDownOut		;Cursor on last line of text.

ConsoleDoCursorDown:
	move.l	CurrentLinePtr,a4
	move.l	tb_Next(a4),a4
	move.l	a4,CurrentLinePtr	;Move down a line.

	jsr	HideCursor

	move.l	#WriteIOReq,a1			;Move cursor down a line.
	move.l	#CarriageReturnText,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d5
	sub.l	CurrentHorizTop,d5
	ble	ConsoleCursorDownNextLineEmpty	;Next line is empty

	move.l	CurrentLinePtr,a5
	move.l	CurrentLinePtr,a4
	jsr	DisplayVisibleLine
	jsr	ClearLine

	move.l	#WriteIOReq,a1			;Reset cursor X position.
	move.l	#CursorToX0Text,io_Data(a1)
	move.l	#1,io_Length(a1)
	jsr	SendChars

	move.l	CurrentLinePtr,a5
	move.l	CurrentHorizTop,CurrentLineOffset
	move.l	tb_LineLength(a5),d6
	cmp.l	CurrentHorizTop,d6
	bge	ConsoleCursorDownGotOffset

	move.l	d6,CurrentLineOffset

ConsoleCursorDownGotOffset:
	cmp.w	#0,MouseXCoord
	beq	ConsoleCursorDownOut

	jsr	MoveCursorAlongLine

ConsoleCursorDownOut:
	move.w	MouseYCoord,d0
	add.w	#1,d0
	cmp.w	MainWindowHeightChars,d0
	beq	CurDownAdjustVertProp

	add.w	#1,MouseYCoord
	jsr	DrawPrinterBorders
	jsr	ShowCursor
	rts

CurDownAdjustVertProp:
	add.l	#1,BOOPSIVertPropVal	;Move slider 1 down.
	jsr	UpdateBOOPSIVertProp	;Update horiz prop position.
	jsr	GetBOOPSIVertSliderPosition
	jsr	DrawPrinterBorders
	jsr	ShowCursor
	rts

ConsoleCursorDownNextLineEmpty:
	move.w	#0,MouseXCoord
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),CurrentLineOffset
	jmp	ConsoleCursorDownOut

MoveCursorDownOut:
	rts

*****************************************************************************
* Position cursor on the line after curup/curdown.                          *
*****************************************************************************
MoveCursorAlongLine:
	cmp.w	#0,MouseXCoord
	beq	MoveCursorAlongLineOut

	clr.l	d4
	move.w	MouseXCoord,d4
	sub.w	#1,d4

	clr.l	d5
	move.l	CurrentLinePtr,a5
	move.l	tb_LineLength(a5),d6
	sub.l	CurrentHorizTop,d6	

	move.w	#0,MouseXCoord
	move.l	CurrentHorizTop,CurrentLineOffset

MoveCursorAlongLineLoop:
	move.l	#WriteIOReq,a1		;Move cursor 1 char right.
	move.l	#RightCur,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars

	add.w	#1,MouseXCoord
	add.l	#1,CurrentLineOffset
	add.l	#1,d5

	cmp.l	d5,d6
	beq	MoveCursorAlongLineOut

	dbra	d4,MoveCursorAlongLineLoop

MoveCursorAlongLineOut:
	rts

*****************************************************************************
* Add a console port to the main edit window.                               *
*****************************************************************************
OpenConsole:
	move.l	_SysBase,a6		;Make console read port.
	jsr	CreateMsgPort(a6)
	move.l	d0,ReadReplyPort

	move.l	_SysBase,a6		;Make console write port.
	jsr	CreateMsgPort(a6)
	move.l	d0,WriteReplyPort

	move.l	_SysBase,a6
	move.l	#ReadIOReq,a1
	move.l	MainEditWindowWnd,ReadIOReq+io_Data
	move.l	#48,ReadIOReq+io_Length
	move.l	#0,d0
	move.l	#0,d1
	move.l	#ConsoleName,a0
	jsr	OpenDevice(a6)		;Open the console device

	move.l	ReadIOReq+io_Device,WriteIOReq+io_Device
	move.l	ReadIOReq+io_Unit,WriteIOReq+io_Unit

	move.l	ReadIOReq+io_Unit,a5
	move.w	cu_TxHeight(a5),CursorHeight	;Get height
	move.w	cu_TxWidth(a5),CursorWidth	; and width of cursor.

	jsr	ClearConsole

	jsr	QueueRead		;Queue up first character.
	rts

*****************************************************************************
* Clear the console window.                                                 *
*****************************************************************************
ClearConsole:
	move.l	#WriteIOReq,a1
	move.l	#InitConsoleText,io_Data(a1)
	move.l	#13,io_Length(a1)
	jsr	SendChars
	rts

*****************************************************************************
* Clear the console from the cursor.                                        *
*****************************************************************************
ClearWindow:
	move.l	#WriteIOReq,a1
	move.l	#ClearWindowText,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars
	rts

*****************************************************************************
* Clear a line in the console window.                                       *
*****************************************************************************
ClearLine:
	move.l	#WriteIOReq,a1
	move.l	#ClearLineText,io_Data(a1)
	move.l	#2,io_Length(a1)
	jsr	SendChars
	rts

*****************************************************************************
* Send console read request.                                                *
*****************************************************************************
QueueRead:
	move.l	_SysBase,a6
	move.l	#ReadIOReq,a1
	move	#CMD_READ,io_Command(a1)
	move.l	#TempBuffer,io_Data(a1)
	move.l	#1,io_Length(a1)
	move.l	ReadReplyPort,14(a1)
	jsr	SendIO(a6)
	rts

*****************************************************************************
* Send command to the console device.                                       *
*****************************************************************************
SendChars:
	move.l	_SysBase,a6
	move.w	#3,io_Command(a1)
	move.l	WriteReplyPort,14(a1)
	jsr	DoIO(a6)
	rts

*****************************************************************************
* Procedures related to the text cursor.                                    *
*****************************************************************************
HideCursor:
	move.l	#WriteIOReq,a1			;Hide the cursor.
	move.l	#InvisibleCursor,io_Data(a1)
	move.l	#4,io_Length(a1)
	jsr	SendChars
	rts

ShowCursor:
	move.l	#WriteIOReq,a1		;Show the cursor.
	move.l	#VisibleCursor,io_Data(a1)
	move.l	#3,io_Length(a1)
	jsr	SendChars
	rts

ResetCursor:
	move.l	FirstLinePtr,a5
	move.l	CurrentVertTop,d5
	cmp.l	#0,d5
	beq	ResetCursorLoopDone	;Viewing top of the file.

	sub.l	#1,d5
ResetCursorLoop:
	move.l	tb_Next(a5),a5		;Go to next line.
	dbra	d5,ResetCursorLoop

ResetCursorLoopDone:
	move.l	#WriteIOReq,a1		;Place cursor at top left.
	move.l	#ResetCur,io_Data(a1)
	move.l	#5,io_Length(a1)
	jsr	SendChars
	rts

*****************************************************************************
* Remove console device from main edit window.                              *
*****************************************************************************
CloseConsole:
	move.l	_SysBase,a6
	move.l	#ReadIOReq,a1
	jsr	CheckIO(a6)	;Check for console IO request.
	tst.l	d0
	beq	OKCheckIO

	move.l	_SysBase,a6
	move.l	#ReadIOReq,a1
	jsr	AbortIO(a6)	;Abort request.

	move.l	_SysBase,a6
	move.l	#ReadIOReq,a1
	jsr	WaitIO(a6)	;Wait for it to finish.

OKCheckIO:
	move.l	_SysBase,a6
	lea	ReadIOReq,a1
	jsr	CloseDevice(a6)

	move.l	_SysBase,a6
	move.l	ReadReplyPort,a0
	jsr	DeleteMsgPort(a6)

	move.l	_SysBase,a6
	move.l	WriteReplyPort,a0
	jsr	DeleteMsgPort(a6)
	rts

*****************************************************************************
* Console device data items.                                                *
*****************************************************************************
ConsoleName:	dc.b	"console.device",0

	cnop	0,4	;Longword align.
ReadReplyPort:	dc.l	0
WriteReplyPort:	dc.l	0
CSIMode:	dc.l	0

ReadIOReq:	dcb.b	48,0
WriteIOReq:	dcb.b	48,0

CursorWidth:	dc.w	0	;Width and
CursorHeight:	dc.w	0	; height of cursor.

TempBuffer:	dc.b	0	;Input char from QueueRead.
Buffer:		dc.b	0	;Copy of TempBuffer.

InitConsoleText:	dc.b	$9b,"0;31;40;>0m",$0c
ClearLineText:		dc.b	$9b,$4b
ClearWindowText:	dc.b	$9b,$4a

InvisibleCursor:	dc.b	$9b,$30,$20,$70
VisibleCursor:		dc.b	$9b,$20,$70

RightCur:		dc.b	$9b,$43
LeftCur:		dc.b	$9b,$44
UpCur:			dc.b	$9b,$41,$0d
DownCur:		dc.b	$9b,$42,$0d
ResetCur:		dc.b	$9b,"1",$3b,"1",$48

InverseText:		dc.b	$9b,"7m"
NormalText:		dc.b	$9b,"27m"
BookmarkChar:		dc.b	$9b,"7m","@"
BoldChar:		dc.b	$9b,"7m","B"
ItalicChar:		dc.b	$9b,"7m","I"
UnderlineChar:		dc.b	$9b,"7m","U"
CondensedChar:		dc.b	$9b,"7m","C"
DStrikeChar:		dc.b	$9b,"7m","D"
EliteChar:		dc.b	$9b,"7m","e"
EnlargedChar:		dc.b	$9b,"7m","E"
PicaChar:		dc.b	$9b,"7m","p"
SubscriptChar:		dc.b	$9b,"7m","s"
SuperscriptChar:	dc.b	$9b,"7m","S"
PlainChar:		dc.b	$9b,"7m","P"

CursorToX0Text:		dc.b	$0d

	EVEN
*****************************************************************************
* ASL Library section.                                                      *
*****************************************************************************

*****************************************************************************
* Initialise ASL file requesters.                                           *
*****************************************************************************
InitialiseLoadRequester:
	move.l	MainEditWindowWnd,ASLLoadRequester+4
	move.l	#ASLLoadRequester,a0
	move.l	#0,d0
	move.l	_ASLBase,a6
	jsr	AllocAslRequest(a6)	;Allocate load requester.
	move.l	d0,ASLLoadRequestPtr
	rts

InitialiseInsertRequester:
	move.l	MainEditWindowWnd,ASLInsertRequester+4
	move.l	#ASLInsertRequester,a0
	move.l	#0,d0
	move.l	_ASLBase,a6
	jsr	AllocAslRequest(a6)	;Allocate insert requester.
	move.l	d0,ASLInsertRequestPtr
	rts

InitialiseSaveRequester:
	move.l	MainEditWindowWnd,ASLSaveRequester+4
	move.l	#ASLSaveRequester,a0
	move.l	#0,d0
	move.l	_ASLBase,a6
	jsr	AllocAslRequest(a6)	;Allocate save requester.
	move.l	d0,ASLSaveRequestPtr
	rts

*****************************************************************************
* Free ASL file requesters.                                                 *
*****************************************************************************
FreeLoadRequester:
	move.l	ASLLoadRequestPtr,a0
	move.l	_ASLBase,a6
	jsr	FreeAslRequest(a6)	;Free load requester.
	rts

FreeInsertRequester:
	move.l	ASLInsertRequestPtr,a0
	move.l	_ASLBase,a6
	jsr	FreeAslRequest(a6)	;Free insert requester.
	rts

FreeSaveRequester:
	move.l	ASLSaveRequestPtr,a0
	move.l	_ASLBase,a6
	jsr	FreeAslRequest(a6)	;Free save requester.
	rts

*****************************************************************************
* ASL library data items.                                                   *
*****************************************************************************
	cnop	0,4	;Longword align.
ASLLoadRequester:
		dc.l	ASL_Window,0
		dc.l	ASL_Hail,LoadRequesterTitle
		dc.l	ASL_FuncFlags,FILF_PATGAD
		dc.l	ASL_OKText,LoadRequesterOK
		dc.l	ASL_Pattern,ASLFilePattern
		dc.l	TAG_END

ASLLoadRequestPtr:
		dc.l	0
LoadRequesterTitle:
		dc.b	"Open document",0
LoadRequesterOK:dc.b	"Open",0

	cnop	0,4	;Longword align.
ASLSaveRequester:
		dc.l	ASL_Window,0
		dc.l	ASL_Hail,SaveRequesterTitle
		dc.l	ASL_FuncFlags,FILF_PATGAD+FILF_SAVE
		dc.l	ASL_OKText,SaveRequesterOK
		dc.l	ASL_Pattern,ASLFilePattern
		dc.l	TAG_END

ASLSaveRequestPtr:
		dc.l	0
SaveRequesterTitle:
		dc.b	"Save document",0
SaveRequesterOK:dc.b	"Save",0

	cnop	0,4	;Longword align.
ASLInsertRequester:
		dc.l	ASL_Window,0
		dc.l	ASL_Hail,InsertRequesterTitle
		dc.l	ASL_FuncFlags,FILF_PATGAD
		dc.l	ASL_OKText,InsertRequesterOK
		dc.l	ASL_Pattern,ASLFilePattern
		dc.l	TAG_END

ASLInsertRequestPtr:
		dc.l	0
InsertRequesterTitle:
		dc.b	"Insert document",0
InsertRequesterOK:
		dc.b	"Insert",0
ASLFilePattern:	dc.b	"~(#?.info)",0

	cnop	0,4	;Longword align.
*****************************************************************************
* GUI routines are included here.                                           *
*****************************************************************************
	INCLUDE	"TextEngine52GUI.s"

*****************************************************************************
* Section for data which must be in chip ram.                               *
*****************************************************************************
	SECTION	ChipData,data_c

SleepPointerImage:
		dc.w	$0000,$0000,$0400,$07c0
		dc.w	$0000,$07c0,$0100,$0380
		dc.w	$0000,$07e0,$07c0,$1ff8
		dc.w	$1ff0,$3fec,$3ff8,$7fde
		dc.w	$3ff8,$7fbe,$7ffc,$ff7f
		dc.w	$7efc,$ffff,$7ffc,$ffff
		dc.w	$3ff8,$7ffe,$3ff8,$7ffe
		dc.w	$1ff0,$3ffc,$07c0,$1ff8
		dc.w	$0000,$07e0,$0000,$0000

WelcomeImage4:
	dc.w	2,1		;X,Y coords.
	dc.w	312,140		;Width, height.
	dc.w	2		;2 bit planes.
	dc.l	WelcomeBitmap4
	dc.b	3,0
	dc.l	0

WelcomeImage8:
	dc.w	2,1		;X,Y coords.
	dc.w	312,140		;Width, height.
	dc.w	3		;3 bit planes.
	dc.l	WelcomeBitmap8
	dc.b	7,0
	dc.l	0

WelcomeBitmap4:
	INCBIN	"Welcome4.bm"
WelcomeBitmap8:
	INCBIN	"Welcome8.bm"

	END
